# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Service.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice
import IcePy
import Ice.BuiltinSequences_ice
import Ice.CommunicatorF_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Start of module IceBox
_M_IceBox = Ice.openModule('IceBox')
__name__ = 'IceBox'
_M_IceBox.__doc__ = """
 IceBox is an application server specifically for Ice applications. IceBox can easily run and administer Ice
 services that are dynamically loaded as a DLL, shared library, or Java class.
"""

if 'FailureException' not in _M_IceBox.__dict__:
    _M_IceBox.FailureException = Ice.createTempClass()

    class FailureException(Ice.LocalException):
        """
         This exception is a general failure notification. It is thrown for errors such as a service encountering an error
         during initialization, or the service manager being unable to load a service executable.
        Members:
        reason --  The reason for the failure.
        """

        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceBox::FailureException'

    _M_IceBox._t_FailureException = IcePy.defineException(
        '::IceBox::FailureException', FailureException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    FailureException._ice_type = _M_IceBox._t_FailureException

    _M_IceBox.FailureException = FailureException
    del FailureException

if 'Service' not in _M_IceBox.__dict__:
    _M_IceBox.Service = Ice.createTempClass()

    class Service(object):
        """
         An application service managed by a ServiceManager.
        """

        def __init__(self):
            if Ice.getType(self) == _M_IceBox.Service:
                raise RuntimeError('IceBox.Service is an abstract class')

        def start(self, name, communicator, args):
            """
             Start the service. The given communicator is created by the ServiceManager for use by the service. This
             communicator may also be used by other services, depending on the service configuration.
             The ServiceManager owns this communicator, and is responsible for destroying it.
            Arguments:
            name -- The service's name, as determined by the configuration.
            communicator -- A communicator for use by the service.
            args -- The service arguments that were not converted into properties.
            Throws:
            FailureException -- Raised if start failed.
            """
            raise NotImplementedError("method 'start' not implemented")

        def stop(self):
            """
             Stop the service.
            """
            raise NotImplementedError("method 'stop' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceBox._t_Service)

        __repr__ = __str__

    _M_IceBox._t_Service = IcePy.defineValue('::IceBox::Service', Service, -1, (), False, True, None, ())
    Service._ice_type = _M_IceBox._t_Service

    _M_IceBox.Service = Service
    del Service

# End of module IceBox
