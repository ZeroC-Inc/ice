# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.8.50
#
# <auto-generated>
#
# Generated from file `Instrumentation.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'
require 'IceLocal/EndpointF.rb'
require 'IceLocal/ConnectionF.rb'
require 'IceLocal/Current.rb'

module ::Ice

    module Instrumentation

        if not defined?(::Ice::Instrumentation::T_Observer)
            T_Observer = ::Ice::__declareLocalClass('::Ice::Instrumentation::Observer')
        end

        if not defined?(::Ice::Instrumentation::ThreadState)
            class ThreadState
                include Comparable

                def initialize(name, value)
                    @name = name
                    @value = value
                end

                def ThreadState.from_int(val)
                    @@_enumerators[val]
                end

                def to_s
                    @name
                end

                def to_i
                    @value
                end

                def <=>(other)
                    other.is_a?(ThreadState) or raise ArgumentError, "value must be a ThreadState"
                    @value <=> other.to_i
                end

                def hash
                    @value.hash
                end

                def ThreadState.each(&block)
                    @@_enumerators.each_value(&block)
                end

                ThreadStateIdle = ThreadState.new("ThreadStateIdle", 0)
                ThreadStateInUseForIO = ThreadState.new("ThreadStateInUseForIO", 1)
                ThreadStateInUseForUser = ThreadState.new("ThreadStateInUseForUser", 2)
                ThreadStateInUseForOther = ThreadState.new("ThreadStateInUseForOther", 3)

                @@_enumerators = {0=>ThreadStateIdle, 1=>ThreadStateInUseForIO, 2=>ThreadStateInUseForUser, 3=>ThreadStateInUseForOther}

                def ThreadState._enumerators
                    @@_enumerators
                end

                private_class_method :new
            end

            T_ThreadState = ::Ice::__defineEnum('::Ice::Instrumentation::ThreadState', ThreadState, ThreadState::_enumerators)
        end

        if not defined?(::Ice::Instrumentation::T_ThreadObserver)
            T_ThreadObserver = ::Ice::__declareLocalClass('::Ice::Instrumentation::ThreadObserver')
        end

        if not defined?(::Ice::Instrumentation::ConnectionState)
            class ConnectionState
                include Comparable

                def initialize(name, value)
                    @name = name
                    @value = value
                end

                def ConnectionState.from_int(val)
                    @@_enumerators[val]
                end

                def to_s
                    @name
                end

                def to_i
                    @value
                end

                def <=>(other)
                    other.is_a?(ConnectionState) or raise ArgumentError, "value must be a ConnectionState"
                    @value <=> other.to_i
                end

                def hash
                    @value.hash
                end

                def ConnectionState.each(&block)
                    @@_enumerators.each_value(&block)
                end

                ConnectionStateValidating = ConnectionState.new("ConnectionStateValidating", 0)
                ConnectionStateHolding = ConnectionState.new("ConnectionStateHolding", 1)
                ConnectionStateActive = ConnectionState.new("ConnectionStateActive", 2)
                ConnectionStateClosing = ConnectionState.new("ConnectionStateClosing", 3)
                ConnectionStateClosed = ConnectionState.new("ConnectionStateClosed", 4)

                @@_enumerators = {0=>ConnectionStateValidating, 1=>ConnectionStateHolding, 2=>ConnectionStateActive, 3=>ConnectionStateClosing, 4=>ConnectionStateClosed}

                def ConnectionState._enumerators
                    @@_enumerators
                end

                private_class_method :new
            end

            T_ConnectionState = ::Ice::__defineEnum('::Ice::Instrumentation::ConnectionState', ConnectionState, ConnectionState::_enumerators)
        end

        if not defined?(::Ice::Instrumentation::T_ConnectionObserver)
            T_ConnectionObserver = ::Ice::__declareLocalClass('::Ice::Instrumentation::ConnectionObserver')
        end

        if not defined?(::Ice::Instrumentation::T_DispatchObserver)
            T_DispatchObserver = ::Ice::__declareLocalClass('::Ice::Instrumentation::DispatchObserver')
        end

        if not defined?(::Ice::Instrumentation::T_ChildInvocationObserver)
            T_ChildInvocationObserver = ::Ice::__declareLocalClass('::Ice::Instrumentation::ChildInvocationObserver')
        end

        if not defined?(::Ice::Instrumentation::T_RemoteObserver)
            T_RemoteObserver = ::Ice::__declareLocalClass('::Ice::Instrumentation::RemoteObserver')
        end

        if not defined?(::Ice::Instrumentation::T_CollocatedObserver)
            T_CollocatedObserver = ::Ice::__declareLocalClass('::Ice::Instrumentation::CollocatedObserver')
        end

        if not defined?(::Ice::Instrumentation::T_InvocationObserver)
            T_InvocationObserver = ::Ice::__declareLocalClass('::Ice::Instrumentation::InvocationObserver')
        end

        if not defined?(::Ice::Instrumentation::T_ObserverUpdater)
            T_ObserverUpdater = ::Ice::__declareLocalClass('::Ice::Instrumentation::ObserverUpdater')
        end

        if not defined?(::Ice::Instrumentation::T_CommunicatorObserver)
            T_CommunicatorObserver = ::Ice::__declareLocalClass('::Ice::Instrumentation::CommunicatorObserver')
        end
    end
end
