# encoding: utf-8
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Current.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

require 'Ice'
require 'IceLocal/ObjectAdapterF.rb'
require 'IceLocal/ConnectionF.rb'
require 'Ice/Context.rb'
require 'Ice/Identity.rb'
require 'Ice/OperationMode.rb'
require 'Ice/Version.rb'

module ::Ice

    if not defined?(::Ice::Current)
        class Current
            include ::Ice::Inspect_mixin
            def initialize(adapter=nil, con=nil, id=::Ice::Identity.new, facet='', operation='', mode=::Ice::OperationMode::Normal, ctx=nil, requestId=0, encoding=::Ice::EncodingVersion.new)
                @adapter = adapter
                @con = con
                @id = id
                @facet = facet
                @operation = operation
                @mode = mode
                @ctx = ctx
                @requestId = requestId
                @encoding = encoding
            end

            def hash
                _h = 0
                _h = 5 * _h + @adapter.hash
                _h = 5 * _h + @con.hash
                _h = 5 * _h + @id.hash
                _h = 5 * _h + @facet.hash
                _h = 5 * _h + @operation.hash
                _h = 5 * _h + @mode.hash
                _h = 5 * _h + @ctx.hash
                _h = 5 * _h + @requestId.hash
                _h = 5 * _h + @encoding.hash
                _h % 0x7fffffff
            end

            def ==(other)
                return false if !other.is_a? ::Ice::Current or
                    @adapter != other.adapter or
                    @con != other.con or
                    @id != other.id or
                    @facet != other.facet or
                    @operation != other.operation or
                    @mode != other.mode or
                    @ctx != other.ctx or
                    @requestId != other.requestId or
                    @encoding != other.encoding
                true
            end

            def eql?(other)
                return other.class == self.class && other == self
            end

            attr_accessor :adapter, :con, :id, :facet, :operation, :mode, :ctx, :requestId, :encoding
        end

        T_Current = ::Ice::__defineStruct('::Ice::Current', Current, [
            ["adapter", ::Ice::T_ObjectAdapter],
            ["con", ::Ice::T_Connection],
            ["id", ::Ice::T_Identity],
            ["facet", ::Ice::T_string],
            ["operation", ::Ice::T_string],
            ["mode", ::Ice::T_OperationMode],
            ["ctx", ::Ice::T_Context],
            ["requestId", ::Ice::T_int],
            ["encoding", ::Ice::T_EncodingVersion]
        ])
    end
end
