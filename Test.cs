//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
// Ice version 4.0.0-alpha.0
//
// Generated from file `Test.ice'
//
// Warning: do not edit this file.
//

#nullable enable
#pragma warning disable SA1300 // Element must begin with upper case letter
#pragma warning disable SA1306 // Field names must begin with lower case letter
#pragma warning disable SA1309 // Field names must not begin with underscore
#pragma warning disable SA1312 // Variable names must begin with lower case letter
#pragma warning disable SA1313 // Parameter names must begin with lower case letter

#pragma warning disable 1591

namespace ZeroC.Ice.Test.SeqMapping
{
    public static class LByteSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<byte> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromByte);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<byte>> IceWriter = Write;

        public static global::System.Collections.Generic.List<byte> ReadLByteS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.List<byte>(istr.ReadArray<byte>());

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.List<byte>> IceReader = ReadLByteS;
    }

    public static class KByteSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<byte> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromByte);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<byte>> IceWriter = Write;

        public static global::System.Collections.Generic.LinkedList<byte> ReadKByteS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.LinkedList<byte>(istr.ReadArray<byte>());

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.LinkedList<byte>> IceReader = ReadKByteS;
    }

    public static class QByteSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<byte> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromByte);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<byte>> IceWriter = Write;

        public static global::System.Collections.Generic.Queue<byte> ReadQByteS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Queue<byte>(istr.ReadArray<byte>());

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Queue<byte>> IceReader = ReadQByteS;
    }

    public static class SByteSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<byte> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromByte);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<byte>> IceWriter = Write;

        public static global::System.Collections.Generic.Stack<byte> ReadSByteS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Stack<byte>(global::System.Linq.Enumerable.Reverse(istr.ReadArray<byte>()));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Stack<byte>> IceReader = ReadSByteS;
    }

    public static class CByteSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<byte> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromByte);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<byte>> IceWriter = Write;

        public static global::ZeroC.Ice.Test.SeqMapping.Custom<byte> ReadCByteS(this ZeroC.Ice.InputStream istr) =>
            new global::ZeroC.Ice.Test.SeqMapping.Custom<byte>(istr.ReadArray<byte>());

        public static readonly ZeroC.Ice.InputStreamReader<global::ZeroC.Ice.Test.SeqMapping.Custom<byte>> IceReader = ReadCByteS;
    }

    public static class LBoolSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<bool> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromBool);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<bool>> IceWriter = Write;

        public static global::System.Collections.Generic.List<bool> ReadLBoolS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.List<bool>(istr.ReadArray<bool>());

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.List<bool>> IceReader = ReadLBoolS;
    }

    public static class KBoolSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<bool> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromBool);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<bool>> IceWriter = Write;

        public static global::System.Collections.Generic.LinkedList<bool> ReadKBoolS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.LinkedList<bool>(istr.ReadArray<bool>());

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.LinkedList<bool>> IceReader = ReadKBoolS;
    }

    public static class QBoolSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<bool> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromBool);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<bool>> IceWriter = Write;

        public static global::System.Collections.Generic.Queue<bool> ReadQBoolS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Queue<bool>(istr.ReadArray<bool>());

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Queue<bool>> IceReader = ReadQBoolS;
    }

    public static class SBoolSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<bool> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromBool);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<bool>> IceWriter = Write;

        public static global::System.Collections.Generic.Stack<bool> ReadSBoolS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Stack<bool>(global::System.Linq.Enumerable.Reverse(istr.ReadArray<bool>()));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Stack<bool>> IceReader = ReadSBoolS;
    }

    public static class CBoolSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<bool> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromBool);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<bool>> IceWriter = Write;

        public static global::ZeroC.Ice.Test.SeqMapping.Custom<bool> ReadCBoolS(this ZeroC.Ice.InputStream istr) =>
            new global::ZeroC.Ice.Test.SeqMapping.Custom<bool>(istr.ReadArray<bool>());

        public static readonly ZeroC.Ice.InputStreamReader<global::ZeroC.Ice.Test.SeqMapping.Custom<bool>> IceReader = ReadCBoolS;
    }

    public static class LShortSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<short> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromShort);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<short>> IceWriter = Write;

        public static global::System.Collections.Generic.List<short> ReadLShortS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.List<short>(istr.ReadArray<short>());

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.List<short>> IceReader = ReadLShortS;
    }

    public static class KShortSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<short> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromShort);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<short>> IceWriter = Write;

        public static global::System.Collections.Generic.LinkedList<short> ReadKShortS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.LinkedList<short>(istr.ReadArray<short>());

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.LinkedList<short>> IceReader = ReadKShortS;
    }

    public static class QShortSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<short> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromShort);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<short>> IceWriter = Write;

        public static global::System.Collections.Generic.Queue<short> ReadQShortS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Queue<short>(istr.ReadArray<short>());

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Queue<short>> IceReader = ReadQShortS;
    }

    public static class SShortSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<short> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromShort);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<short>> IceWriter = Write;

        public static global::System.Collections.Generic.Stack<short> ReadSShortS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Stack<short>(global::System.Linq.Enumerable.Reverse(istr.ReadArray<short>()));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Stack<short>> IceReader = ReadSShortS;
    }

    public static class CShortSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<short> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromShort);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<short>> IceWriter = Write;

        public static global::ZeroC.Ice.Test.SeqMapping.Custom<short> ReadCShortS(this ZeroC.Ice.InputStream istr) =>
            new global::ZeroC.Ice.Test.SeqMapping.Custom<short>(istr.ReadArray<short>());

        public static readonly ZeroC.Ice.InputStreamReader<global::ZeroC.Ice.Test.SeqMapping.Custom<short>> IceReader = ReadCShortS;
    }

    public static class LIntSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<int> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromInt);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<int>> IceWriter = Write;

        public static global::System.Collections.Generic.List<int> ReadLIntS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.List<int>(istr.ReadArray<int>());

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.List<int>> IceReader = ReadLIntS;
    }

    public static class KIntSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<int> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromInt);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<int>> IceWriter = Write;

        public static global::System.Collections.Generic.LinkedList<int> ReadKIntS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.LinkedList<int>(istr.ReadArray<int>());

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.LinkedList<int>> IceReader = ReadKIntS;
    }

    public static class QIntSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<int> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromInt);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<int>> IceWriter = Write;

        public static global::System.Collections.Generic.Queue<int> ReadQIntS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Queue<int>(istr.ReadArray<int>());

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Queue<int>> IceReader = ReadQIntS;
    }

    public static class SIntSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<int> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromInt);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<int>> IceWriter = Write;

        public static global::System.Collections.Generic.Stack<int> ReadSIntS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Stack<int>(global::System.Linq.Enumerable.Reverse(istr.ReadArray<int>()));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Stack<int>> IceReader = ReadSIntS;
    }

    public static class CIntSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<int> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromInt);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<int>> IceWriter = Write;

        public static global::ZeroC.Ice.Test.SeqMapping.Custom<int> ReadCIntS(this ZeroC.Ice.InputStream istr) =>
            new global::ZeroC.Ice.Test.SeqMapping.Custom<int>(istr.ReadArray<int>());

        public static readonly ZeroC.Ice.InputStreamReader<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> IceReader = ReadCIntS;
    }

    public static class LLongSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<long> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromLong);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<long>> IceWriter = Write;

        public static global::System.Collections.Generic.List<long> ReadLLongS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.List<long>(istr.ReadArray<long>());

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.List<long>> IceReader = ReadLLongS;
    }

    public static class KLongSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<long> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromLong);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<long>> IceWriter = Write;

        public static global::System.Collections.Generic.LinkedList<long> ReadKLongS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.LinkedList<long>(istr.ReadArray<long>());

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.LinkedList<long>> IceReader = ReadKLongS;
    }

    public static class QLongSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<long> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromLong);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<long>> IceWriter = Write;

        public static global::System.Collections.Generic.Queue<long> ReadQLongS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Queue<long>(istr.ReadArray<long>());

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Queue<long>> IceReader = ReadQLongS;
    }

    public static class SLongSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<long> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromLong);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<long>> IceWriter = Write;

        public static global::System.Collections.Generic.Stack<long> ReadSLongS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Stack<long>(global::System.Linq.Enumerable.Reverse(istr.ReadArray<long>()));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Stack<long>> IceReader = ReadSLongS;
    }

    public static class CLongSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<long> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromLong);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<long>> IceWriter = Write;

        public static global::ZeroC.Ice.Test.SeqMapping.Custom<long> ReadCLongS(this ZeroC.Ice.InputStream istr) =>
            new global::ZeroC.Ice.Test.SeqMapping.Custom<long>(istr.ReadArray<long>());

        public static readonly ZeroC.Ice.InputStreamReader<global::ZeroC.Ice.Test.SeqMapping.Custom<long>> IceReader = ReadCLongS;
    }

    public static class LFloatSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<float> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromFloat);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<float>> IceWriter = Write;

        public static global::System.Collections.Generic.List<float> ReadLFloatS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.List<float>(istr.ReadArray<float>());

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.List<float>> IceReader = ReadLFloatS;
    }

    public static class KFloatSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<float> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromFloat);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<float>> IceWriter = Write;

        public static global::System.Collections.Generic.LinkedList<float> ReadKFloatS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.LinkedList<float>(istr.ReadArray<float>());

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.LinkedList<float>> IceReader = ReadKFloatS;
    }

    public static class QFloatSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<float> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromFloat);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<float>> IceWriter = Write;

        public static global::System.Collections.Generic.Queue<float> ReadQFloatS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Queue<float>(istr.ReadArray<float>());

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Queue<float>> IceReader = ReadQFloatS;
    }

    public static class SFloatSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<float> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromFloat);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<float>> IceWriter = Write;

        public static global::System.Collections.Generic.Stack<float> ReadSFloatS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Stack<float>(global::System.Linq.Enumerable.Reverse(istr.ReadArray<float>()));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Stack<float>> IceReader = ReadSFloatS;
    }

    public static class CFloatSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<float> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromFloat);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<float>> IceWriter = Write;

        public static global::ZeroC.Ice.Test.SeqMapping.Custom<float> ReadCFloatS(this ZeroC.Ice.InputStream istr) =>
            new global::ZeroC.Ice.Test.SeqMapping.Custom<float>(istr.ReadArray<float>());

        public static readonly ZeroC.Ice.InputStreamReader<global::ZeroC.Ice.Test.SeqMapping.Custom<float>> IceReader = ReadCFloatS;
    }

    public static class LDoubleSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<double> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromDouble);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<double>> IceWriter = Write;

        public static global::System.Collections.Generic.List<double> ReadLDoubleS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.List<double>(istr.ReadArray<double>());

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.List<double>> IceReader = ReadLDoubleS;
    }

    public static class KDoubleSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<double> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromDouble);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<double>> IceWriter = Write;

        public static global::System.Collections.Generic.LinkedList<double> ReadKDoubleS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.LinkedList<double>(istr.ReadArray<double>());

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.LinkedList<double>> IceReader = ReadKDoubleS;
    }

    public static class QDoubleSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<double> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromDouble);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<double>> IceWriter = Write;

        public static global::System.Collections.Generic.Queue<double> ReadQDoubleS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Queue<double>(istr.ReadArray<double>());

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Queue<double>> IceReader = ReadQDoubleS;
    }

    public static class SDoubleSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<double> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromDouble);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<double>> IceWriter = Write;

        public static global::System.Collections.Generic.Stack<double> ReadSDoubleS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Stack<double>(global::System.Linq.Enumerable.Reverse(istr.ReadArray<double>()));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Stack<double>> IceReader = ReadSDoubleS;
    }

    public static class CDoubleSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<double> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromDouble);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<double>> IceWriter = Write;

        public static global::ZeroC.Ice.Test.SeqMapping.Custom<double> ReadCDoubleS(this ZeroC.Ice.InputStream istr) =>
            new global::ZeroC.Ice.Test.SeqMapping.Custom<double>(istr.ReadArray<double>());

        public static readonly ZeroC.Ice.InputStreamReader<global::ZeroC.Ice.Test.SeqMapping.Custom<double>> IceReader = ReadCDoubleS;
    }

    public static class AStringSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<string> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromString);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<string>> IceWriter = Write;

        public static string[] ReadAStringS(this ZeroC.Ice.InputStream istr) =>
            istr.ReadArray(minElementSize: 1, ZeroC.Ice.InputStream.IceReaderIntoString);

        public static readonly ZeroC.Ice.InputStreamReader<string[]> IceReader = ReadAStringS;
    }

    public static class LStringSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<string> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromString);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<string>> IceWriter = Write;

        public static global::System.Collections.Generic.List<string> ReadLStringS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.List<string>(istr.ReadSequence(minElementSize: 1, ZeroC.Ice.InputStream.IceReaderIntoString));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.List<string>> IceReader = ReadLStringS;
    }

    public static class KStringSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<string> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromString);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<string>> IceWriter = Write;

        public static global::System.Collections.Generic.LinkedList<string> ReadKStringS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.LinkedList<string>(istr.ReadSequence(minElementSize: 1, ZeroC.Ice.InputStream.IceReaderIntoString));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.LinkedList<string>> IceReader = ReadKStringS;
    }

    public static class QStringSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<string> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromString);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<string>> IceWriter = Write;

        public static global::System.Collections.Generic.Queue<string> ReadQStringS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Queue<string>(istr.ReadSequence(minElementSize: 1, ZeroC.Ice.InputStream.IceReaderIntoString));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Queue<string>> IceReader = ReadQStringS;
    }

    public static class SStringSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<string> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromString);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<string>> IceWriter = Write;

        public static global::System.Collections.Generic.Stack<string> ReadSStringS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Stack<string>(global::System.Linq.Enumerable.Reverse(istr.ReadSequence(minElementSize: 1, ZeroC.Ice.InputStream.IceReaderIntoString)));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Stack<string>> IceReader = ReadSStringS;
    }

    public static class CStringSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<string> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromString);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<string>> IceWriter = Write;

        public static global::ZeroC.Ice.Test.SeqMapping.Custom<string> ReadCStringS(this ZeroC.Ice.InputStream istr) =>
            new global::ZeroC.Ice.Test.SeqMapping.Custom<string>(istr.ReadSequence(minElementSize: 1, ZeroC.Ice.InputStream.IceReaderIntoString));

        public static readonly ZeroC.Ice.InputStreamReader<global::ZeroC.Ice.Test.SeqMapping.Custom<string>> IceReader = ReadCStringS;
    }

    public static class AObjectSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> sequence) =>
            ostr.WriteSequence(sequence, global::ZeroC.Ice.AnyClass.IceWriterFromNullable);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?>> IceWriter = Write;

        public static global::ZeroC.Ice.AnyClass?[] ReadAObjectS(this ZeroC.Ice.InputStream istr) =>
            istr.ReadArray(minElementSize: 1, global::ZeroC.Ice.AnyClass.IceReaderIntoNullable);

        public static readonly ZeroC.Ice.InputStreamReader<global::ZeroC.Ice.AnyClass?[]> IceReader = ReadAObjectS;
    }

    public static class LObjectSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> sequence) =>
            ostr.WriteSequence(sequence, global::ZeroC.Ice.AnyClass.IceWriterFromNullable);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?>> IceWriter = Write;

        public static global::System.Collections.Generic.List<global::ZeroC.Ice.AnyClass?> ReadLObjectS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.List<global::ZeroC.Ice.AnyClass?>(istr.ReadSequence(minElementSize: 1, global::ZeroC.Ice.AnyClass.IceReaderIntoNullable));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.List<global::ZeroC.Ice.AnyClass?>> IceReader = ReadLObjectS;
    }

    public static class CObjectSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> sequence) =>
            ostr.WriteSequence(sequence, global::ZeroC.Ice.AnyClass.IceWriterFromNullable);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?>> IceWriter = Write;

        public static global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.AnyClass?> ReadCObjectS(this ZeroC.Ice.InputStream istr) =>
            new global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.AnyClass?>(istr.ReadSequence(minElementSize: 1, global::ZeroC.Ice.AnyClass.IceReaderIntoNullable));

        public static readonly ZeroC.Ice.InputStreamReader<global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.AnyClass?>> IceReader = ReadCObjectS;
    }

    public static class AObjectPrxSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> sequence) =>
            ostr.WriteSequence(sequence, global::ZeroC.Ice.IObjectPrx.IceWriterFromNullable);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>> IceWriter = Write;

        public static global::ZeroC.Ice.IObjectPrx?[] ReadAObjectPrxS(this ZeroC.Ice.InputStream istr) =>
            istr.ReadArray(minElementSize: 2, global::ZeroC.Ice.IObjectPrx.IceReaderIntoNullable);

        public static readonly ZeroC.Ice.InputStreamReader<global::ZeroC.Ice.IObjectPrx?[]> IceReader = ReadAObjectPrxS;
    }

    public static class LObjectPrxSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> sequence) =>
            ostr.WriteSequence(sequence, global::ZeroC.Ice.IObjectPrx.IceWriterFromNullable);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>> IceWriter = Write;

        public static global::System.Collections.Generic.List<global::ZeroC.Ice.IObjectPrx?> ReadLObjectPrxS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.List<global::ZeroC.Ice.IObjectPrx?>(istr.ReadSequence(minElementSize: 2, global::ZeroC.Ice.IObjectPrx.IceReaderIntoNullable));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.List<global::ZeroC.Ice.IObjectPrx?>> IceReader = ReadLObjectPrxS;
    }

    public static class KObjectPrxSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> sequence) =>
            ostr.WriteSequence(sequence, global::ZeroC.Ice.IObjectPrx.IceWriterFromNullable);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>> IceWriter = Write;

        public static global::System.Collections.Generic.LinkedList<global::ZeroC.Ice.IObjectPrx?> ReadKObjectPrxS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.LinkedList<global::ZeroC.Ice.IObjectPrx?>(istr.ReadSequence(minElementSize: 2, global::ZeroC.Ice.IObjectPrx.IceReaderIntoNullable));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.LinkedList<global::ZeroC.Ice.IObjectPrx?>> IceReader = ReadKObjectPrxS;
    }

    public static class QObjectPrxSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> sequence) =>
            ostr.WriteSequence(sequence, global::ZeroC.Ice.IObjectPrx.IceWriterFromNullable);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>> IceWriter = Write;

        public static global::System.Collections.Generic.Queue<global::ZeroC.Ice.IObjectPrx?> ReadQObjectPrxS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Queue<global::ZeroC.Ice.IObjectPrx?>(istr.ReadSequence(minElementSize: 2, global::ZeroC.Ice.IObjectPrx.IceReaderIntoNullable));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Queue<global::ZeroC.Ice.IObjectPrx?>> IceReader = ReadQObjectPrxS;
    }

    public static class SObjectPrxSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> sequence) =>
            ostr.WriteSequence(sequence, global::ZeroC.Ice.IObjectPrx.IceWriterFromNullable);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>> IceWriter = Write;

        public static global::System.Collections.Generic.Stack<global::ZeroC.Ice.IObjectPrx?> ReadSObjectPrxS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Stack<global::ZeroC.Ice.IObjectPrx?>(global::System.Linq.Enumerable.Reverse(istr.ReadSequence(minElementSize: 2, global::ZeroC.Ice.IObjectPrx.IceReaderIntoNullable)));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Stack<global::ZeroC.Ice.IObjectPrx?>> IceReader = ReadSObjectPrxS;
    }

    public static class CObjectPrxSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> sequence) =>
            ostr.WriteSequence(sequence, global::ZeroC.Ice.IObjectPrx.IceWriterFromNullable);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>> IceWriter = Write;

        public static global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.IObjectPrx?> ReadCObjectPrxS(this ZeroC.Ice.InputStream istr) =>
            new global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.IObjectPrx?>(istr.ReadSequence(minElementSize: 2, global::ZeroC.Ice.IObjectPrx.IceReaderIntoNullable));

        public static readonly ZeroC.Ice.InputStreamReader<global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.IObjectPrx?>> IceReader = ReadCObjectPrxS;
    }

    public partial struct S : global::System.IEquatable<S>, ZeroC.Ice.IStreamableStruct
    {
        public static ZeroC.Ice.InputStreamReader<S> IceReader =
            istr => new S(istr);

        public static ZeroC.Ice.OutputStreamValueWriter<S> IceWriter =
            (ZeroC.Ice.OutputStream ostr, in S value) => value.IceWrite(ostr);

        public int I;

        partial void Initialize();

        public S(int i)
        {
            I = i;
            Initialize();
        }

        public S(ZeroC.Ice.InputStream istr)
        {
            this.I = istr.ReadInt();
            Initialize();
        }

        public override int GetHashCode()
        {
            var hash = new global::System.HashCode();
            hash.Add(this.I);
            return hash.ToHashCode();
        }

        public bool Equals(S other) =>
            this.I == other.I;

        public override bool Equals(object? other) => other is S value && this.Equals(value);

        public static bool operator ==(S lhs, S rhs) => lhs.Equals(rhs);

        public static bool operator !=(S lhs, S rhs) => !lhs.Equals(rhs);

        public readonly void IceWrite(ZeroC.Ice.OutputStream ostr)
        {
            ostr.WriteInt(this.I);
        }
    }

    public static class AStructSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<S> sequence) =>
            ostr.WriteSequence(sequence);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<S>> IceWriter = Write;

        public static S[] ReadAStructS(this ZeroC.Ice.InputStream istr) =>
            istr.ReadArray(minElementSize: 4, S.IceReader);

        public static readonly ZeroC.Ice.InputStreamReader<S[]> IceReader = ReadAStructS;
    }

    public static class LStructSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<S> sequence) =>
            ostr.WriteSequence(sequence);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<S>> IceWriter = Write;

        public static global::System.Collections.Generic.List<S> ReadLStructS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.List<S>(istr.ReadSequence(minElementSize: 4, S.IceReader));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.List<S>> IceReader = ReadLStructS;
    }

    public static class KStructSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<S> sequence) =>
            ostr.WriteSequence(sequence);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<S>> IceWriter = Write;

        public static global::System.Collections.Generic.LinkedList<S> ReadKStructS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.LinkedList<S>(istr.ReadSequence(minElementSize: 4, S.IceReader));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.LinkedList<S>> IceReader = ReadKStructS;
    }

    public static class QStructSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<S> sequence) =>
            ostr.WriteSequence(sequence);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<S>> IceWriter = Write;

        public static global::System.Collections.Generic.Queue<S> ReadQStructS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Queue<S>(istr.ReadSequence(minElementSize: 4, S.IceReader));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Queue<S>> IceReader = ReadQStructS;
    }

    public static class SStructSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<S> sequence) =>
            ostr.WriteSequence(sequence);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<S>> IceWriter = Write;

        public static global::System.Collections.Generic.Stack<S> ReadSStructS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Stack<S>(global::System.Linq.Enumerable.Reverse(istr.ReadSequence(minElementSize: 4, S.IceReader)));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Stack<S>> IceReader = ReadSStructS;
    }

    public static class CStructSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<S> sequence) =>
            ostr.WriteSequence(sequence);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<S>> IceWriter = Write;

        public static global::ZeroC.Ice.Test.SeqMapping.Custom<S> ReadCStructS(this ZeroC.Ice.InputStream istr) =>
            new global::ZeroC.Ice.Test.SeqMapping.Custom<S>(istr.ReadSequence(minElementSize: 4, S.IceReader));

        public static readonly ZeroC.Ice.InputStreamReader<global::ZeroC.Ice.Test.SeqMapping.Custom<S>> IceReader = ReadCStructS;
    }

    public partial struct SD : global::System.IEquatable<SD>, ZeroC.Ice.IStreamableStruct
    {
        public static ZeroC.Ice.InputStreamReader<SD> IceReader =
            istr => new SD(istr);

        public static ZeroC.Ice.OutputStreamValueWriter<SD> IceWriter =
            (ZeroC.Ice.OutputStream ostr, in SD value) => value.IceWrite(ostr);

        public int I;

        partial void Initialize();

        public SD(int i)
        {
            I = i;
            Initialize();
        }

        public SD(ZeroC.Ice.InputStream istr)
        {
            this.I = istr.ReadInt();
            Initialize();
        }

        public override int GetHashCode()
        {
            var hash = new global::System.HashCode();
            hash.Add(this.I);
            return hash.ToHashCode();
        }

        public bool Equals(SD other) =>
            this.I == other.I;

        public override bool Equals(object? other) => other is SD value && this.Equals(value);

        public static bool operator ==(SD lhs, SD rhs) => lhs.Equals(rhs);

        public static bool operator !=(SD lhs, SD rhs) => !lhs.Equals(rhs);

        public readonly void IceWrite(ZeroC.Ice.OutputStream ostr)
        {
            ostr.WriteInt(this.I);
        }
    }

    public static class AStructSDHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<SD> sequence) =>
            ostr.WriteSequence(sequence);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<SD>> IceWriter = Write;

        public static SD[] ReadAStructSD(this ZeroC.Ice.InputStream istr) =>
            istr.ReadArray(minElementSize: 4, SD.IceReader);

        public static readonly ZeroC.Ice.InputStreamReader<SD[]> IceReader = ReadAStructSD;
    }

    public static class LStructSDHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<SD> sequence) =>
            ostr.WriteSequence(sequence);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<SD>> IceWriter = Write;

        public static global::System.Collections.Generic.List<SD> ReadLStructSD(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.List<SD>(istr.ReadSequence(minElementSize: 4, SD.IceReader));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.List<SD>> IceReader = ReadLStructSD;
    }

    public static class KStructSDHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<SD> sequence) =>
            ostr.WriteSequence(sequence);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<SD>> IceWriter = Write;

        public static global::System.Collections.Generic.LinkedList<SD> ReadKStructSD(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.LinkedList<SD>(istr.ReadSequence(minElementSize: 4, SD.IceReader));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.LinkedList<SD>> IceReader = ReadKStructSD;
    }

    public static class QStructSDHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<SD> sequence) =>
            ostr.WriteSequence(sequence);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<SD>> IceWriter = Write;

        public static global::System.Collections.Generic.Queue<SD> ReadQStructSD(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Queue<SD>(istr.ReadSequence(minElementSize: 4, SD.IceReader));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Queue<SD>> IceReader = ReadQStructSD;
    }

    public static class SStructSDHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<SD> sequence) =>
            ostr.WriteSequence(sequence);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<SD>> IceWriter = Write;

        public static global::System.Collections.Generic.Stack<SD> ReadSStructSD(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Stack<SD>(global::System.Linq.Enumerable.Reverse(istr.ReadSequence(minElementSize: 4, SD.IceReader)));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Stack<SD>> IceReader = ReadSStructSD;
    }

    public static class CStructSDHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<SD> sequence) =>
            ostr.WriteSequence(sequence);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<SD>> IceWriter = Write;

        public static global::ZeroC.Ice.Test.SeqMapping.Custom<SD> ReadCStructSD(this ZeroC.Ice.InputStream istr) =>
            new global::ZeroC.Ice.Test.SeqMapping.Custom<SD>(istr.ReadSequence(minElementSize: 4, SD.IceReader));

        public static readonly ZeroC.Ice.InputStreamReader<global::ZeroC.Ice.Test.SeqMapping.Custom<SD>> IceReader = ReadCStructSD;
    }

    [ZeroC.Ice.TypeId("::ZeroC::Ice::Test::SeqMapping::CV")]
    public partial class CV : ZeroC.Ice.AnyClass
    {
        public int I;

        public static readonly new ZeroC.Ice.InputStreamReader<CV> IceReader =
            istr => istr.ReadClass<CV>(IceTypeId);

        public static readonly new ZeroC.Ice.InputStreamReader<CV?> IceReaderIntoNullable =
            istr => istr.ReadNullableClass<CV>(IceTypeId);

        public static string IceTypeId => _iceAllTypeIds[0];

        public static readonly new ZeroC.Ice.OutputStreamWriter<CV> IceWriter =
            (ostr, value) => ostr.WriteClass(value, IceTypeId);

        public static readonly new ZeroC.Ice.OutputStreamWriter<CV?> IceWriterFromNullable =
            (ostr, value) => ostr.WriteNullableClass(value, IceTypeId);

        private static readonly string[] _iceAllTypeIds = ZeroC.Ice.TypeExtensions.GetAllIceTypeIds(typeof(CV));

        partial void Initialize();

        public CV(int i)
        {
            this.I = i;
            Initialize();
        }

        public CV()
        {
            Initialize();
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1801:ReviewUnusedParameters", Justification="Special constructor used for Ice unmarshaling")]
        protected internal CV(ZeroC.Ice.InputStream? istr)
        {
        }

        protected override void IceWrite(ZeroC.Ice.OutputStream ostr, bool firstSlice)
        {
            if (firstSlice)
            {
                ostr.IceStartFirstSlice(_iceAllTypeIds);
            }
            else
            {
                ostr.IceStartNextSlice(IceTypeId);
            }
            ostr.WriteInt(this.I);
            ostr.IceEndSlice(true);
        }

        protected override void IceRead(ZeroC.Ice.InputStream istr, bool firstSlice)
        {
            if (firstSlice)
            {
                _ = istr.IceStartFirstSlice();
            }
            else
            {
                istr.IceStartNextSlice();
            }
            this.I = istr.ReadInt();
            istr.IceEndSlice();
            Initialize();
        }
    }

    public static class ACVSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<CV?> sequence) =>
            ostr.WriteSequence(sequence, CV.IceWriterFromNullable);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<CV?>> IceWriter = Write;

        public static CV?[] ReadACVS(this ZeroC.Ice.InputStream istr) =>
            istr.ReadArray(minElementSize: 1, CV.IceReaderIntoNullable);

        public static readonly ZeroC.Ice.InputStreamReader<CV?[]> IceReader = ReadACVS;
    }

    public static class LCVSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<CV?> sequence) =>
            ostr.WriteSequence(sequence, CV.IceWriterFromNullable);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<CV?>> IceWriter = Write;

        public static global::System.Collections.Generic.List<CV?> ReadLCVS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.List<CV?>(istr.ReadSequence(minElementSize: 1, CV.IceReaderIntoNullable));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.List<CV?>> IceReader = ReadLCVS;
    }

    public static class AIPrxSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<IIPrx?> sequence) =>
            ostr.WriteSequence(sequence, global::ZeroC.Ice.IObjectPrx.IceWriterFromNullable);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<IIPrx?>> IceWriter = Write;

        public static IIPrx?[] ReadAIPrxS(this ZeroC.Ice.InputStream istr) =>
            istr.ReadArray(minElementSize: 2, IIPrx.IceReaderIntoNullable);

        public static readonly ZeroC.Ice.InputStreamReader<IIPrx?[]> IceReader = ReadAIPrxS;
    }

    public static class LIPrxSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<IIPrx?> sequence) =>
            ostr.WriteSequence(sequence, global::ZeroC.Ice.IObjectPrx.IceWriterFromNullable);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<IIPrx?>> IceWriter = Write;

        public static global::System.Collections.Generic.List<IIPrx?> ReadLIPrxS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.List<IIPrx?>(istr.ReadSequence(minElementSize: 2, IIPrx.IceReaderIntoNullable));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.List<IIPrx?>> IceReader = ReadLIPrxS;
    }

    public static class KIPrxSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<IIPrx?> sequence) =>
            ostr.WriteSequence(sequence, global::ZeroC.Ice.IObjectPrx.IceWriterFromNullable);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<IIPrx?>> IceWriter = Write;

        public static global::System.Collections.Generic.LinkedList<IIPrx?> ReadKIPrxS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.LinkedList<IIPrx?>(istr.ReadSequence(minElementSize: 2, IIPrx.IceReaderIntoNullable));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.LinkedList<IIPrx?>> IceReader = ReadKIPrxS;
    }

    public static class QIPrxSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<IIPrx?> sequence) =>
            ostr.WriteSequence(sequence, global::ZeroC.Ice.IObjectPrx.IceWriterFromNullable);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<IIPrx?>> IceWriter = Write;

        public static global::System.Collections.Generic.Queue<IIPrx?> ReadQIPrxS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Queue<IIPrx?>(istr.ReadSequence(minElementSize: 2, IIPrx.IceReaderIntoNullable));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Queue<IIPrx?>> IceReader = ReadQIPrxS;
    }

    public static class SIPrxSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<IIPrx?> sequence) =>
            ostr.WriteSequence(sequence, global::ZeroC.Ice.IObjectPrx.IceWriterFromNullable);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<IIPrx?>> IceWriter = Write;

        public static global::System.Collections.Generic.Stack<IIPrx?> ReadSIPrxS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Stack<IIPrx?>(global::System.Linq.Enumerable.Reverse(istr.ReadSequence(minElementSize: 2, IIPrx.IceReaderIntoNullable)));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Stack<IIPrx?>> IceReader = ReadSIPrxS;
    }

    public static class CIPrxSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<IIPrx?> sequence) =>
            ostr.WriteSequence(sequence, global::ZeroC.Ice.IObjectPrx.IceWriterFromNullable);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<IIPrx?>> IceWriter = Write;

        public static global::ZeroC.Ice.Test.SeqMapping.Custom<IIPrx?> ReadCIPrxS(this ZeroC.Ice.InputStream istr) =>
            new global::ZeroC.Ice.Test.SeqMapping.Custom<IIPrx?>(istr.ReadSequence(minElementSize: 2, IIPrx.IceReaderIntoNullable));

        public static readonly ZeroC.Ice.InputStreamReader<global::ZeroC.Ice.Test.SeqMapping.Custom<IIPrx?>> IceReader = ReadCIPrxS;
    }

    [ZeroC.Ice.TypeId("::ZeroC::Ice::Test::SeqMapping::CR")]
    public partial class CR : ZeroC.Ice.AnyClass
    {
        public CV? V;

        public static readonly new ZeroC.Ice.InputStreamReader<CR> IceReader =
            istr => istr.ReadClass<CR>(IceTypeId);

        public static readonly new ZeroC.Ice.InputStreamReader<CR?> IceReaderIntoNullable =
            istr => istr.ReadNullableClass<CR>(IceTypeId);

        public static string IceTypeId => _iceAllTypeIds[0];

        public static readonly new ZeroC.Ice.OutputStreamWriter<CR> IceWriter =
            (ostr, value) => ostr.WriteClass(value, IceTypeId);

        public static readonly new ZeroC.Ice.OutputStreamWriter<CR?> IceWriterFromNullable =
            (ostr, value) => ostr.WriteNullableClass(value, IceTypeId);

        private static readonly string[] _iceAllTypeIds = ZeroC.Ice.TypeExtensions.GetAllIceTypeIds(typeof(CR));

        partial void Initialize();

        public CR(CV? v)
        {
            this.V = v;
            Initialize();
        }

        public CR()
        {
            Initialize();
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1801:ReviewUnusedParameters", Justification="Special constructor used for Ice unmarshaling")]
        protected internal CR(ZeroC.Ice.InputStream? istr)
        {
        }

        protected override void IceWrite(ZeroC.Ice.OutputStream ostr, bool firstSlice)
        {
            if (firstSlice)
            {
                ostr.IceStartFirstSlice(_iceAllTypeIds);
            }
            else
            {
                ostr.IceStartNextSlice(IceTypeId);
            }
            ostr.WriteNullableClass(this.V, CV.IceTypeId);
            ostr.IceEndSlice(true);
        }

        protected override void IceRead(ZeroC.Ice.InputStream istr, bool firstSlice)
        {
            if (firstSlice)
            {
                _ = istr.IceStartFirstSlice();
            }
            else
            {
                istr.IceStartNextSlice();
            }
            this.V = istr.ReadNullableClass<CV>(CV.IceTypeId);
            istr.IceEndSlice();
            Initialize();
        }
    }

    public static class ACRSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<CR?> sequence) =>
            ostr.WriteSequence(sequence, CR.IceWriterFromNullable);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<CR?>> IceWriter = Write;

        public static CR?[] ReadACRS(this ZeroC.Ice.InputStream istr) =>
            istr.ReadArray(minElementSize: 1, CR.IceReaderIntoNullable);

        public static readonly ZeroC.Ice.InputStreamReader<CR?[]> IceReader = ReadACRS;
    }

    public static class LCRSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<CR?> sequence) =>
            ostr.WriteSequence(sequence, CR.IceWriterFromNullable);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<CR?>> IceWriter = Write;

        public static global::System.Collections.Generic.List<CR?> ReadLCRS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.List<CR?>(istr.ReadSequence(minElementSize: 1, CR.IceReaderIntoNullable));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.List<CR?>> IceReader = ReadLCRS;
    }

    public static class CCRSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<CR?> sequence) =>
            ostr.WriteSequence(sequence, CR.IceWriterFromNullable);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<CR?>> IceWriter = Write;

        public static global::ZeroC.Ice.Test.SeqMapping.Custom<CR?> ReadCCRS(this ZeroC.Ice.InputStream istr) =>
            new global::ZeroC.Ice.Test.SeqMapping.Custom<CR?>(istr.ReadSequence(minElementSize: 1, CR.IceReaderIntoNullable));

        public static readonly ZeroC.Ice.InputStreamReader<global::ZeroC.Ice.Test.SeqMapping.Custom<CR?>> IceReader = ReadCCRS;
    }

    public enum En : int
    {
        A,
        B,
        C
    }

    public static class EnHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, En value) =>
            ostr.WriteSize((int)value);

        public static readonly ZeroC.Ice.OutputStreamWriter<En> IceWriter = Write;

        public static En AsEn(this int value) =>
            0 <= value && value <= 2 ? (En)value : throw new ZeroC.Ice.InvalidDataException($"invalid enumerator value `{value}' for ZeroC.Ice.Test.SeqMapping.En");

        public static En ReadEn(this ZeroC.Ice.InputStream istr) =>
            AsEn(istr.ReadSize());

        public static readonly ZeroC.Ice.InputStreamReader<En> IceReader = ReadEn;
    }

    public static class AEnSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<En> sequence) =>
            ostr.WriteSequence(sequence, EnHelper.IceWriter);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<En>> IceWriter = Write;

        public static En[] ReadAEnS(this ZeroC.Ice.InputStream istr) =>
            istr.ReadArray(minElementSize: 1, EnHelper.IceReader);

        public static readonly ZeroC.Ice.InputStreamReader<En[]> IceReader = ReadAEnS;
    }

    public static class LEnSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<En> sequence) =>
            ostr.WriteSequence(sequence, EnHelper.IceWriter);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<En>> IceWriter = Write;

        public static global::System.Collections.Generic.List<En> ReadLEnS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.List<En>(istr.ReadSequence(minElementSize: 1, EnHelper.IceReader));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.List<En>> IceReader = ReadLEnS;
    }

    public static class KEnSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<En> sequence) =>
            ostr.WriteSequence(sequence, EnHelper.IceWriter);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<En>> IceWriter = Write;

        public static global::System.Collections.Generic.LinkedList<En> ReadKEnS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.LinkedList<En>(istr.ReadSequence(minElementSize: 1, EnHelper.IceReader));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.LinkedList<En>> IceReader = ReadKEnS;
    }

    public static class QEnSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<En> sequence) =>
            ostr.WriteSequence(sequence, EnHelper.IceWriter);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<En>> IceWriter = Write;

        public static global::System.Collections.Generic.Queue<En> ReadQEnS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Queue<En>(istr.ReadSequence(minElementSize: 1, EnHelper.IceReader));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Queue<En>> IceReader = ReadQEnS;
    }

    public static class SEnSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<En> sequence) =>
            ostr.WriteSequence(sequence, EnHelper.IceWriter);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<En>> IceWriter = Write;

        public static global::System.Collections.Generic.Stack<En> ReadSEnS(this ZeroC.Ice.InputStream istr) =>
            new global::System.Collections.Generic.Stack<En>(global::System.Linq.Enumerable.Reverse(istr.ReadSequence(minElementSize: 1, EnHelper.IceReader)));

        public static readonly ZeroC.Ice.InputStreamReader<global::System.Collections.Generic.Stack<En>> IceReader = ReadSEnS;
    }

    public static class CEnSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<En> sequence) =>
            ostr.WriteSequence(sequence, EnHelper.IceWriter);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<En>> IceWriter = Write;

        public static global::ZeroC.Ice.Test.SeqMapping.Custom<En> ReadCEnS(this ZeroC.Ice.InputStream istr) =>
            new global::ZeroC.Ice.Test.SeqMapping.Custom<En>(istr.ReadSequence(minElementSize: 1, EnHelper.IceReader));

        public static readonly ZeroC.Ice.InputStreamReader<global::ZeroC.Ice.Test.SeqMapping.Custom<En>> IceReader = ReadCEnS;
    }

    public static class CustomIntSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<int> sequence) =>
            ostr.WriteSequence(sequence, ZeroC.Ice.OutputStream.IceWriterFromInt);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<int>> IceWriter = Write;

        public static global::ZeroC.Ice.Test.SeqMapping.Custom<int> ReadCustomIntS(this ZeroC.Ice.InputStream istr) =>
            new global::ZeroC.Ice.Test.SeqMapping.Custom<int>(istr.ReadArray<int>());

        public static readonly ZeroC.Ice.InputStreamReader<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> IceReader = ReadCustomIntS;
    }

    public static class CustomCVSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<CV?> sequence) =>
            ostr.WriteSequence(sequence, CV.IceWriterFromNullable);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<CV?>> IceWriter = Write;

        public static global::ZeroC.Ice.Test.SeqMapping.Custom<CV?> ReadCustomCVS(this ZeroC.Ice.InputStream istr) =>
            new global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>(istr.ReadSequence(minElementSize: 1, CV.IceReaderIntoNullable));

        public static readonly ZeroC.Ice.InputStreamReader<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> IceReader = ReadCustomCVS;
    }

    public static class CustomIntSSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> sequence) =>
            ostr.WriteSequence(sequence, CustomIntSHelper.IceWriter);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<int>>> IceWriter = Write;

        public static global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> ReadCustomIntSS(this ZeroC.Ice.InputStream istr) =>
            new global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<int>>(istr.ReadSequence(minElementSize: 1, CustomIntSHelper.IceReader));

        public static readonly ZeroC.Ice.InputStreamReader<global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<int>>> IceReader = ReadCustomIntSS;
    }

    public static class CustomCVSSHelper
    {
        public static void Write(this ZeroC.Ice.OutputStream ostr, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> sequence) =>
            ostr.WriteSequence(sequence, CustomCVSHelper.IceWriter);

        public static readonly ZeroC.Ice.OutputStreamWriter<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>>> IceWriter = Write;

        public static global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> ReadCustomCVSS(this ZeroC.Ice.InputStream istr) =>
            new global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>>(istr.ReadSequence(minElementSize: 1, CustomCVSHelper.IceReader));

        public static readonly ZeroC.Ice.InputStreamReader<global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>>> IceReader = ReadCustomCVSS;
    }
}

namespace ZeroC.Ice.Test.SeqMapping
{
    /// <summary>Proxy interface used to call remote Ice objects that implement Slice interface I.
    /// <seealso cref="II"/>.</summary>
    [ZeroC.Ice.TypeId("::ZeroC::Ice::Test::SeqMapping::I")]
    public partial interface IIPrx : ZeroC.Ice.IObjectPrx
    {
        public static readonly new ZeroC.Ice.ProxyFactory<IIPrx> Factory =
            (reference) => new _IPrx(reference);

        public static readonly new ZeroC.Ice.InputStreamReader<IIPrx> IceReader =
            istr => istr.ReadProxy(Factory);

        public static readonly new ZeroC.Ice.InputStreamReader<IIPrx?> IceReaderIntoNullable =
            istr => istr.ReadNullableProxy(Factory);

        public static new IIPrx Parse(string s, ZeroC.Ice.Communicator communicator) => new _IPrx(ZeroC.Ice.Reference.Parse(s, communicator));

        public static bool TryParse(string s, ZeroC.Ice.Communicator communicator, out IIPrx? prx)
        {
            try
            {
                prx = new _IPrx(ZeroC.Ice.Reference.Parse(s, communicator));
            }
            catch (global::System.Exception)
            {
                prx = null;
                return false;
            }
            return true;
        }
    }

    internal sealed class _IPrx : ZeroC.Ice.ObjectPrx, IIPrx
    {
        internal _IPrx(ZeroC.Ice.Reference reference)
            : base(reference)
        {
        }

        ZeroC.Ice.IObjectPrx ZeroC.Ice.IObjectPrx.IceClone(ZeroC.Ice.Reference reference) => new _IPrx(reference);
    }

    /// <summary>Proxy interface used to call remote Ice objects that implement Slice interface MyClass.
    /// <seealso cref="IMyClass"/>.</summary>
    [ZeroC.Ice.TypeId("::ZeroC::Ice::Test::SeqMapping::MyClass")]
    public partial interface IMyClassPrx : ZeroC.Ice.IObjectPrx
    {
        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        void Shutdown(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_ShutdownRequest.Invoke(this, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task ShutdownAsync(global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_ShutdownRequest.InvokeAsync(this, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithEmptyParamList? _iceI_ShutdownRequest;

        private static ZeroC.Ice.OutgoingRequestWithEmptyParamList IceI_ShutdownRequest =>
            _iceI_ShutdownRequest ??= new ZeroC.Ice.OutgoingRequestWithEmptyParamList(
                operationName: "shutdown",
                idempotent: false,
                oneway: false);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (byte[] R1, byte[] R2) OpAByteS(global::System.ReadOnlyMemory<byte> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpAByteSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(byte[] R1, byte[] R2)> OpAByteSAsync(global::System.ReadOnlyMemory<byte> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpAByteSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.ReadOnlyMemory<byte>, (byte[] R1, byte[] R2)>? _iceI_OpAByteSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.ReadOnlyMemory<byte>, (byte[] R1, byte[] R2)> IceI_OpAByteSRequest =>
            _iceI_OpAByteSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.ReadOnlyMemory<byte>, (byte[] R1, byte[] R2)>(
                operationName: "opAByteS",
                idempotent: false,
                compress: false,
                format: default,
                writer: ZeroC.Ice.OutputStream.IceWriterFromByteSequence,
                reader: istr =>
                {
                    byte[] iceP_r1 = istr.ReadArray<byte>();
                    byte[] iceP_r2 = istr.ReadArray<byte>();
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.List<byte> R1, global::System.Collections.Generic.List<byte> R2) OpLByteS(global::System.Collections.Generic.IEnumerable<byte> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLByteSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.List<byte> R1, global::System.Collections.Generic.List<byte> R2)> OpLByteSAsync(global::System.Collections.Generic.IEnumerable<byte> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLByteSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<byte>, (global::System.Collections.Generic.List<byte> R1, global::System.Collections.Generic.List<byte> R2)>? _iceI_OpLByteSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<byte>, (global::System.Collections.Generic.List<byte> R1, global::System.Collections.Generic.List<byte> R2)> IceI_OpLByteSRequest =>
            _iceI_OpLByteSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<byte>, (global::System.Collections.Generic.List<byte> R1, global::System.Collections.Generic.List<byte> R2)>(
                operationName: "opLByteS",
                idempotent: false,
                compress: false,
                format: default,
                writer: LByteSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.List<byte> iceP_r1 = LByteSHelper.ReadLByteS(istr);
                    global::System.Collections.Generic.List<byte> iceP_r2 = LByteSHelper.ReadLByteS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.LinkedList<byte> R1, global::System.Collections.Generic.LinkedList<byte> R2) OpKByteS(global::System.Collections.Generic.IEnumerable<byte> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKByteSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.LinkedList<byte> R1, global::System.Collections.Generic.LinkedList<byte> R2)> OpKByteSAsync(global::System.Collections.Generic.IEnumerable<byte> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKByteSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<byte>, (global::System.Collections.Generic.LinkedList<byte> R1, global::System.Collections.Generic.LinkedList<byte> R2)>? _iceI_OpKByteSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<byte>, (global::System.Collections.Generic.LinkedList<byte> R1, global::System.Collections.Generic.LinkedList<byte> R2)> IceI_OpKByteSRequest =>
            _iceI_OpKByteSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<byte>, (global::System.Collections.Generic.LinkedList<byte> R1, global::System.Collections.Generic.LinkedList<byte> R2)>(
                operationName: "opKByteS",
                idempotent: false,
                compress: false,
                format: default,
                writer: KByteSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.LinkedList<byte> iceP_r1 = KByteSHelper.ReadKByteS(istr);
                    global::System.Collections.Generic.LinkedList<byte> iceP_r2 = KByteSHelper.ReadKByteS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Queue<byte> R1, global::System.Collections.Generic.Queue<byte> R2) OpQByteS(global::System.Collections.Generic.IEnumerable<byte> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQByteSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Queue<byte> R1, global::System.Collections.Generic.Queue<byte> R2)> OpQByteSAsync(global::System.Collections.Generic.IEnumerable<byte> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQByteSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<byte>, (global::System.Collections.Generic.Queue<byte> R1, global::System.Collections.Generic.Queue<byte> R2)>? _iceI_OpQByteSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<byte>, (global::System.Collections.Generic.Queue<byte> R1, global::System.Collections.Generic.Queue<byte> R2)> IceI_OpQByteSRequest =>
            _iceI_OpQByteSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<byte>, (global::System.Collections.Generic.Queue<byte> R1, global::System.Collections.Generic.Queue<byte> R2)>(
                operationName: "opQByteS",
                idempotent: false,
                compress: false,
                format: default,
                writer: QByteSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Queue<byte> iceP_r1 = QByteSHelper.ReadQByteS(istr);
                    global::System.Collections.Generic.Queue<byte> iceP_r2 = QByteSHelper.ReadQByteS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Stack<byte> R1, global::System.Collections.Generic.Stack<byte> R2) OpSByteS(global::System.Collections.Generic.IEnumerable<byte> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSByteSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Stack<byte> R1, global::System.Collections.Generic.Stack<byte> R2)> OpSByteSAsync(global::System.Collections.Generic.IEnumerable<byte> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSByteSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<byte>, (global::System.Collections.Generic.Stack<byte> R1, global::System.Collections.Generic.Stack<byte> R2)>? _iceI_OpSByteSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<byte>, (global::System.Collections.Generic.Stack<byte> R1, global::System.Collections.Generic.Stack<byte> R2)> IceI_OpSByteSRequest =>
            _iceI_OpSByteSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<byte>, (global::System.Collections.Generic.Stack<byte> R1, global::System.Collections.Generic.Stack<byte> R2)>(
                operationName: "opSByteS",
                idempotent: false,
                compress: false,
                format: default,
                writer: SByteSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Stack<byte> iceP_r1 = SByteSHelper.ReadSByteS(istr);
                    global::System.Collections.Generic.Stack<byte> iceP_r2 = SByteSHelper.ReadSByteS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::ZeroC.Ice.Test.SeqMapping.Custom<byte> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<byte> R2) OpCByteS(global::System.Collections.Generic.IEnumerable<byte> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCByteSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::ZeroC.Ice.Test.SeqMapping.Custom<byte> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<byte> R2)> OpCByteSAsync(global::System.Collections.Generic.IEnumerable<byte> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCByteSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<byte>, (global::ZeroC.Ice.Test.SeqMapping.Custom<byte> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<byte> R2)>? _iceI_OpCByteSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<byte>, (global::ZeroC.Ice.Test.SeqMapping.Custom<byte> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<byte> R2)> IceI_OpCByteSRequest =>
            _iceI_OpCByteSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<byte>, (global::ZeroC.Ice.Test.SeqMapping.Custom<byte> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<byte> R2)>(
                operationName: "opCByteS",
                idempotent: false,
                compress: false,
                format: default,
                writer: CByteSHelper.IceWriter,
                reader: istr =>
                {
                    global::ZeroC.Ice.Test.SeqMapping.Custom<byte> iceP_r1 = CByteSHelper.ReadCByteS(istr);
                    global::ZeroC.Ice.Test.SeqMapping.Custom<byte> iceP_r2 = CByteSHelper.ReadCByteS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (bool[] R1, bool[] R2) OpABoolS(global::System.ReadOnlyMemory<bool> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpABoolSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(bool[] R1, bool[] R2)> OpABoolSAsync(global::System.ReadOnlyMemory<bool> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpABoolSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.ReadOnlyMemory<bool>, (bool[] R1, bool[] R2)>? _iceI_OpABoolSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.ReadOnlyMemory<bool>, (bool[] R1, bool[] R2)> IceI_OpABoolSRequest =>
            _iceI_OpABoolSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.ReadOnlyMemory<bool>, (bool[] R1, bool[] R2)>(
                operationName: "opABoolS",
                idempotent: false,
                compress: false,
                format: default,
                writer: ZeroC.Ice.OutputStream.IceWriterFromBoolSequence,
                reader: istr =>
                {
                    bool[] iceP_r1 = istr.ReadArray<bool>();
                    bool[] iceP_r2 = istr.ReadArray<bool>();
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.List<bool> R1, global::System.Collections.Generic.List<bool> R2) OpLBoolS(global::System.Collections.Generic.IEnumerable<bool> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLBoolSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.List<bool> R1, global::System.Collections.Generic.List<bool> R2)> OpLBoolSAsync(global::System.Collections.Generic.IEnumerable<bool> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLBoolSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<bool>, (global::System.Collections.Generic.List<bool> R1, global::System.Collections.Generic.List<bool> R2)>? _iceI_OpLBoolSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<bool>, (global::System.Collections.Generic.List<bool> R1, global::System.Collections.Generic.List<bool> R2)> IceI_OpLBoolSRequest =>
            _iceI_OpLBoolSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<bool>, (global::System.Collections.Generic.List<bool> R1, global::System.Collections.Generic.List<bool> R2)>(
                operationName: "opLBoolS",
                idempotent: false,
                compress: false,
                format: default,
                writer: LBoolSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.List<bool> iceP_r1 = LBoolSHelper.ReadLBoolS(istr);
                    global::System.Collections.Generic.List<bool> iceP_r2 = LBoolSHelper.ReadLBoolS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.LinkedList<bool> R1, global::System.Collections.Generic.LinkedList<bool> R2) OpKBoolS(global::System.Collections.Generic.IEnumerable<bool> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKBoolSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.LinkedList<bool> R1, global::System.Collections.Generic.LinkedList<bool> R2)> OpKBoolSAsync(global::System.Collections.Generic.IEnumerable<bool> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKBoolSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<bool>, (global::System.Collections.Generic.LinkedList<bool> R1, global::System.Collections.Generic.LinkedList<bool> R2)>? _iceI_OpKBoolSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<bool>, (global::System.Collections.Generic.LinkedList<bool> R1, global::System.Collections.Generic.LinkedList<bool> R2)> IceI_OpKBoolSRequest =>
            _iceI_OpKBoolSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<bool>, (global::System.Collections.Generic.LinkedList<bool> R1, global::System.Collections.Generic.LinkedList<bool> R2)>(
                operationName: "opKBoolS",
                idempotent: false,
                compress: false,
                format: default,
                writer: KBoolSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.LinkedList<bool> iceP_r1 = KBoolSHelper.ReadKBoolS(istr);
                    global::System.Collections.Generic.LinkedList<bool> iceP_r2 = KBoolSHelper.ReadKBoolS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Queue<bool> R1, global::System.Collections.Generic.Queue<bool> R2) OpQBoolS(global::System.Collections.Generic.IEnumerable<bool> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQBoolSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Queue<bool> R1, global::System.Collections.Generic.Queue<bool> R2)> OpQBoolSAsync(global::System.Collections.Generic.IEnumerable<bool> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQBoolSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<bool>, (global::System.Collections.Generic.Queue<bool> R1, global::System.Collections.Generic.Queue<bool> R2)>? _iceI_OpQBoolSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<bool>, (global::System.Collections.Generic.Queue<bool> R1, global::System.Collections.Generic.Queue<bool> R2)> IceI_OpQBoolSRequest =>
            _iceI_OpQBoolSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<bool>, (global::System.Collections.Generic.Queue<bool> R1, global::System.Collections.Generic.Queue<bool> R2)>(
                operationName: "opQBoolS",
                idempotent: false,
                compress: false,
                format: default,
                writer: QBoolSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Queue<bool> iceP_r1 = QBoolSHelper.ReadQBoolS(istr);
                    global::System.Collections.Generic.Queue<bool> iceP_r2 = QBoolSHelper.ReadQBoolS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Stack<bool> R1, global::System.Collections.Generic.Stack<bool> R2) OpSBoolS(global::System.Collections.Generic.IEnumerable<bool> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSBoolSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Stack<bool> R1, global::System.Collections.Generic.Stack<bool> R2)> OpSBoolSAsync(global::System.Collections.Generic.IEnumerable<bool> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSBoolSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<bool>, (global::System.Collections.Generic.Stack<bool> R1, global::System.Collections.Generic.Stack<bool> R2)>? _iceI_OpSBoolSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<bool>, (global::System.Collections.Generic.Stack<bool> R1, global::System.Collections.Generic.Stack<bool> R2)> IceI_OpSBoolSRequest =>
            _iceI_OpSBoolSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<bool>, (global::System.Collections.Generic.Stack<bool> R1, global::System.Collections.Generic.Stack<bool> R2)>(
                operationName: "opSBoolS",
                idempotent: false,
                compress: false,
                format: default,
                writer: SBoolSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Stack<bool> iceP_r1 = SBoolSHelper.ReadSBoolS(istr);
                    global::System.Collections.Generic.Stack<bool> iceP_r2 = SBoolSHelper.ReadSBoolS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::ZeroC.Ice.Test.SeqMapping.Custom<bool> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<bool> R2) OpCBoolS(global::System.Collections.Generic.IEnumerable<bool> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCBoolSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::ZeroC.Ice.Test.SeqMapping.Custom<bool> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<bool> R2)> OpCBoolSAsync(global::System.Collections.Generic.IEnumerable<bool> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCBoolSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<bool>, (global::ZeroC.Ice.Test.SeqMapping.Custom<bool> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<bool> R2)>? _iceI_OpCBoolSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<bool>, (global::ZeroC.Ice.Test.SeqMapping.Custom<bool> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<bool> R2)> IceI_OpCBoolSRequest =>
            _iceI_OpCBoolSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<bool>, (global::ZeroC.Ice.Test.SeqMapping.Custom<bool> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<bool> R2)>(
                operationName: "opCBoolS",
                idempotent: false,
                compress: false,
                format: default,
                writer: CBoolSHelper.IceWriter,
                reader: istr =>
                {
                    global::ZeroC.Ice.Test.SeqMapping.Custom<bool> iceP_r1 = CBoolSHelper.ReadCBoolS(istr);
                    global::ZeroC.Ice.Test.SeqMapping.Custom<bool> iceP_r2 = CBoolSHelper.ReadCBoolS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (short[] R1, short[] R2) OpAShortS(global::System.ReadOnlyMemory<short> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpAShortSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(short[] R1, short[] R2)> OpAShortSAsync(global::System.ReadOnlyMemory<short> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpAShortSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.ReadOnlyMemory<short>, (short[] R1, short[] R2)>? _iceI_OpAShortSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.ReadOnlyMemory<short>, (short[] R1, short[] R2)> IceI_OpAShortSRequest =>
            _iceI_OpAShortSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.ReadOnlyMemory<short>, (short[] R1, short[] R2)>(
                operationName: "opAShortS",
                idempotent: false,
                compress: false,
                format: default,
                writer: ZeroC.Ice.OutputStream.IceWriterFromShortSequence,
                reader: istr =>
                {
                    short[] iceP_r1 = istr.ReadArray<short>();
                    short[] iceP_r2 = istr.ReadArray<short>();
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.List<short> R1, global::System.Collections.Generic.List<short> R2) OpLShortS(global::System.Collections.Generic.IEnumerable<short> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLShortSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.List<short> R1, global::System.Collections.Generic.List<short> R2)> OpLShortSAsync(global::System.Collections.Generic.IEnumerable<short> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLShortSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<short>, (global::System.Collections.Generic.List<short> R1, global::System.Collections.Generic.List<short> R2)>? _iceI_OpLShortSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<short>, (global::System.Collections.Generic.List<short> R1, global::System.Collections.Generic.List<short> R2)> IceI_OpLShortSRequest =>
            _iceI_OpLShortSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<short>, (global::System.Collections.Generic.List<short> R1, global::System.Collections.Generic.List<short> R2)>(
                operationName: "opLShortS",
                idempotent: false,
                compress: false,
                format: default,
                writer: LShortSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.List<short> iceP_r1 = LShortSHelper.ReadLShortS(istr);
                    global::System.Collections.Generic.List<short> iceP_r2 = LShortSHelper.ReadLShortS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.LinkedList<short> R1, global::System.Collections.Generic.LinkedList<short> R2) OpKShortS(global::System.Collections.Generic.IEnumerable<short> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKShortSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.LinkedList<short> R1, global::System.Collections.Generic.LinkedList<short> R2)> OpKShortSAsync(global::System.Collections.Generic.IEnumerable<short> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKShortSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<short>, (global::System.Collections.Generic.LinkedList<short> R1, global::System.Collections.Generic.LinkedList<short> R2)>? _iceI_OpKShortSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<short>, (global::System.Collections.Generic.LinkedList<short> R1, global::System.Collections.Generic.LinkedList<short> R2)> IceI_OpKShortSRequest =>
            _iceI_OpKShortSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<short>, (global::System.Collections.Generic.LinkedList<short> R1, global::System.Collections.Generic.LinkedList<short> R2)>(
                operationName: "opKShortS",
                idempotent: false,
                compress: false,
                format: default,
                writer: KShortSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.LinkedList<short> iceP_r1 = KShortSHelper.ReadKShortS(istr);
                    global::System.Collections.Generic.LinkedList<short> iceP_r2 = KShortSHelper.ReadKShortS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Queue<short> R1, global::System.Collections.Generic.Queue<short> R2) OpQShortS(global::System.Collections.Generic.IEnumerable<short> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQShortSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Queue<short> R1, global::System.Collections.Generic.Queue<short> R2)> OpQShortSAsync(global::System.Collections.Generic.IEnumerable<short> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQShortSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<short>, (global::System.Collections.Generic.Queue<short> R1, global::System.Collections.Generic.Queue<short> R2)>? _iceI_OpQShortSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<short>, (global::System.Collections.Generic.Queue<short> R1, global::System.Collections.Generic.Queue<short> R2)> IceI_OpQShortSRequest =>
            _iceI_OpQShortSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<short>, (global::System.Collections.Generic.Queue<short> R1, global::System.Collections.Generic.Queue<short> R2)>(
                operationName: "opQShortS",
                idempotent: false,
                compress: false,
                format: default,
                writer: QShortSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Queue<short> iceP_r1 = QShortSHelper.ReadQShortS(istr);
                    global::System.Collections.Generic.Queue<short> iceP_r2 = QShortSHelper.ReadQShortS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Stack<short> R1, global::System.Collections.Generic.Stack<short> R2) OpSShortS(global::System.Collections.Generic.IEnumerable<short> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSShortSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Stack<short> R1, global::System.Collections.Generic.Stack<short> R2)> OpSShortSAsync(global::System.Collections.Generic.IEnumerable<short> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSShortSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<short>, (global::System.Collections.Generic.Stack<short> R1, global::System.Collections.Generic.Stack<short> R2)>? _iceI_OpSShortSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<short>, (global::System.Collections.Generic.Stack<short> R1, global::System.Collections.Generic.Stack<short> R2)> IceI_OpSShortSRequest =>
            _iceI_OpSShortSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<short>, (global::System.Collections.Generic.Stack<short> R1, global::System.Collections.Generic.Stack<short> R2)>(
                operationName: "opSShortS",
                idempotent: false,
                compress: false,
                format: default,
                writer: SShortSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Stack<short> iceP_r1 = SShortSHelper.ReadSShortS(istr);
                    global::System.Collections.Generic.Stack<short> iceP_r2 = SShortSHelper.ReadSShortS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::ZeroC.Ice.Test.SeqMapping.Custom<short> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<short> R2) OpCShortS(global::System.Collections.Generic.IEnumerable<short> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCShortSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::ZeroC.Ice.Test.SeqMapping.Custom<short> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<short> R2)> OpCShortSAsync(global::System.Collections.Generic.IEnumerable<short> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCShortSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<short>, (global::ZeroC.Ice.Test.SeqMapping.Custom<short> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<short> R2)>? _iceI_OpCShortSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<short>, (global::ZeroC.Ice.Test.SeqMapping.Custom<short> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<short> R2)> IceI_OpCShortSRequest =>
            _iceI_OpCShortSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<short>, (global::ZeroC.Ice.Test.SeqMapping.Custom<short> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<short> R2)>(
                operationName: "opCShortS",
                idempotent: false,
                compress: false,
                format: default,
                writer: CShortSHelper.IceWriter,
                reader: istr =>
                {
                    global::ZeroC.Ice.Test.SeqMapping.Custom<short> iceP_r1 = CShortSHelper.ReadCShortS(istr);
                    global::ZeroC.Ice.Test.SeqMapping.Custom<short> iceP_r2 = CShortSHelper.ReadCShortS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (int[] R1, int[] R2) OpAIntS(global::System.ReadOnlyMemory<int> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpAIntSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(int[] R1, int[] R2)> OpAIntSAsync(global::System.ReadOnlyMemory<int> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpAIntSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.ReadOnlyMemory<int>, (int[] R1, int[] R2)>? _iceI_OpAIntSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.ReadOnlyMemory<int>, (int[] R1, int[] R2)> IceI_OpAIntSRequest =>
            _iceI_OpAIntSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.ReadOnlyMemory<int>, (int[] R1, int[] R2)>(
                operationName: "opAIntS",
                idempotent: false,
                compress: false,
                format: default,
                writer: ZeroC.Ice.OutputStream.IceWriterFromIntSequence,
                reader: istr =>
                {
                    int[] iceP_r1 = istr.ReadArray<int>();
                    int[] iceP_r2 = istr.ReadArray<int>();
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.List<int> R1, global::System.Collections.Generic.List<int> R2) OpLIntS(global::System.Collections.Generic.IEnumerable<int> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLIntSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.List<int> R1, global::System.Collections.Generic.List<int> R2)> OpLIntSAsync(global::System.Collections.Generic.IEnumerable<int> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLIntSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<int>, (global::System.Collections.Generic.List<int> R1, global::System.Collections.Generic.List<int> R2)>? _iceI_OpLIntSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<int>, (global::System.Collections.Generic.List<int> R1, global::System.Collections.Generic.List<int> R2)> IceI_OpLIntSRequest =>
            _iceI_OpLIntSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<int>, (global::System.Collections.Generic.List<int> R1, global::System.Collections.Generic.List<int> R2)>(
                operationName: "opLIntS",
                idempotent: false,
                compress: false,
                format: default,
                writer: LIntSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.List<int> iceP_r1 = LIntSHelper.ReadLIntS(istr);
                    global::System.Collections.Generic.List<int> iceP_r2 = LIntSHelper.ReadLIntS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.LinkedList<int> R1, global::System.Collections.Generic.LinkedList<int> R2) OpKIntS(global::System.Collections.Generic.IEnumerable<int> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKIntSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.LinkedList<int> R1, global::System.Collections.Generic.LinkedList<int> R2)> OpKIntSAsync(global::System.Collections.Generic.IEnumerable<int> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKIntSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<int>, (global::System.Collections.Generic.LinkedList<int> R1, global::System.Collections.Generic.LinkedList<int> R2)>? _iceI_OpKIntSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<int>, (global::System.Collections.Generic.LinkedList<int> R1, global::System.Collections.Generic.LinkedList<int> R2)> IceI_OpKIntSRequest =>
            _iceI_OpKIntSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<int>, (global::System.Collections.Generic.LinkedList<int> R1, global::System.Collections.Generic.LinkedList<int> R2)>(
                operationName: "opKIntS",
                idempotent: false,
                compress: false,
                format: default,
                writer: KIntSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.LinkedList<int> iceP_r1 = KIntSHelper.ReadKIntS(istr);
                    global::System.Collections.Generic.LinkedList<int> iceP_r2 = KIntSHelper.ReadKIntS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Queue<int> R1, global::System.Collections.Generic.Queue<int> R2) OpQIntS(global::System.Collections.Generic.IEnumerable<int> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQIntSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Queue<int> R1, global::System.Collections.Generic.Queue<int> R2)> OpQIntSAsync(global::System.Collections.Generic.IEnumerable<int> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQIntSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<int>, (global::System.Collections.Generic.Queue<int> R1, global::System.Collections.Generic.Queue<int> R2)>? _iceI_OpQIntSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<int>, (global::System.Collections.Generic.Queue<int> R1, global::System.Collections.Generic.Queue<int> R2)> IceI_OpQIntSRequest =>
            _iceI_OpQIntSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<int>, (global::System.Collections.Generic.Queue<int> R1, global::System.Collections.Generic.Queue<int> R2)>(
                operationName: "opQIntS",
                idempotent: false,
                compress: false,
                format: default,
                writer: QIntSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Queue<int> iceP_r1 = QIntSHelper.ReadQIntS(istr);
                    global::System.Collections.Generic.Queue<int> iceP_r2 = QIntSHelper.ReadQIntS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Stack<int> R1, global::System.Collections.Generic.Stack<int> R2) OpSIntS(global::System.Collections.Generic.IEnumerable<int> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSIntSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Stack<int> R1, global::System.Collections.Generic.Stack<int> R2)> OpSIntSAsync(global::System.Collections.Generic.IEnumerable<int> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSIntSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<int>, (global::System.Collections.Generic.Stack<int> R1, global::System.Collections.Generic.Stack<int> R2)>? _iceI_OpSIntSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<int>, (global::System.Collections.Generic.Stack<int> R1, global::System.Collections.Generic.Stack<int> R2)> IceI_OpSIntSRequest =>
            _iceI_OpSIntSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<int>, (global::System.Collections.Generic.Stack<int> R1, global::System.Collections.Generic.Stack<int> R2)>(
                operationName: "opSIntS",
                idempotent: false,
                compress: false,
                format: default,
                writer: SIntSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Stack<int> iceP_r1 = SIntSHelper.ReadSIntS(istr);
                    global::System.Collections.Generic.Stack<int> iceP_r2 = SIntSHelper.ReadSIntS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::ZeroC.Ice.Test.SeqMapping.Custom<int> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<int> R2) OpCIntS(global::System.Collections.Generic.IEnumerable<int> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCIntSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::ZeroC.Ice.Test.SeqMapping.Custom<int> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<int> R2)> OpCIntSAsync(global::System.Collections.Generic.IEnumerable<int> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCIntSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<int>, (global::ZeroC.Ice.Test.SeqMapping.Custom<int> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<int> R2)>? _iceI_OpCIntSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<int>, (global::ZeroC.Ice.Test.SeqMapping.Custom<int> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<int> R2)> IceI_OpCIntSRequest =>
            _iceI_OpCIntSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<int>, (global::ZeroC.Ice.Test.SeqMapping.Custom<int> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<int> R2)>(
                operationName: "opCIntS",
                idempotent: false,
                compress: false,
                format: default,
                writer: CIntSHelper.IceWriter,
                reader: istr =>
                {
                    global::ZeroC.Ice.Test.SeqMapping.Custom<int> iceP_r1 = CIntSHelper.ReadCIntS(istr);
                    global::ZeroC.Ice.Test.SeqMapping.Custom<int> iceP_r2 = CIntSHelper.ReadCIntS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (long[] R1, long[] R2) OpALongS(global::System.ReadOnlyMemory<long> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpALongSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(long[] R1, long[] R2)> OpALongSAsync(global::System.ReadOnlyMemory<long> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpALongSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.ReadOnlyMemory<long>, (long[] R1, long[] R2)>? _iceI_OpALongSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.ReadOnlyMemory<long>, (long[] R1, long[] R2)> IceI_OpALongSRequest =>
            _iceI_OpALongSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.ReadOnlyMemory<long>, (long[] R1, long[] R2)>(
                operationName: "opALongS",
                idempotent: false,
                compress: false,
                format: default,
                writer: ZeroC.Ice.OutputStream.IceWriterFromLongSequence,
                reader: istr =>
                {
                    long[] iceP_r1 = istr.ReadArray<long>();
                    long[] iceP_r2 = istr.ReadArray<long>();
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.List<long> R1, global::System.Collections.Generic.List<long> R2) OpLLongS(global::System.Collections.Generic.IEnumerable<long> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLLongSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.List<long> R1, global::System.Collections.Generic.List<long> R2)> OpLLongSAsync(global::System.Collections.Generic.IEnumerable<long> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLLongSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<long>, (global::System.Collections.Generic.List<long> R1, global::System.Collections.Generic.List<long> R2)>? _iceI_OpLLongSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<long>, (global::System.Collections.Generic.List<long> R1, global::System.Collections.Generic.List<long> R2)> IceI_OpLLongSRequest =>
            _iceI_OpLLongSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<long>, (global::System.Collections.Generic.List<long> R1, global::System.Collections.Generic.List<long> R2)>(
                operationName: "opLLongS",
                idempotent: false,
                compress: false,
                format: default,
                writer: LLongSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.List<long> iceP_r1 = LLongSHelper.ReadLLongS(istr);
                    global::System.Collections.Generic.List<long> iceP_r2 = LLongSHelper.ReadLLongS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.LinkedList<long> R1, global::System.Collections.Generic.LinkedList<long> R2) OpKLongS(global::System.Collections.Generic.IEnumerable<long> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKLongSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.LinkedList<long> R1, global::System.Collections.Generic.LinkedList<long> R2)> OpKLongSAsync(global::System.Collections.Generic.IEnumerable<long> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKLongSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<long>, (global::System.Collections.Generic.LinkedList<long> R1, global::System.Collections.Generic.LinkedList<long> R2)>? _iceI_OpKLongSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<long>, (global::System.Collections.Generic.LinkedList<long> R1, global::System.Collections.Generic.LinkedList<long> R2)> IceI_OpKLongSRequest =>
            _iceI_OpKLongSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<long>, (global::System.Collections.Generic.LinkedList<long> R1, global::System.Collections.Generic.LinkedList<long> R2)>(
                operationName: "opKLongS",
                idempotent: false,
                compress: false,
                format: default,
                writer: KLongSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.LinkedList<long> iceP_r1 = KLongSHelper.ReadKLongS(istr);
                    global::System.Collections.Generic.LinkedList<long> iceP_r2 = KLongSHelper.ReadKLongS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Queue<long> R1, global::System.Collections.Generic.Queue<long> R2) OpQLongS(global::System.Collections.Generic.IEnumerable<long> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQLongSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Queue<long> R1, global::System.Collections.Generic.Queue<long> R2)> OpQLongSAsync(global::System.Collections.Generic.IEnumerable<long> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQLongSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<long>, (global::System.Collections.Generic.Queue<long> R1, global::System.Collections.Generic.Queue<long> R2)>? _iceI_OpQLongSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<long>, (global::System.Collections.Generic.Queue<long> R1, global::System.Collections.Generic.Queue<long> R2)> IceI_OpQLongSRequest =>
            _iceI_OpQLongSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<long>, (global::System.Collections.Generic.Queue<long> R1, global::System.Collections.Generic.Queue<long> R2)>(
                operationName: "opQLongS",
                idempotent: false,
                compress: false,
                format: default,
                writer: QLongSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Queue<long> iceP_r1 = QLongSHelper.ReadQLongS(istr);
                    global::System.Collections.Generic.Queue<long> iceP_r2 = QLongSHelper.ReadQLongS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Stack<long> R1, global::System.Collections.Generic.Stack<long> R2) OpSLongS(global::System.Collections.Generic.IEnumerable<long> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSLongSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Stack<long> R1, global::System.Collections.Generic.Stack<long> R2)> OpSLongSAsync(global::System.Collections.Generic.IEnumerable<long> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSLongSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<long>, (global::System.Collections.Generic.Stack<long> R1, global::System.Collections.Generic.Stack<long> R2)>? _iceI_OpSLongSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<long>, (global::System.Collections.Generic.Stack<long> R1, global::System.Collections.Generic.Stack<long> R2)> IceI_OpSLongSRequest =>
            _iceI_OpSLongSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<long>, (global::System.Collections.Generic.Stack<long> R1, global::System.Collections.Generic.Stack<long> R2)>(
                operationName: "opSLongS",
                idempotent: false,
                compress: false,
                format: default,
                writer: SLongSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Stack<long> iceP_r1 = SLongSHelper.ReadSLongS(istr);
                    global::System.Collections.Generic.Stack<long> iceP_r2 = SLongSHelper.ReadSLongS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::ZeroC.Ice.Test.SeqMapping.Custom<long> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<long> R2) OpCLongS(global::System.Collections.Generic.IEnumerable<long> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCLongSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::ZeroC.Ice.Test.SeqMapping.Custom<long> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<long> R2)> OpCLongSAsync(global::System.Collections.Generic.IEnumerable<long> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCLongSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<long>, (global::ZeroC.Ice.Test.SeqMapping.Custom<long> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<long> R2)>? _iceI_OpCLongSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<long>, (global::ZeroC.Ice.Test.SeqMapping.Custom<long> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<long> R2)> IceI_OpCLongSRequest =>
            _iceI_OpCLongSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<long>, (global::ZeroC.Ice.Test.SeqMapping.Custom<long> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<long> R2)>(
                operationName: "opCLongS",
                idempotent: false,
                compress: false,
                format: default,
                writer: CLongSHelper.IceWriter,
                reader: istr =>
                {
                    global::ZeroC.Ice.Test.SeqMapping.Custom<long> iceP_r1 = CLongSHelper.ReadCLongS(istr);
                    global::ZeroC.Ice.Test.SeqMapping.Custom<long> iceP_r2 = CLongSHelper.ReadCLongS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (float[] R1, float[] R2) OpAFloatS(global::System.ReadOnlyMemory<float> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpAFloatSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(float[] R1, float[] R2)> OpAFloatSAsync(global::System.ReadOnlyMemory<float> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpAFloatSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.ReadOnlyMemory<float>, (float[] R1, float[] R2)>? _iceI_OpAFloatSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.ReadOnlyMemory<float>, (float[] R1, float[] R2)> IceI_OpAFloatSRequest =>
            _iceI_OpAFloatSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.ReadOnlyMemory<float>, (float[] R1, float[] R2)>(
                operationName: "opAFloatS",
                idempotent: false,
                compress: false,
                format: default,
                writer: ZeroC.Ice.OutputStream.IceWriterFromFloatSequence,
                reader: istr =>
                {
                    float[] iceP_r1 = istr.ReadArray<float>();
                    float[] iceP_r2 = istr.ReadArray<float>();
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.List<float> R1, global::System.Collections.Generic.List<float> R2) OpLFloatS(global::System.Collections.Generic.IEnumerable<float> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLFloatSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.List<float> R1, global::System.Collections.Generic.List<float> R2)> OpLFloatSAsync(global::System.Collections.Generic.IEnumerable<float> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLFloatSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<float>, (global::System.Collections.Generic.List<float> R1, global::System.Collections.Generic.List<float> R2)>? _iceI_OpLFloatSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<float>, (global::System.Collections.Generic.List<float> R1, global::System.Collections.Generic.List<float> R2)> IceI_OpLFloatSRequest =>
            _iceI_OpLFloatSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<float>, (global::System.Collections.Generic.List<float> R1, global::System.Collections.Generic.List<float> R2)>(
                operationName: "opLFloatS",
                idempotent: false,
                compress: false,
                format: default,
                writer: LFloatSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.List<float> iceP_r1 = LFloatSHelper.ReadLFloatS(istr);
                    global::System.Collections.Generic.List<float> iceP_r2 = LFloatSHelper.ReadLFloatS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.LinkedList<float> R1, global::System.Collections.Generic.LinkedList<float> R2) OpKFloatS(global::System.Collections.Generic.IEnumerable<float> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKFloatSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.LinkedList<float> R1, global::System.Collections.Generic.LinkedList<float> R2)> OpKFloatSAsync(global::System.Collections.Generic.IEnumerable<float> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKFloatSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<float>, (global::System.Collections.Generic.LinkedList<float> R1, global::System.Collections.Generic.LinkedList<float> R2)>? _iceI_OpKFloatSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<float>, (global::System.Collections.Generic.LinkedList<float> R1, global::System.Collections.Generic.LinkedList<float> R2)> IceI_OpKFloatSRequest =>
            _iceI_OpKFloatSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<float>, (global::System.Collections.Generic.LinkedList<float> R1, global::System.Collections.Generic.LinkedList<float> R2)>(
                operationName: "opKFloatS",
                idempotent: false,
                compress: false,
                format: default,
                writer: KFloatSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.LinkedList<float> iceP_r1 = KFloatSHelper.ReadKFloatS(istr);
                    global::System.Collections.Generic.LinkedList<float> iceP_r2 = KFloatSHelper.ReadKFloatS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Queue<float> R1, global::System.Collections.Generic.Queue<float> R2) OpQFloatS(global::System.Collections.Generic.IEnumerable<float> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQFloatSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Queue<float> R1, global::System.Collections.Generic.Queue<float> R2)> OpQFloatSAsync(global::System.Collections.Generic.IEnumerable<float> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQFloatSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<float>, (global::System.Collections.Generic.Queue<float> R1, global::System.Collections.Generic.Queue<float> R2)>? _iceI_OpQFloatSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<float>, (global::System.Collections.Generic.Queue<float> R1, global::System.Collections.Generic.Queue<float> R2)> IceI_OpQFloatSRequest =>
            _iceI_OpQFloatSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<float>, (global::System.Collections.Generic.Queue<float> R1, global::System.Collections.Generic.Queue<float> R2)>(
                operationName: "opQFloatS",
                idempotent: false,
                compress: false,
                format: default,
                writer: QFloatSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Queue<float> iceP_r1 = QFloatSHelper.ReadQFloatS(istr);
                    global::System.Collections.Generic.Queue<float> iceP_r2 = QFloatSHelper.ReadQFloatS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Stack<float> R1, global::System.Collections.Generic.Stack<float> R2) OpSFloatS(global::System.Collections.Generic.IEnumerable<float> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSFloatSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Stack<float> R1, global::System.Collections.Generic.Stack<float> R2)> OpSFloatSAsync(global::System.Collections.Generic.IEnumerable<float> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSFloatSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<float>, (global::System.Collections.Generic.Stack<float> R1, global::System.Collections.Generic.Stack<float> R2)>? _iceI_OpSFloatSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<float>, (global::System.Collections.Generic.Stack<float> R1, global::System.Collections.Generic.Stack<float> R2)> IceI_OpSFloatSRequest =>
            _iceI_OpSFloatSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<float>, (global::System.Collections.Generic.Stack<float> R1, global::System.Collections.Generic.Stack<float> R2)>(
                operationName: "opSFloatS",
                idempotent: false,
                compress: false,
                format: default,
                writer: SFloatSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Stack<float> iceP_r1 = SFloatSHelper.ReadSFloatS(istr);
                    global::System.Collections.Generic.Stack<float> iceP_r2 = SFloatSHelper.ReadSFloatS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::ZeroC.Ice.Test.SeqMapping.Custom<float> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<float> R2) OpCFloatS(global::System.Collections.Generic.IEnumerable<float> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCFloatSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::ZeroC.Ice.Test.SeqMapping.Custom<float> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<float> R2)> OpCFloatSAsync(global::System.Collections.Generic.IEnumerable<float> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCFloatSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<float>, (global::ZeroC.Ice.Test.SeqMapping.Custom<float> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<float> R2)>? _iceI_OpCFloatSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<float>, (global::ZeroC.Ice.Test.SeqMapping.Custom<float> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<float> R2)> IceI_OpCFloatSRequest =>
            _iceI_OpCFloatSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<float>, (global::ZeroC.Ice.Test.SeqMapping.Custom<float> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<float> R2)>(
                operationName: "opCFloatS",
                idempotent: false,
                compress: false,
                format: default,
                writer: CFloatSHelper.IceWriter,
                reader: istr =>
                {
                    global::ZeroC.Ice.Test.SeqMapping.Custom<float> iceP_r1 = CFloatSHelper.ReadCFloatS(istr);
                    global::ZeroC.Ice.Test.SeqMapping.Custom<float> iceP_r2 = CFloatSHelper.ReadCFloatS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (double[] R1, double[] R2) OpADoubleS(global::System.ReadOnlyMemory<double> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpADoubleSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(double[] R1, double[] R2)> OpADoubleSAsync(global::System.ReadOnlyMemory<double> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpADoubleSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.ReadOnlyMemory<double>, (double[] R1, double[] R2)>? _iceI_OpADoubleSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.ReadOnlyMemory<double>, (double[] R1, double[] R2)> IceI_OpADoubleSRequest =>
            _iceI_OpADoubleSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.ReadOnlyMemory<double>, (double[] R1, double[] R2)>(
                operationName: "opADoubleS",
                idempotent: false,
                compress: false,
                format: default,
                writer: ZeroC.Ice.OutputStream.IceWriterFromDoubleSequence,
                reader: istr =>
                {
                    double[] iceP_r1 = istr.ReadArray<double>();
                    double[] iceP_r2 = istr.ReadArray<double>();
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.List<double> R1, global::System.Collections.Generic.List<double> R2) OpLDoubleS(global::System.Collections.Generic.IEnumerable<double> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLDoubleSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.List<double> R1, global::System.Collections.Generic.List<double> R2)> OpLDoubleSAsync(global::System.Collections.Generic.IEnumerable<double> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLDoubleSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<double>, (global::System.Collections.Generic.List<double> R1, global::System.Collections.Generic.List<double> R2)>? _iceI_OpLDoubleSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<double>, (global::System.Collections.Generic.List<double> R1, global::System.Collections.Generic.List<double> R2)> IceI_OpLDoubleSRequest =>
            _iceI_OpLDoubleSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<double>, (global::System.Collections.Generic.List<double> R1, global::System.Collections.Generic.List<double> R2)>(
                operationName: "opLDoubleS",
                idempotent: false,
                compress: false,
                format: default,
                writer: LDoubleSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.List<double> iceP_r1 = LDoubleSHelper.ReadLDoubleS(istr);
                    global::System.Collections.Generic.List<double> iceP_r2 = LDoubleSHelper.ReadLDoubleS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.LinkedList<double> R1, global::System.Collections.Generic.LinkedList<double> R2) OpKDoubleS(global::System.Collections.Generic.IEnumerable<double> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKDoubleSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.LinkedList<double> R1, global::System.Collections.Generic.LinkedList<double> R2)> OpKDoubleSAsync(global::System.Collections.Generic.IEnumerable<double> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKDoubleSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<double>, (global::System.Collections.Generic.LinkedList<double> R1, global::System.Collections.Generic.LinkedList<double> R2)>? _iceI_OpKDoubleSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<double>, (global::System.Collections.Generic.LinkedList<double> R1, global::System.Collections.Generic.LinkedList<double> R2)> IceI_OpKDoubleSRequest =>
            _iceI_OpKDoubleSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<double>, (global::System.Collections.Generic.LinkedList<double> R1, global::System.Collections.Generic.LinkedList<double> R2)>(
                operationName: "opKDoubleS",
                idempotent: false,
                compress: false,
                format: default,
                writer: KDoubleSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.LinkedList<double> iceP_r1 = KDoubleSHelper.ReadKDoubleS(istr);
                    global::System.Collections.Generic.LinkedList<double> iceP_r2 = KDoubleSHelper.ReadKDoubleS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Queue<double> R1, global::System.Collections.Generic.Queue<double> R2) OpQDoubleS(global::System.Collections.Generic.IEnumerable<double> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQDoubleSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Queue<double> R1, global::System.Collections.Generic.Queue<double> R2)> OpQDoubleSAsync(global::System.Collections.Generic.IEnumerable<double> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQDoubleSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<double>, (global::System.Collections.Generic.Queue<double> R1, global::System.Collections.Generic.Queue<double> R2)>? _iceI_OpQDoubleSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<double>, (global::System.Collections.Generic.Queue<double> R1, global::System.Collections.Generic.Queue<double> R2)> IceI_OpQDoubleSRequest =>
            _iceI_OpQDoubleSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<double>, (global::System.Collections.Generic.Queue<double> R1, global::System.Collections.Generic.Queue<double> R2)>(
                operationName: "opQDoubleS",
                idempotent: false,
                compress: false,
                format: default,
                writer: QDoubleSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Queue<double> iceP_r1 = QDoubleSHelper.ReadQDoubleS(istr);
                    global::System.Collections.Generic.Queue<double> iceP_r2 = QDoubleSHelper.ReadQDoubleS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Stack<double> R1, global::System.Collections.Generic.Stack<double> R2) OpSDoubleS(global::System.Collections.Generic.IEnumerable<double> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSDoubleSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Stack<double> R1, global::System.Collections.Generic.Stack<double> R2)> OpSDoubleSAsync(global::System.Collections.Generic.IEnumerable<double> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSDoubleSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<double>, (global::System.Collections.Generic.Stack<double> R1, global::System.Collections.Generic.Stack<double> R2)>? _iceI_OpSDoubleSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<double>, (global::System.Collections.Generic.Stack<double> R1, global::System.Collections.Generic.Stack<double> R2)> IceI_OpSDoubleSRequest =>
            _iceI_OpSDoubleSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<double>, (global::System.Collections.Generic.Stack<double> R1, global::System.Collections.Generic.Stack<double> R2)>(
                operationName: "opSDoubleS",
                idempotent: false,
                compress: false,
                format: default,
                writer: SDoubleSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Stack<double> iceP_r1 = SDoubleSHelper.ReadSDoubleS(istr);
                    global::System.Collections.Generic.Stack<double> iceP_r2 = SDoubleSHelper.ReadSDoubleS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::ZeroC.Ice.Test.SeqMapping.Custom<double> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<double> R2) OpCDoubleS(global::System.Collections.Generic.IEnumerable<double> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCDoubleSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::ZeroC.Ice.Test.SeqMapping.Custom<double> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<double> R2)> OpCDoubleSAsync(global::System.Collections.Generic.IEnumerable<double> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCDoubleSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<double>, (global::ZeroC.Ice.Test.SeqMapping.Custom<double> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<double> R2)>? _iceI_OpCDoubleSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<double>, (global::ZeroC.Ice.Test.SeqMapping.Custom<double> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<double> R2)> IceI_OpCDoubleSRequest =>
            _iceI_OpCDoubleSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<double>, (global::ZeroC.Ice.Test.SeqMapping.Custom<double> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<double> R2)>(
                operationName: "opCDoubleS",
                idempotent: false,
                compress: false,
                format: default,
                writer: CDoubleSHelper.IceWriter,
                reader: istr =>
                {
                    global::ZeroC.Ice.Test.SeqMapping.Custom<double> iceP_r1 = CDoubleSHelper.ReadCDoubleS(istr);
                    global::ZeroC.Ice.Test.SeqMapping.Custom<double> iceP_r2 = CDoubleSHelper.ReadCDoubleS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (string[] R1, string[] R2) OpAStringS(global::System.Collections.Generic.IEnumerable<string> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpAStringSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(string[] R1, string[] R2)> OpAStringSAsync(global::System.Collections.Generic.IEnumerable<string> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpAStringSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<string>, (string[] R1, string[] R2)>? _iceI_OpAStringSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<string>, (string[] R1, string[] R2)> IceI_OpAStringSRequest =>
            _iceI_OpAStringSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<string>, (string[] R1, string[] R2)>(
                operationName: "opAStringS",
                idempotent: false,
                compress: false,
                format: default,
                writer: AStringSHelper.IceWriter,
                reader: istr =>
                {
                    string[] iceP_r1 = AStringSHelper.ReadAStringS(istr);
                    string[] iceP_r2 = AStringSHelper.ReadAStringS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.List<string> R1, global::System.Collections.Generic.List<string> R2) OpLStringS(global::System.Collections.Generic.IEnumerable<string> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLStringSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.List<string> R1, global::System.Collections.Generic.List<string> R2)> OpLStringSAsync(global::System.Collections.Generic.IEnumerable<string> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLStringSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<string>, (global::System.Collections.Generic.List<string> R1, global::System.Collections.Generic.List<string> R2)>? _iceI_OpLStringSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<string>, (global::System.Collections.Generic.List<string> R1, global::System.Collections.Generic.List<string> R2)> IceI_OpLStringSRequest =>
            _iceI_OpLStringSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<string>, (global::System.Collections.Generic.List<string> R1, global::System.Collections.Generic.List<string> R2)>(
                operationName: "opLStringS",
                idempotent: false,
                compress: false,
                format: default,
                writer: LStringSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.List<string> iceP_r1 = LStringSHelper.ReadLStringS(istr);
                    global::System.Collections.Generic.List<string> iceP_r2 = LStringSHelper.ReadLStringS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.LinkedList<string> R1, global::System.Collections.Generic.List<string> R2) OpKStringS(global::System.Collections.Generic.IEnumerable<string> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKStringSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.LinkedList<string> R1, global::System.Collections.Generic.List<string> R2)> OpKStringSAsync(global::System.Collections.Generic.IEnumerable<string> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKStringSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<string>, (global::System.Collections.Generic.LinkedList<string> R1, global::System.Collections.Generic.List<string> R2)>? _iceI_OpKStringSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<string>, (global::System.Collections.Generic.LinkedList<string> R1, global::System.Collections.Generic.List<string> R2)> IceI_OpKStringSRequest =>
            _iceI_OpKStringSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<string>, (global::System.Collections.Generic.LinkedList<string> R1, global::System.Collections.Generic.List<string> R2)>(
                operationName: "opKStringS",
                idempotent: false,
                compress: false,
                format: default,
                writer: KStringSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.LinkedList<string> iceP_r1 = KStringSHelper.ReadKStringS(istr);
                    global::System.Collections.Generic.List<string> iceP_r2 = LStringSHelper.ReadLStringS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Queue<string> R1, global::System.Collections.Generic.Queue<string> R2) OpQStringS(global::System.Collections.Generic.IEnumerable<string> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQStringSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Queue<string> R1, global::System.Collections.Generic.Queue<string> R2)> OpQStringSAsync(global::System.Collections.Generic.IEnumerable<string> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQStringSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<string>, (global::System.Collections.Generic.Queue<string> R1, global::System.Collections.Generic.Queue<string> R2)>? _iceI_OpQStringSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<string>, (global::System.Collections.Generic.Queue<string> R1, global::System.Collections.Generic.Queue<string> R2)> IceI_OpQStringSRequest =>
            _iceI_OpQStringSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<string>, (global::System.Collections.Generic.Queue<string> R1, global::System.Collections.Generic.Queue<string> R2)>(
                operationName: "opQStringS",
                idempotent: false,
                compress: false,
                format: default,
                writer: QStringSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Queue<string> iceP_r1 = QStringSHelper.ReadQStringS(istr);
                    global::System.Collections.Generic.Queue<string> iceP_r2 = QStringSHelper.ReadQStringS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Stack<string> R1, global::System.Collections.Generic.Stack<string> R2) OpSStringS(global::System.Collections.Generic.IEnumerable<string> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSStringSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Stack<string> R1, global::System.Collections.Generic.Stack<string> R2)> OpSStringSAsync(global::System.Collections.Generic.IEnumerable<string> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSStringSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<string>, (global::System.Collections.Generic.Stack<string> R1, global::System.Collections.Generic.Stack<string> R2)>? _iceI_OpSStringSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<string>, (global::System.Collections.Generic.Stack<string> R1, global::System.Collections.Generic.Stack<string> R2)> IceI_OpSStringSRequest =>
            _iceI_OpSStringSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<string>, (global::System.Collections.Generic.Stack<string> R1, global::System.Collections.Generic.Stack<string> R2)>(
                operationName: "opSStringS",
                idempotent: false,
                compress: false,
                format: default,
                writer: SStringSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Stack<string> iceP_r1 = SStringSHelper.ReadSStringS(istr);
                    global::System.Collections.Generic.Stack<string> iceP_r2 = SStringSHelper.ReadSStringS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::ZeroC.Ice.Test.SeqMapping.Custom<string> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<string> R2) OpCStringS(global::System.Collections.Generic.IEnumerable<string> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCStringSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::ZeroC.Ice.Test.SeqMapping.Custom<string> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<string> R2)> OpCStringSAsync(global::System.Collections.Generic.IEnumerable<string> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCStringSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<string>, (global::ZeroC.Ice.Test.SeqMapping.Custom<string> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<string> R2)>? _iceI_OpCStringSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<string>, (global::ZeroC.Ice.Test.SeqMapping.Custom<string> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<string> R2)> IceI_OpCStringSRequest =>
            _iceI_OpCStringSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<string>, (global::ZeroC.Ice.Test.SeqMapping.Custom<string> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<string> R2)>(
                operationName: "opCStringS",
                idempotent: false,
                compress: false,
                format: default,
                writer: CStringSHelper.IceWriter,
                reader: istr =>
                {
                    global::ZeroC.Ice.Test.SeqMapping.Custom<string> iceP_r1 = CStringSHelper.ReadCStringS(istr);
                    global::ZeroC.Ice.Test.SeqMapping.Custom<string> iceP_r2 = CStringSHelper.ReadCStringS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::ZeroC.Ice.AnyClass?[] R1, global::ZeroC.Ice.AnyClass?[] R2) OpAObjectS(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpAObjectSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::ZeroC.Ice.AnyClass?[] R1, global::ZeroC.Ice.AnyClass?[] R2)> OpAObjectSAsync(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpAObjectSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?>, (global::ZeroC.Ice.AnyClass?[] R1, global::ZeroC.Ice.AnyClass?[] R2)>? _iceI_OpAObjectSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?>, (global::ZeroC.Ice.AnyClass?[] R1, global::ZeroC.Ice.AnyClass?[] R2)> IceI_OpAObjectSRequest =>
            _iceI_OpAObjectSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?>, (global::ZeroC.Ice.AnyClass?[] R1, global::ZeroC.Ice.AnyClass?[] R2)>(
                operationName: "opAObjectS",
                idempotent: false,
                compress: false,
                format: default,
                writer: AObjectSHelper.IceWriter,
                reader: istr =>
                {
                    global::ZeroC.Ice.AnyClass?[] iceP_r1 = AObjectSHelper.ReadAObjectS(istr);
                    global::ZeroC.Ice.AnyClass?[] iceP_r2 = AObjectSHelper.ReadAObjectS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.List<global::ZeroC.Ice.AnyClass?> R1, global::System.Collections.Generic.List<global::ZeroC.Ice.AnyClass?> R2) OpLObjectS(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLObjectSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.List<global::ZeroC.Ice.AnyClass?> R1, global::System.Collections.Generic.List<global::ZeroC.Ice.AnyClass?> R2)> OpLObjectSAsync(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLObjectSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?>, (global::System.Collections.Generic.List<global::ZeroC.Ice.AnyClass?> R1, global::System.Collections.Generic.List<global::ZeroC.Ice.AnyClass?> R2)>? _iceI_OpLObjectSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?>, (global::System.Collections.Generic.List<global::ZeroC.Ice.AnyClass?> R1, global::System.Collections.Generic.List<global::ZeroC.Ice.AnyClass?> R2)> IceI_OpLObjectSRequest =>
            _iceI_OpLObjectSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?>, (global::System.Collections.Generic.List<global::ZeroC.Ice.AnyClass?> R1, global::System.Collections.Generic.List<global::ZeroC.Ice.AnyClass?> R2)>(
                operationName: "opLObjectS",
                idempotent: false,
                compress: false,
                format: default,
                writer: LObjectSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.List<global::ZeroC.Ice.AnyClass?> iceP_r1 = LObjectSHelper.ReadLObjectS(istr);
                    global::System.Collections.Generic.List<global::ZeroC.Ice.AnyClass?> iceP_r2 = LObjectSHelper.ReadLObjectS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.AnyClass?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.AnyClass?> R2) OpCObjectS(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCObjectSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.AnyClass?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.AnyClass?> R2)> OpCObjectSAsync(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCObjectSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?>, (global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.AnyClass?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.AnyClass?> R2)>? _iceI_OpCObjectSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?>, (global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.AnyClass?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.AnyClass?> R2)> IceI_OpCObjectSRequest =>
            _iceI_OpCObjectSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?>, (global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.AnyClass?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.AnyClass?> R2)>(
                operationName: "opCObjectS",
                idempotent: false,
                compress: false,
                format: default,
                writer: CObjectSHelper.IceWriter,
                reader: istr =>
                {
                    global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.AnyClass?> iceP_r1 = CObjectSHelper.ReadCObjectS(istr);
                    global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.AnyClass?> iceP_r2 = CObjectSHelper.ReadCObjectS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::ZeroC.Ice.IObjectPrx?[] R1, global::ZeroC.Ice.IObjectPrx?[] R2) OpAObjectPrxS(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpAObjectPrxSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::ZeroC.Ice.IObjectPrx?[] R1, global::ZeroC.Ice.IObjectPrx?[] R2)> OpAObjectPrxSAsync(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpAObjectPrxSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>, (global::ZeroC.Ice.IObjectPrx?[] R1, global::ZeroC.Ice.IObjectPrx?[] R2)>? _iceI_OpAObjectPrxSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>, (global::ZeroC.Ice.IObjectPrx?[] R1, global::ZeroC.Ice.IObjectPrx?[] R2)> IceI_OpAObjectPrxSRequest =>
            _iceI_OpAObjectPrxSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>, (global::ZeroC.Ice.IObjectPrx?[] R1, global::ZeroC.Ice.IObjectPrx?[] R2)>(
                operationName: "opAObjectPrxS",
                idempotent: false,
                compress: false,
                format: default,
                writer: AObjectPrxSHelper.IceWriter,
                reader: istr =>
                {
                    global::ZeroC.Ice.IObjectPrx?[] iceP_r1 = AObjectPrxSHelper.ReadAObjectPrxS(istr);
                    global::ZeroC.Ice.IObjectPrx?[] iceP_r2 = AObjectPrxSHelper.ReadAObjectPrxS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.List<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.List<global::ZeroC.Ice.IObjectPrx?> R2) OpLObjectPrxS(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLObjectPrxSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.List<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.List<global::ZeroC.Ice.IObjectPrx?> R2)> OpLObjectPrxSAsync(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLObjectPrxSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>, (global::System.Collections.Generic.List<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.List<global::ZeroC.Ice.IObjectPrx?> R2)>? _iceI_OpLObjectPrxSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>, (global::System.Collections.Generic.List<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.List<global::ZeroC.Ice.IObjectPrx?> R2)> IceI_OpLObjectPrxSRequest =>
            _iceI_OpLObjectPrxSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>, (global::System.Collections.Generic.List<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.List<global::ZeroC.Ice.IObjectPrx?> R2)>(
                operationName: "opLObjectPrxS",
                idempotent: false,
                compress: false,
                format: default,
                writer: LObjectPrxSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.List<global::ZeroC.Ice.IObjectPrx?> iceP_r1 = LObjectPrxSHelper.ReadLObjectPrxS(istr);
                    global::System.Collections.Generic.List<global::ZeroC.Ice.IObjectPrx?> iceP_r2 = LObjectPrxSHelper.ReadLObjectPrxS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.LinkedList<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.LinkedList<global::ZeroC.Ice.IObjectPrx?> R2) OpKObjectPrxS(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKObjectPrxSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.LinkedList<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.LinkedList<global::ZeroC.Ice.IObjectPrx?> R2)> OpKObjectPrxSAsync(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKObjectPrxSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>, (global::System.Collections.Generic.LinkedList<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.LinkedList<global::ZeroC.Ice.IObjectPrx?> R2)>? _iceI_OpKObjectPrxSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>, (global::System.Collections.Generic.LinkedList<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.LinkedList<global::ZeroC.Ice.IObjectPrx?> R2)> IceI_OpKObjectPrxSRequest =>
            _iceI_OpKObjectPrxSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>, (global::System.Collections.Generic.LinkedList<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.LinkedList<global::ZeroC.Ice.IObjectPrx?> R2)>(
                operationName: "opKObjectPrxS",
                idempotent: false,
                compress: false,
                format: default,
                writer: KObjectPrxSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.LinkedList<global::ZeroC.Ice.IObjectPrx?> iceP_r1 = KObjectPrxSHelper.ReadKObjectPrxS(istr);
                    global::System.Collections.Generic.LinkedList<global::ZeroC.Ice.IObjectPrx?> iceP_r2 = KObjectPrxSHelper.ReadKObjectPrxS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Queue<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.Queue<global::ZeroC.Ice.IObjectPrx?> R2) OpQObjectPrxS(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQObjectPrxSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Queue<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.Queue<global::ZeroC.Ice.IObjectPrx?> R2)> OpQObjectPrxSAsync(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQObjectPrxSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>, (global::System.Collections.Generic.Queue<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.Queue<global::ZeroC.Ice.IObjectPrx?> R2)>? _iceI_OpQObjectPrxSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>, (global::System.Collections.Generic.Queue<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.Queue<global::ZeroC.Ice.IObjectPrx?> R2)> IceI_OpQObjectPrxSRequest =>
            _iceI_OpQObjectPrxSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>, (global::System.Collections.Generic.Queue<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.Queue<global::ZeroC.Ice.IObjectPrx?> R2)>(
                operationName: "opQObjectPrxS",
                idempotent: false,
                compress: false,
                format: default,
                writer: QObjectPrxSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Queue<global::ZeroC.Ice.IObjectPrx?> iceP_r1 = QObjectPrxSHelper.ReadQObjectPrxS(istr);
                    global::System.Collections.Generic.Queue<global::ZeroC.Ice.IObjectPrx?> iceP_r2 = QObjectPrxSHelper.ReadQObjectPrxS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Stack<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.Stack<global::ZeroC.Ice.IObjectPrx?> R2) OpSObjectPrxS(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSObjectPrxSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Stack<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.Stack<global::ZeroC.Ice.IObjectPrx?> R2)> OpSObjectPrxSAsync(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSObjectPrxSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>, (global::System.Collections.Generic.Stack<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.Stack<global::ZeroC.Ice.IObjectPrx?> R2)>? _iceI_OpSObjectPrxSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>, (global::System.Collections.Generic.Stack<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.Stack<global::ZeroC.Ice.IObjectPrx?> R2)> IceI_OpSObjectPrxSRequest =>
            _iceI_OpSObjectPrxSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>, (global::System.Collections.Generic.Stack<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.Stack<global::ZeroC.Ice.IObjectPrx?> R2)>(
                operationName: "opSObjectPrxS",
                idempotent: false,
                compress: false,
                format: default,
                writer: SObjectPrxSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Stack<global::ZeroC.Ice.IObjectPrx?> iceP_r1 = SObjectPrxSHelper.ReadSObjectPrxS(istr);
                    global::System.Collections.Generic.Stack<global::ZeroC.Ice.IObjectPrx?> iceP_r2 = SObjectPrxSHelper.ReadSObjectPrxS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.IObjectPrx?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.IObjectPrx?> R2) OpCObjectPrxS(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCObjectPrxSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.IObjectPrx?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.IObjectPrx?> R2)> OpCObjectPrxSAsync(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCObjectPrxSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>, (global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.IObjectPrx?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.IObjectPrx?> R2)>? _iceI_OpCObjectPrxSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>, (global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.IObjectPrx?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.IObjectPrx?> R2)> IceI_OpCObjectPrxSRequest =>
            _iceI_OpCObjectPrxSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?>, (global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.IObjectPrx?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.IObjectPrx?> R2)>(
                operationName: "opCObjectPrxS",
                idempotent: false,
                compress: false,
                format: default,
                writer: CObjectPrxSHelper.IceWriter,
                reader: istr =>
                {
                    global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.IObjectPrx?> iceP_r1 = CObjectPrxSHelper.ReadCObjectPrxS(istr);
                    global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.IObjectPrx?> iceP_r2 = CObjectPrxSHelper.ReadCObjectPrxS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (S[] R1, S[] R2) OpAStructS(global::System.Collections.Generic.IEnumerable<S> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpAStructSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(S[] R1, S[] R2)> OpAStructSAsync(global::System.Collections.Generic.IEnumerable<S> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpAStructSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<S>, (S[] R1, S[] R2)>? _iceI_OpAStructSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<S>, (S[] R1, S[] R2)> IceI_OpAStructSRequest =>
            _iceI_OpAStructSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<S>, (S[] R1, S[] R2)>(
                operationName: "opAStructS",
                idempotent: false,
                compress: false,
                format: default,
                writer: AStructSHelper.IceWriter,
                reader: istr =>
                {
                    S[] iceP_r1 = AStructSHelper.ReadAStructS(istr);
                    S[] iceP_r2 = AStructSHelper.ReadAStructS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.List<S> R1, global::System.Collections.Generic.List<S> R2) OpLStructS(global::System.Collections.Generic.IEnumerable<S> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLStructSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.List<S> R1, global::System.Collections.Generic.List<S> R2)> OpLStructSAsync(global::System.Collections.Generic.IEnumerable<S> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLStructSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<S>, (global::System.Collections.Generic.List<S> R1, global::System.Collections.Generic.List<S> R2)>? _iceI_OpLStructSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<S>, (global::System.Collections.Generic.List<S> R1, global::System.Collections.Generic.List<S> R2)> IceI_OpLStructSRequest =>
            _iceI_OpLStructSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<S>, (global::System.Collections.Generic.List<S> R1, global::System.Collections.Generic.List<S> R2)>(
                operationName: "opLStructS",
                idempotent: false,
                compress: false,
                format: default,
                writer: LStructSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.List<S> iceP_r1 = LStructSHelper.ReadLStructS(istr);
                    global::System.Collections.Generic.List<S> iceP_r2 = LStructSHelper.ReadLStructS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.LinkedList<S> R1, global::System.Collections.Generic.LinkedList<S> R2) OpKStructS(global::System.Collections.Generic.IEnumerable<S> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKStructSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.LinkedList<S> R1, global::System.Collections.Generic.LinkedList<S> R2)> OpKStructSAsync(global::System.Collections.Generic.IEnumerable<S> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKStructSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<S>, (global::System.Collections.Generic.LinkedList<S> R1, global::System.Collections.Generic.LinkedList<S> R2)>? _iceI_OpKStructSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<S>, (global::System.Collections.Generic.LinkedList<S> R1, global::System.Collections.Generic.LinkedList<S> R2)> IceI_OpKStructSRequest =>
            _iceI_OpKStructSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<S>, (global::System.Collections.Generic.LinkedList<S> R1, global::System.Collections.Generic.LinkedList<S> R2)>(
                operationName: "opKStructS",
                idempotent: false,
                compress: false,
                format: default,
                writer: KStructSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.LinkedList<S> iceP_r1 = KStructSHelper.ReadKStructS(istr);
                    global::System.Collections.Generic.LinkedList<S> iceP_r2 = KStructSHelper.ReadKStructS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Queue<S> R1, global::System.Collections.Generic.Queue<S> R2) OpQStructS(global::System.Collections.Generic.IEnumerable<S> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQStructSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Queue<S> R1, global::System.Collections.Generic.Queue<S> R2)> OpQStructSAsync(global::System.Collections.Generic.IEnumerable<S> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQStructSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<S>, (global::System.Collections.Generic.Queue<S> R1, global::System.Collections.Generic.Queue<S> R2)>? _iceI_OpQStructSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<S>, (global::System.Collections.Generic.Queue<S> R1, global::System.Collections.Generic.Queue<S> R2)> IceI_OpQStructSRequest =>
            _iceI_OpQStructSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<S>, (global::System.Collections.Generic.Queue<S> R1, global::System.Collections.Generic.Queue<S> R2)>(
                operationName: "opQStructS",
                idempotent: false,
                compress: false,
                format: default,
                writer: QStructSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Queue<S> iceP_r1 = QStructSHelper.ReadQStructS(istr);
                    global::System.Collections.Generic.Queue<S> iceP_r2 = QStructSHelper.ReadQStructS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Stack<S> R1, global::System.Collections.Generic.Stack<S> R2) OpSStructS(global::System.Collections.Generic.IEnumerable<S> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSStructSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Stack<S> R1, global::System.Collections.Generic.Stack<S> R2)> OpSStructSAsync(global::System.Collections.Generic.IEnumerable<S> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSStructSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<S>, (global::System.Collections.Generic.Stack<S> R1, global::System.Collections.Generic.Stack<S> R2)>? _iceI_OpSStructSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<S>, (global::System.Collections.Generic.Stack<S> R1, global::System.Collections.Generic.Stack<S> R2)> IceI_OpSStructSRequest =>
            _iceI_OpSStructSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<S>, (global::System.Collections.Generic.Stack<S> R1, global::System.Collections.Generic.Stack<S> R2)>(
                operationName: "opSStructS",
                idempotent: false,
                compress: false,
                format: default,
                writer: SStructSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Stack<S> iceP_r1 = SStructSHelper.ReadSStructS(istr);
                    global::System.Collections.Generic.Stack<S> iceP_r2 = SStructSHelper.ReadSStructS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::ZeroC.Ice.Test.SeqMapping.Custom<S> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<S> R2) OpCStructS(global::System.Collections.Generic.IEnumerable<S> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCStructSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::ZeroC.Ice.Test.SeqMapping.Custom<S> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<S> R2)> OpCStructSAsync(global::System.Collections.Generic.IEnumerable<S> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCStructSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<S>, (global::ZeroC.Ice.Test.SeqMapping.Custom<S> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<S> R2)>? _iceI_OpCStructSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<S>, (global::ZeroC.Ice.Test.SeqMapping.Custom<S> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<S> R2)> IceI_OpCStructSRequest =>
            _iceI_OpCStructSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<S>, (global::ZeroC.Ice.Test.SeqMapping.Custom<S> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<S> R2)>(
                operationName: "opCStructS",
                idempotent: false,
                compress: false,
                format: default,
                writer: CStructSHelper.IceWriter,
                reader: istr =>
                {
                    global::ZeroC.Ice.Test.SeqMapping.Custom<S> iceP_r1 = CStructSHelper.ReadCStructS(istr);
                    global::ZeroC.Ice.Test.SeqMapping.Custom<S> iceP_r2 = CStructSHelper.ReadCStructS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (SD[] R1, SD[] R2) OpAStructSD(global::System.Collections.Generic.IEnumerable<SD> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpAStructSDRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(SD[] R1, SD[] R2)> OpAStructSDAsync(global::System.Collections.Generic.IEnumerable<SD> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpAStructSDRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<SD>, (SD[] R1, SD[] R2)>? _iceI_OpAStructSDRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<SD>, (SD[] R1, SD[] R2)> IceI_OpAStructSDRequest =>
            _iceI_OpAStructSDRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<SD>, (SD[] R1, SD[] R2)>(
                operationName: "opAStructSD",
                idempotent: false,
                compress: false,
                format: default,
                writer: AStructSDHelper.IceWriter,
                reader: istr =>
                {
                    SD[] iceP_r1 = AStructSDHelper.ReadAStructSD(istr);
                    SD[] iceP_r2 = AStructSDHelper.ReadAStructSD(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.List<SD> R1, global::System.Collections.Generic.List<SD> R2) OpLStructSD(global::System.Collections.Generic.IEnumerable<SD> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLStructSDRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.List<SD> R1, global::System.Collections.Generic.List<SD> R2)> OpLStructSDAsync(global::System.Collections.Generic.IEnumerable<SD> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLStructSDRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<SD>, (global::System.Collections.Generic.List<SD> R1, global::System.Collections.Generic.List<SD> R2)>? _iceI_OpLStructSDRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<SD>, (global::System.Collections.Generic.List<SD> R1, global::System.Collections.Generic.List<SD> R2)> IceI_OpLStructSDRequest =>
            _iceI_OpLStructSDRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<SD>, (global::System.Collections.Generic.List<SD> R1, global::System.Collections.Generic.List<SD> R2)>(
                operationName: "opLStructSD",
                idempotent: false,
                compress: false,
                format: default,
                writer: LStructSDHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.List<SD> iceP_r1 = LStructSDHelper.ReadLStructSD(istr);
                    global::System.Collections.Generic.List<SD> iceP_r2 = LStructSDHelper.ReadLStructSD(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.LinkedList<SD> R1, global::System.Collections.Generic.LinkedList<SD> R2) OpKStructSD(global::System.Collections.Generic.IEnumerable<SD> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKStructSDRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.LinkedList<SD> R1, global::System.Collections.Generic.LinkedList<SD> R2)> OpKStructSDAsync(global::System.Collections.Generic.IEnumerable<SD> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKStructSDRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<SD>, (global::System.Collections.Generic.LinkedList<SD> R1, global::System.Collections.Generic.LinkedList<SD> R2)>? _iceI_OpKStructSDRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<SD>, (global::System.Collections.Generic.LinkedList<SD> R1, global::System.Collections.Generic.LinkedList<SD> R2)> IceI_OpKStructSDRequest =>
            _iceI_OpKStructSDRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<SD>, (global::System.Collections.Generic.LinkedList<SD> R1, global::System.Collections.Generic.LinkedList<SD> R2)>(
                operationName: "opKStructSD",
                idempotent: false,
                compress: false,
                format: default,
                writer: KStructSDHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.LinkedList<SD> iceP_r1 = KStructSDHelper.ReadKStructSD(istr);
                    global::System.Collections.Generic.LinkedList<SD> iceP_r2 = KStructSDHelper.ReadKStructSD(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Queue<SD> R1, global::System.Collections.Generic.Queue<SD> R2) OpQStructSD(global::System.Collections.Generic.IEnumerable<SD> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQStructSDRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Queue<SD> R1, global::System.Collections.Generic.Queue<SD> R2)> OpQStructSDAsync(global::System.Collections.Generic.IEnumerable<SD> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQStructSDRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<SD>, (global::System.Collections.Generic.Queue<SD> R1, global::System.Collections.Generic.Queue<SD> R2)>? _iceI_OpQStructSDRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<SD>, (global::System.Collections.Generic.Queue<SD> R1, global::System.Collections.Generic.Queue<SD> R2)> IceI_OpQStructSDRequest =>
            _iceI_OpQStructSDRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<SD>, (global::System.Collections.Generic.Queue<SD> R1, global::System.Collections.Generic.Queue<SD> R2)>(
                operationName: "opQStructSD",
                idempotent: false,
                compress: false,
                format: default,
                writer: QStructSDHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Queue<SD> iceP_r1 = QStructSDHelper.ReadQStructSD(istr);
                    global::System.Collections.Generic.Queue<SD> iceP_r2 = QStructSDHelper.ReadQStructSD(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Stack<SD> R1, global::System.Collections.Generic.Stack<SD> R2) OpSStructSD(global::System.Collections.Generic.IEnumerable<SD> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSStructSDRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Stack<SD> R1, global::System.Collections.Generic.Stack<SD> R2)> OpSStructSDAsync(global::System.Collections.Generic.IEnumerable<SD> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSStructSDRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<SD>, (global::System.Collections.Generic.Stack<SD> R1, global::System.Collections.Generic.Stack<SD> R2)>? _iceI_OpSStructSDRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<SD>, (global::System.Collections.Generic.Stack<SD> R1, global::System.Collections.Generic.Stack<SD> R2)> IceI_OpSStructSDRequest =>
            _iceI_OpSStructSDRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<SD>, (global::System.Collections.Generic.Stack<SD> R1, global::System.Collections.Generic.Stack<SD> R2)>(
                operationName: "opSStructSD",
                idempotent: false,
                compress: false,
                format: default,
                writer: SStructSDHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Stack<SD> iceP_r1 = SStructSDHelper.ReadSStructSD(istr);
                    global::System.Collections.Generic.Stack<SD> iceP_r2 = SStructSDHelper.ReadSStructSD(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::ZeroC.Ice.Test.SeqMapping.Custom<SD> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<SD> R2) OpCStructSD(global::System.Collections.Generic.IEnumerable<SD> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCStructSDRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::ZeroC.Ice.Test.SeqMapping.Custom<SD> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<SD> R2)> OpCStructSDAsync(global::System.Collections.Generic.IEnumerable<SD> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCStructSDRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<SD>, (global::ZeroC.Ice.Test.SeqMapping.Custom<SD> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<SD> R2)>? _iceI_OpCStructSDRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<SD>, (global::ZeroC.Ice.Test.SeqMapping.Custom<SD> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<SD> R2)> IceI_OpCStructSDRequest =>
            _iceI_OpCStructSDRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<SD>, (global::ZeroC.Ice.Test.SeqMapping.Custom<SD> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<SD> R2)>(
                operationName: "opCStructSD",
                idempotent: false,
                compress: false,
                format: default,
                writer: CStructSDHelper.IceWriter,
                reader: istr =>
                {
                    global::ZeroC.Ice.Test.SeqMapping.Custom<SD> iceP_r1 = CStructSDHelper.ReadCStructSD(istr);
                    global::ZeroC.Ice.Test.SeqMapping.Custom<SD> iceP_r2 = CStructSDHelper.ReadCStructSD(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (CV?[] R1, CV?[] R2) OpACVS(global::System.Collections.Generic.IEnumerable<CV?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpACVSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(CV?[] R1, CV?[] R2)> OpACVSAsync(global::System.Collections.Generic.IEnumerable<CV?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpACVSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<CV?>, (CV?[] R1, CV?[] R2)>? _iceI_OpACVSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<CV?>, (CV?[] R1, CV?[] R2)> IceI_OpACVSRequest =>
            _iceI_OpACVSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<CV?>, (CV?[] R1, CV?[] R2)>(
                operationName: "opACVS",
                idempotent: false,
                compress: false,
                format: default,
                writer: ACVSHelper.IceWriter,
                reader: istr =>
                {
                    CV?[] iceP_r1 = ACVSHelper.ReadACVS(istr);
                    CV?[] iceP_r2 = ACVSHelper.ReadACVS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.List<CV?> R1, global::System.Collections.Generic.List<CV?> R2) OpLCVS(global::System.Collections.Generic.IEnumerable<CV?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLCVSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.List<CV?> R1, global::System.Collections.Generic.List<CV?> R2)> OpLCVSAsync(global::System.Collections.Generic.IEnumerable<CV?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLCVSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<CV?>, (global::System.Collections.Generic.List<CV?> R1, global::System.Collections.Generic.List<CV?> R2)>? _iceI_OpLCVSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<CV?>, (global::System.Collections.Generic.List<CV?> R1, global::System.Collections.Generic.List<CV?> R2)> IceI_OpLCVSRequest =>
            _iceI_OpLCVSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<CV?>, (global::System.Collections.Generic.List<CV?> R1, global::System.Collections.Generic.List<CV?> R2)>(
                operationName: "opLCVS",
                idempotent: false,
                compress: false,
                format: default,
                writer: LCVSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.List<CV?> iceP_r1 = LCVSHelper.ReadLCVS(istr);
                    global::System.Collections.Generic.List<CV?> iceP_r2 = LCVSHelper.ReadLCVS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (IIPrx?[] R1, IIPrx?[] R2) OpAIPrxS(global::System.Collections.Generic.IEnumerable<IIPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpAIPrxSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(IIPrx?[] R1, IIPrx?[] R2)> OpAIPrxSAsync(global::System.Collections.Generic.IEnumerable<IIPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpAIPrxSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<IIPrx?>, (IIPrx?[] R1, IIPrx?[] R2)>? _iceI_OpAIPrxSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<IIPrx?>, (IIPrx?[] R1, IIPrx?[] R2)> IceI_OpAIPrxSRequest =>
            _iceI_OpAIPrxSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<IIPrx?>, (IIPrx?[] R1, IIPrx?[] R2)>(
                operationName: "opAIPrxS",
                idempotent: false,
                compress: false,
                format: default,
                writer: AIPrxSHelper.IceWriter,
                reader: istr =>
                {
                    IIPrx?[] iceP_r1 = AIPrxSHelper.ReadAIPrxS(istr);
                    IIPrx?[] iceP_r2 = AIPrxSHelper.ReadAIPrxS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.List<IIPrx?> R1, global::System.Collections.Generic.List<IIPrx?> R2) OpLIPrxS(global::System.Collections.Generic.IEnumerable<IIPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLIPrxSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.List<IIPrx?> R1, global::System.Collections.Generic.List<IIPrx?> R2)> OpLIPrxSAsync(global::System.Collections.Generic.IEnumerable<IIPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLIPrxSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<IIPrx?>, (global::System.Collections.Generic.List<IIPrx?> R1, global::System.Collections.Generic.List<IIPrx?> R2)>? _iceI_OpLIPrxSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<IIPrx?>, (global::System.Collections.Generic.List<IIPrx?> R1, global::System.Collections.Generic.List<IIPrx?> R2)> IceI_OpLIPrxSRequest =>
            _iceI_OpLIPrxSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<IIPrx?>, (global::System.Collections.Generic.List<IIPrx?> R1, global::System.Collections.Generic.List<IIPrx?> R2)>(
                operationName: "opLIPrxS",
                idempotent: false,
                compress: false,
                format: default,
                writer: LIPrxSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.List<IIPrx?> iceP_r1 = LIPrxSHelper.ReadLIPrxS(istr);
                    global::System.Collections.Generic.List<IIPrx?> iceP_r2 = LIPrxSHelper.ReadLIPrxS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.LinkedList<IIPrx?> R1, global::System.Collections.Generic.LinkedList<IIPrx?> R2) OpKIPrxS(global::System.Collections.Generic.IEnumerable<IIPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKIPrxSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.LinkedList<IIPrx?> R1, global::System.Collections.Generic.LinkedList<IIPrx?> R2)> OpKIPrxSAsync(global::System.Collections.Generic.IEnumerable<IIPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKIPrxSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<IIPrx?>, (global::System.Collections.Generic.LinkedList<IIPrx?> R1, global::System.Collections.Generic.LinkedList<IIPrx?> R2)>? _iceI_OpKIPrxSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<IIPrx?>, (global::System.Collections.Generic.LinkedList<IIPrx?> R1, global::System.Collections.Generic.LinkedList<IIPrx?> R2)> IceI_OpKIPrxSRequest =>
            _iceI_OpKIPrxSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<IIPrx?>, (global::System.Collections.Generic.LinkedList<IIPrx?> R1, global::System.Collections.Generic.LinkedList<IIPrx?> R2)>(
                operationName: "opKIPrxS",
                idempotent: false,
                compress: false,
                format: default,
                writer: KIPrxSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.LinkedList<IIPrx?> iceP_r1 = KIPrxSHelper.ReadKIPrxS(istr);
                    global::System.Collections.Generic.LinkedList<IIPrx?> iceP_r2 = KIPrxSHelper.ReadKIPrxS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Queue<IIPrx?> R1, global::System.Collections.Generic.Queue<IIPrx?> R2) OpQIPrxS(global::System.Collections.Generic.IEnumerable<IIPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQIPrxSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Queue<IIPrx?> R1, global::System.Collections.Generic.Queue<IIPrx?> R2)> OpQIPrxSAsync(global::System.Collections.Generic.IEnumerable<IIPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQIPrxSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<IIPrx?>, (global::System.Collections.Generic.Queue<IIPrx?> R1, global::System.Collections.Generic.Queue<IIPrx?> R2)>? _iceI_OpQIPrxSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<IIPrx?>, (global::System.Collections.Generic.Queue<IIPrx?> R1, global::System.Collections.Generic.Queue<IIPrx?> R2)> IceI_OpQIPrxSRequest =>
            _iceI_OpQIPrxSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<IIPrx?>, (global::System.Collections.Generic.Queue<IIPrx?> R1, global::System.Collections.Generic.Queue<IIPrx?> R2)>(
                operationName: "opQIPrxS",
                idempotent: false,
                compress: false,
                format: default,
                writer: QIPrxSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Queue<IIPrx?> iceP_r1 = QIPrxSHelper.ReadQIPrxS(istr);
                    global::System.Collections.Generic.Queue<IIPrx?> iceP_r2 = QIPrxSHelper.ReadQIPrxS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Stack<IIPrx?> R1, global::System.Collections.Generic.Stack<IIPrx?> R2) OpSIPrxS(global::System.Collections.Generic.IEnumerable<IIPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSIPrxSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Stack<IIPrx?> R1, global::System.Collections.Generic.Stack<IIPrx?> R2)> OpSIPrxSAsync(global::System.Collections.Generic.IEnumerable<IIPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSIPrxSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<IIPrx?>, (global::System.Collections.Generic.Stack<IIPrx?> R1, global::System.Collections.Generic.Stack<IIPrx?> R2)>? _iceI_OpSIPrxSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<IIPrx?>, (global::System.Collections.Generic.Stack<IIPrx?> R1, global::System.Collections.Generic.Stack<IIPrx?> R2)> IceI_OpSIPrxSRequest =>
            _iceI_OpSIPrxSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<IIPrx?>, (global::System.Collections.Generic.Stack<IIPrx?> R1, global::System.Collections.Generic.Stack<IIPrx?> R2)>(
                operationName: "opSIPrxS",
                idempotent: false,
                compress: false,
                format: default,
                writer: SIPrxSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Stack<IIPrx?> iceP_r1 = SIPrxSHelper.ReadSIPrxS(istr);
                    global::System.Collections.Generic.Stack<IIPrx?> iceP_r2 = SIPrxSHelper.ReadSIPrxS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::ZeroC.Ice.Test.SeqMapping.Custom<IIPrx?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<IIPrx?> R2) OpCIPrxS(global::System.Collections.Generic.IEnumerable<IIPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCIPrxSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::ZeroC.Ice.Test.SeqMapping.Custom<IIPrx?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<IIPrx?> R2)> OpCIPrxSAsync(global::System.Collections.Generic.IEnumerable<IIPrx?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCIPrxSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<IIPrx?>, (global::ZeroC.Ice.Test.SeqMapping.Custom<IIPrx?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<IIPrx?> R2)>? _iceI_OpCIPrxSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<IIPrx?>, (global::ZeroC.Ice.Test.SeqMapping.Custom<IIPrx?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<IIPrx?> R2)> IceI_OpCIPrxSRequest =>
            _iceI_OpCIPrxSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<IIPrx?>, (global::ZeroC.Ice.Test.SeqMapping.Custom<IIPrx?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<IIPrx?> R2)>(
                operationName: "opCIPrxS",
                idempotent: false,
                compress: false,
                format: default,
                writer: CIPrxSHelper.IceWriter,
                reader: istr =>
                {
                    global::ZeroC.Ice.Test.SeqMapping.Custom<IIPrx?> iceP_r1 = CIPrxSHelper.ReadCIPrxS(istr);
                    global::ZeroC.Ice.Test.SeqMapping.Custom<IIPrx?> iceP_r2 = CIPrxSHelper.ReadCIPrxS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::ZeroC.Ice.Test.SeqMapping.Custom<CR?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<CR?> R2) OpCCRS(global::System.Collections.Generic.IEnumerable<CR?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCCRSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::ZeroC.Ice.Test.SeqMapping.Custom<CR?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<CR?> R2)> OpCCRSAsync(global::System.Collections.Generic.IEnumerable<CR?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCCRSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<CR?>, (global::ZeroC.Ice.Test.SeqMapping.Custom<CR?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<CR?> R2)>? _iceI_OpCCRSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<CR?>, (global::ZeroC.Ice.Test.SeqMapping.Custom<CR?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<CR?> R2)> IceI_OpCCRSRequest =>
            _iceI_OpCCRSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<CR?>, (global::ZeroC.Ice.Test.SeqMapping.Custom<CR?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<CR?> R2)>(
                operationName: "opCCRS",
                idempotent: false,
                compress: false,
                format: default,
                writer: CCRSHelper.IceWriter,
                reader: istr =>
                {
                    global::ZeroC.Ice.Test.SeqMapping.Custom<CR?> iceP_r1 = CCRSHelper.ReadCCRS(istr);
                    global::ZeroC.Ice.Test.SeqMapping.Custom<CR?> iceP_r2 = CCRSHelper.ReadCCRS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (En[] R1, En[] R2) OpAEnS(global::System.Collections.Generic.IEnumerable<En> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpAEnSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(En[] R1, En[] R2)> OpAEnSAsync(global::System.Collections.Generic.IEnumerable<En> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpAEnSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<En>, (En[] R1, En[] R2)>? _iceI_OpAEnSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<En>, (En[] R1, En[] R2)> IceI_OpAEnSRequest =>
            _iceI_OpAEnSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<En>, (En[] R1, En[] R2)>(
                operationName: "opAEnS",
                idempotent: false,
                compress: false,
                format: default,
                writer: AEnSHelper.IceWriter,
                reader: istr =>
                {
                    En[] iceP_r1 = AEnSHelper.ReadAEnS(istr);
                    En[] iceP_r2 = AEnSHelper.ReadAEnS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.List<En> R1, global::System.Collections.Generic.List<En> R2) OpLEnS(global::System.Collections.Generic.IEnumerable<En> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLEnSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.List<En> R1, global::System.Collections.Generic.List<En> R2)> OpLEnSAsync(global::System.Collections.Generic.IEnumerable<En> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpLEnSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<En>, (global::System.Collections.Generic.List<En> R1, global::System.Collections.Generic.List<En> R2)>? _iceI_OpLEnSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<En>, (global::System.Collections.Generic.List<En> R1, global::System.Collections.Generic.List<En> R2)> IceI_OpLEnSRequest =>
            _iceI_OpLEnSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<En>, (global::System.Collections.Generic.List<En> R1, global::System.Collections.Generic.List<En> R2)>(
                operationName: "opLEnS",
                idempotent: false,
                compress: false,
                format: default,
                writer: LEnSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.List<En> iceP_r1 = LEnSHelper.ReadLEnS(istr);
                    global::System.Collections.Generic.List<En> iceP_r2 = LEnSHelper.ReadLEnS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.LinkedList<En> R1, global::System.Collections.Generic.LinkedList<En> R2) OpKEnS(global::System.Collections.Generic.IEnumerable<En> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKEnSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.LinkedList<En> R1, global::System.Collections.Generic.LinkedList<En> R2)> OpKEnSAsync(global::System.Collections.Generic.IEnumerable<En> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpKEnSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<En>, (global::System.Collections.Generic.LinkedList<En> R1, global::System.Collections.Generic.LinkedList<En> R2)>? _iceI_OpKEnSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<En>, (global::System.Collections.Generic.LinkedList<En> R1, global::System.Collections.Generic.LinkedList<En> R2)> IceI_OpKEnSRequest =>
            _iceI_OpKEnSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<En>, (global::System.Collections.Generic.LinkedList<En> R1, global::System.Collections.Generic.LinkedList<En> R2)>(
                operationName: "opKEnS",
                idempotent: false,
                compress: false,
                format: default,
                writer: KEnSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.LinkedList<En> iceP_r1 = KEnSHelper.ReadKEnS(istr);
                    global::System.Collections.Generic.LinkedList<En> iceP_r2 = KEnSHelper.ReadKEnS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Queue<En> R1, global::System.Collections.Generic.Queue<En> R2) OpQEnS(global::System.Collections.Generic.IEnumerable<En> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQEnSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Queue<En> R1, global::System.Collections.Generic.Queue<En> R2)> OpQEnSAsync(global::System.Collections.Generic.IEnumerable<En> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpQEnSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<En>, (global::System.Collections.Generic.Queue<En> R1, global::System.Collections.Generic.Queue<En> R2)>? _iceI_OpQEnSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<En>, (global::System.Collections.Generic.Queue<En> R1, global::System.Collections.Generic.Queue<En> R2)> IceI_OpQEnSRequest =>
            _iceI_OpQEnSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<En>, (global::System.Collections.Generic.Queue<En> R1, global::System.Collections.Generic.Queue<En> R2)>(
                operationName: "opQEnS",
                idempotent: false,
                compress: false,
                format: default,
                writer: QEnSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Queue<En> iceP_r1 = QEnSHelper.ReadQEnS(istr);
                    global::System.Collections.Generic.Queue<En> iceP_r2 = QEnSHelper.ReadQEnS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::System.Collections.Generic.Stack<En> R1, global::System.Collections.Generic.Stack<En> R2) OpSEnS(global::System.Collections.Generic.IEnumerable<En> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSEnSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::System.Collections.Generic.Stack<En> R1, global::System.Collections.Generic.Stack<En> R2)> OpSEnSAsync(global::System.Collections.Generic.IEnumerable<En> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpSEnSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<En>, (global::System.Collections.Generic.Stack<En> R1, global::System.Collections.Generic.Stack<En> R2)>? _iceI_OpSEnSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<En>, (global::System.Collections.Generic.Stack<En> R1, global::System.Collections.Generic.Stack<En> R2)> IceI_OpSEnSRequest =>
            _iceI_OpSEnSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<En>, (global::System.Collections.Generic.Stack<En> R1, global::System.Collections.Generic.Stack<En> R2)>(
                operationName: "opSEnS",
                idempotent: false,
                compress: false,
                format: default,
                writer: SEnSHelper.IceWriter,
                reader: istr =>
                {
                    global::System.Collections.Generic.Stack<En> iceP_r1 = SEnSHelper.ReadSEnS(istr);
                    global::System.Collections.Generic.Stack<En> iceP_r2 = SEnSHelper.ReadSEnS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::ZeroC.Ice.Test.SeqMapping.Custom<En> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<En> R2) OpCEnS(global::System.Collections.Generic.IEnumerable<En> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCEnSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::ZeroC.Ice.Test.SeqMapping.Custom<En> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<En> R2)> OpCEnSAsync(global::System.Collections.Generic.IEnumerable<En> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCEnSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<En>, (global::ZeroC.Ice.Test.SeqMapping.Custom<En> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<En> R2)>? _iceI_OpCEnSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<En>, (global::ZeroC.Ice.Test.SeqMapping.Custom<En> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<En> R2)> IceI_OpCEnSRequest =>
            _iceI_OpCEnSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<En>, (global::ZeroC.Ice.Test.SeqMapping.Custom<En> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<En> R2)>(
                operationName: "opCEnS",
                idempotent: false,
                compress: false,
                format: default,
                writer: CEnSHelper.IceWriter,
                reader: istr =>
                {
                    global::ZeroC.Ice.Test.SeqMapping.Custom<En> iceP_r1 = CEnSHelper.ReadCEnS(istr);
                    global::ZeroC.Ice.Test.SeqMapping.Custom<En> iceP_r2 = CEnSHelper.ReadCEnS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::ZeroC.Ice.Test.SeqMapping.Custom<int> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<int> R2) OpCustomIntS(global::System.Collections.Generic.IEnumerable<int> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCustomIntSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::ZeroC.Ice.Test.SeqMapping.Custom<int> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<int> R2)> OpCustomIntSAsync(global::System.Collections.Generic.IEnumerable<int> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCustomIntSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<int>, (global::ZeroC.Ice.Test.SeqMapping.Custom<int> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<int> R2)>? _iceI_OpCustomIntSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<int>, (global::ZeroC.Ice.Test.SeqMapping.Custom<int> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<int> R2)> IceI_OpCustomIntSRequest =>
            _iceI_OpCustomIntSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<int>, (global::ZeroC.Ice.Test.SeqMapping.Custom<int> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<int> R2)>(
                operationName: "opCustomIntS",
                idempotent: false,
                compress: false,
                format: default,
                writer: CustomIntSHelper.IceWriter,
                reader: istr =>
                {
                    global::ZeroC.Ice.Test.SeqMapping.Custom<int> iceP_r1 = CustomIntSHelper.ReadCustomIntS(istr);
                    global::ZeroC.Ice.Test.SeqMapping.Custom<int> iceP_r2 = CustomIntSHelper.ReadCustomIntS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::ZeroC.Ice.Test.SeqMapping.Custom<CV?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<CV?> R2) OpCustomCVS(global::System.Collections.Generic.IEnumerable<CV?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCustomCVSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::ZeroC.Ice.Test.SeqMapping.Custom<CV?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<CV?> R2)> OpCustomCVSAsync(global::System.Collections.Generic.IEnumerable<CV?> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCustomCVSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<CV?>, (global::ZeroC.Ice.Test.SeqMapping.Custom<CV?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<CV?> R2)>? _iceI_OpCustomCVSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<CV?>, (global::ZeroC.Ice.Test.SeqMapping.Custom<CV?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<CV?> R2)> IceI_OpCustomCVSRequest =>
            _iceI_OpCustomCVSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<CV?>, (global::ZeroC.Ice.Test.SeqMapping.Custom<CV?> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<CV?> R2)>(
                operationName: "opCustomCVS",
                idempotent: false,
                compress: false,
                format: default,
                writer: CustomCVSHelper.IceWriter,
                reader: istr =>
                {
                    global::ZeroC.Ice.Test.SeqMapping.Custom<CV?> iceP_r1 = CustomCVSHelper.ReadCustomCVS(istr);
                    global::ZeroC.Ice.Test.SeqMapping.Custom<CV?> iceP_r2 = CustomCVSHelper.ReadCustomCVS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> R2) OpCustomIntSS(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCustomIntSSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> R2)> OpCustomIntSSAsync(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCustomIntSSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<int>>, (global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> R2)>? _iceI_OpCustomIntSSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<int>>, (global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> R2)> IceI_OpCustomIntSSRequest =>
            _iceI_OpCustomIntSSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<int>>, (global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> R2)>(
                operationName: "opCustomIntSS",
                idempotent: false,
                compress: false,
                format: default,
                writer: CustomIntSSHelper.IceWriter,
                reader: istr =>
                {
                    global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> iceP_r1 = CustomIntSSHelper.ReadCustomIntSS(istr);
                    global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> iceP_r2 = CustomIntSSHelper.ReadCustomIntSS(istr);
                    return (iceP_r1, iceP_r2);
                });

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        (global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> R2) OpCustomCVSS(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCustomCVSSRequest.Invoke(this, i, context, cancel);

        /// <param name="context">Context map to send with the invocation.</param>
        /// <param name="progress">Sent progress provider.</param>
        /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        global::System.Threading.Tasks.Task<(global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> R2)> OpCustomCVSSAsync(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> i, global::System.Collections.Generic.IReadOnlyDictionary<string, string>? context = null, global::System.IProgress<bool>? progress = null, global::System.Threading.CancellationToken cancel = default) =>
            IceI_OpCustomCVSSRequest.InvokeAsync(this, i, context, progress, cancel);

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>>, (global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> R2)>? _iceI_OpCustomCVSSRequest;

        private static ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>>, (global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> R2)> IceI_OpCustomCVSSRequest =>
            _iceI_OpCustomCVSSRequest ??= new ZeroC.Ice.OutgoingRequestWithParam<global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>>, (global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> R1, global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> R2)>(
                operationName: "opCustomCVSS",
                idempotent: false,
                compress: false,
                format: default,
                writer: CustomCVSSHelper.IceWriter,
                reader: istr =>
                {
                    global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> iceP_r1 = CustomCVSSHelper.ReadCustomCVSS(istr);
                    global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> iceP_r2 = CustomCVSSHelper.ReadCustomCVSS(istr);
                    return (iceP_r1, iceP_r2);
                });

        public static readonly new ZeroC.Ice.ProxyFactory<IMyClassPrx> Factory =
            (reference) => new _MyClassPrx(reference);

        public static readonly new ZeroC.Ice.InputStreamReader<IMyClassPrx> IceReader =
            istr => istr.ReadProxy(Factory);

        public static readonly new ZeroC.Ice.InputStreamReader<IMyClassPrx?> IceReaderIntoNullable =
            istr => istr.ReadNullableProxy(Factory);

        public static new IMyClassPrx Parse(string s, ZeroC.Ice.Communicator communicator) => new _MyClassPrx(ZeroC.Ice.Reference.Parse(s, communicator));

        public static bool TryParse(string s, ZeroC.Ice.Communicator communicator, out IMyClassPrx? prx)
        {
            try
            {
                prx = new _MyClassPrx(ZeroC.Ice.Reference.Parse(s, communicator));
            }
            catch (global::System.Exception)
            {
                prx = null;
                return false;
            }
            return true;
        }
    }

    internal sealed class _MyClassPrx : ZeroC.Ice.ObjectPrx, IMyClassPrx
    {
        internal _MyClassPrx(ZeroC.Ice.Reference reference)
            : base(reference)
        {
        }

        ZeroC.Ice.IObjectPrx ZeroC.Ice.IObjectPrx.IceClone(ZeroC.Ice.Reference reference) => new _MyClassPrx(reference);
    }
}

namespace ZeroC.Ice.Test.SeqMapping
{
    /// <summary>Interface used to implement servants for Slice interface I.
    /// <seealso cref="IIPrx"/>.</summary>
    [ZeroC.Ice.TypeId("::ZeroC::Ice::Test::SeqMapping::I")]
    public partial interface II : ZeroC.Ice.IObject
    {
        private static readonly string _iceTypeId = ZeroC.Ice.TypeExtensions.GetIceTypeId(typeof(II))!;
        private static readonly string[] _iceAllTypeIds = ZeroC.Ice.TypeExtensions.GetAllIceTypeIds(typeof(II));

        string ZeroC.Ice.IObject.IceId(ZeroC.Ice.Current current) => _iceTypeId;

        global::System.Collections.Generic.IEnumerable<string> ZeroC.Ice.IObject.IceIds(ZeroC.Ice.Current current) => _iceAllTypeIds;

        global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> ZeroC.Ice.IObject.DispatchAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current) =>
            DispatchAsync(this, request, current);

        // This protected static DispatchAsync allows a derived class to override the instance DispatchAsync
        // and reuse the generated implementation.
        protected static global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> DispatchAsync(II servant, ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current) =>
            current.Operation switch
            {
                "ice_id" => servant.IceD_ice_idAsync(request, current),
                "ice_ids" => servant.IceD_ice_idsAsync(request, current),
                "ice_isA" => servant.IceD_ice_isAAsync(request, current),
                "ice_ping" => servant.IceD_ice_pingAsync(request, current),
                _ => throw new ZeroC.Ice.OperationNotExistException(current.Identity, current.Facet, current.Operation)
            };
    }

    /// <summary>Interface used to implement servants for Slice interface MyClass.
    /// <seealso cref="IMyClassPrx"/>.</summary>
    [ZeroC.Ice.TypeId("::ZeroC::Ice::Test::SeqMapping::MyClass")]
    public partial interface IMyClass : ZeroC.Ice.IObject
    {
        private static readonly string _iceTypeId = ZeroC.Ice.TypeExtensions.GetIceTypeId(typeof(IMyClass))!;
        private static readonly string[] _iceAllTypeIds = ZeroC.Ice.TypeExtensions.GetAllIceTypeIds(typeof(IMyClass));

        /// <param name="current">The Current object for the dispatch.</param>
        public void Shutdown(ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.ReadOnlyMemory<byte> R1, global::System.ReadOnlyMemory<byte> R2) OpAByteS(byte[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2) OpLByteS(global::System.Collections.Generic.List<byte> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2) OpKByteS(global::System.Collections.Generic.LinkedList<byte> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2) OpQByteS(global::System.Collections.Generic.Queue<byte> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2) OpSByteS(global::System.Collections.Generic.Stack<byte> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2) OpCByteS(global::ZeroC.Ice.Test.SeqMapping.Custom<byte> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.ReadOnlyMemory<bool> R1, global::System.ReadOnlyMemory<bool> R2) OpABoolS(bool[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2) OpLBoolS(global::System.Collections.Generic.List<bool> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2) OpKBoolS(global::System.Collections.Generic.LinkedList<bool> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2) OpQBoolS(global::System.Collections.Generic.Queue<bool> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2) OpSBoolS(global::System.Collections.Generic.Stack<bool> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2) OpCBoolS(global::ZeroC.Ice.Test.SeqMapping.Custom<bool> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.ReadOnlyMemory<short> R1, global::System.ReadOnlyMemory<short> R2) OpAShortS(short[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2) OpLShortS(global::System.Collections.Generic.List<short> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2) OpKShortS(global::System.Collections.Generic.LinkedList<short> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2) OpQShortS(global::System.Collections.Generic.Queue<short> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2) OpSShortS(global::System.Collections.Generic.Stack<short> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2) OpCShortS(global::ZeroC.Ice.Test.SeqMapping.Custom<short> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.ReadOnlyMemory<int> R1, global::System.ReadOnlyMemory<int> R2) OpAIntS(int[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2) OpLIntS(global::System.Collections.Generic.List<int> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2) OpKIntS(global::System.Collections.Generic.LinkedList<int> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2) OpQIntS(global::System.Collections.Generic.Queue<int> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2) OpSIntS(global::System.Collections.Generic.Stack<int> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2) OpCIntS(global::ZeroC.Ice.Test.SeqMapping.Custom<int> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.ReadOnlyMemory<long> R1, global::System.ReadOnlyMemory<long> R2) OpALongS(long[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2) OpLLongS(global::System.Collections.Generic.List<long> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2) OpKLongS(global::System.Collections.Generic.LinkedList<long> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2) OpQLongS(global::System.Collections.Generic.Queue<long> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2) OpSLongS(global::System.Collections.Generic.Stack<long> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2) OpCLongS(global::ZeroC.Ice.Test.SeqMapping.Custom<long> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.ReadOnlyMemory<float> R1, global::System.ReadOnlyMemory<float> R2) OpAFloatS(float[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2) OpLFloatS(global::System.Collections.Generic.List<float> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2) OpKFloatS(global::System.Collections.Generic.LinkedList<float> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2) OpQFloatS(global::System.Collections.Generic.Queue<float> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2) OpSFloatS(global::System.Collections.Generic.Stack<float> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2) OpCFloatS(global::ZeroC.Ice.Test.SeqMapping.Custom<float> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.ReadOnlyMemory<double> R1, global::System.ReadOnlyMemory<double> R2) OpADoubleS(double[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2) OpLDoubleS(global::System.Collections.Generic.List<double> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2) OpKDoubleS(global::System.Collections.Generic.LinkedList<double> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2) OpQDoubleS(global::System.Collections.Generic.Queue<double> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2) OpSDoubleS(global::System.Collections.Generic.Stack<double> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2) OpCDoubleS(global::ZeroC.Ice.Test.SeqMapping.Custom<double> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2) OpAStringS(string[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2) OpLStringS(global::System.Collections.Generic.List<string> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2) OpKStringS(global::System.Collections.Generic.LinkedList<string> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2) OpQStringS(global::System.Collections.Generic.Queue<string> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2) OpSStringS(global::System.Collections.Generic.Stack<string> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2) OpCStringS(global::ZeroC.Ice.Test.SeqMapping.Custom<string> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R2) OpAObjectS(global::ZeroC.Ice.AnyClass?[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R2) OpLObjectS(global::System.Collections.Generic.List<global::ZeroC.Ice.AnyClass?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R2) OpCObjectS(global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.AnyClass?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2) OpAObjectPrxS(global::ZeroC.Ice.IObjectPrx?[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2) OpLObjectPrxS(global::System.Collections.Generic.List<global::ZeroC.Ice.IObjectPrx?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2) OpKObjectPrxS(global::System.Collections.Generic.LinkedList<global::ZeroC.Ice.IObjectPrx?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2) OpQObjectPrxS(global::System.Collections.Generic.Queue<global::ZeroC.Ice.IObjectPrx?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2) OpSObjectPrxS(global::System.Collections.Generic.Stack<global::ZeroC.Ice.IObjectPrx?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2) OpCObjectPrxS(global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.IObjectPrx?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2) OpAStructS(S[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2) OpLStructS(global::System.Collections.Generic.List<S> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2) OpKStructS(global::System.Collections.Generic.LinkedList<S> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2) OpQStructS(global::System.Collections.Generic.Queue<S> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2) OpSStructS(global::System.Collections.Generic.Stack<S> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2) OpCStructS(global::ZeroC.Ice.Test.SeqMapping.Custom<S> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2) OpAStructSD(SD[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2) OpLStructSD(global::System.Collections.Generic.List<SD> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2) OpKStructSD(global::System.Collections.Generic.LinkedList<SD> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2) OpQStructSD(global::System.Collections.Generic.Queue<SD> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2) OpSStructSD(global::System.Collections.Generic.Stack<SD> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2) OpCStructSD(global::ZeroC.Ice.Test.SeqMapping.Custom<SD> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<CV?> R1, global::System.Collections.Generic.IEnumerable<CV?> R2) OpACVS(CV?[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<CV?> R1, global::System.Collections.Generic.IEnumerable<CV?> R2) OpLCVS(global::System.Collections.Generic.List<CV?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2) OpAIPrxS(IIPrx?[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2) OpLIPrxS(global::System.Collections.Generic.List<IIPrx?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2) OpKIPrxS(global::System.Collections.Generic.LinkedList<IIPrx?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2) OpQIPrxS(global::System.Collections.Generic.Queue<IIPrx?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2) OpSIPrxS(global::System.Collections.Generic.Stack<IIPrx?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2) OpCIPrxS(global::ZeroC.Ice.Test.SeqMapping.Custom<IIPrx?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<CR?> R1, global::System.Collections.Generic.IEnumerable<CR?> R2) OpCCRS(global::ZeroC.Ice.Test.SeqMapping.Custom<CR?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2) OpAEnS(En[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2) OpLEnS(global::System.Collections.Generic.List<En> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2) OpKEnS(global::System.Collections.Generic.LinkedList<En> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2) OpQEnS(global::System.Collections.Generic.Queue<En> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2) OpSEnS(global::System.Collections.Generic.Stack<En> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2) OpCEnS(global::ZeroC.Ice.Test.SeqMapping.Custom<En> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2) OpCustomIntS(global::ZeroC.Ice.Test.SeqMapping.Custom<int> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<CV?> R1, global::System.Collections.Generic.IEnumerable<CV?> R2) OpCustomCVS(global::ZeroC.Ice.Test.SeqMapping.Custom<CV?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> R2) OpCustomIntSS(global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>Named tuple with the following fields:
        /// </returns>
        public (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> R2) OpCustomCVSS(global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> i, ZeroC.Ice.Current current);

        string ZeroC.Ice.IObject.IceId(ZeroC.Ice.Current current) => _iceTypeId;

        global::System.Collections.Generic.IEnumerable<string> ZeroC.Ice.IObject.IceIds(ZeroC.Ice.Current current) => _iceAllTypeIds;

        global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> ZeroC.Ice.IObject.DispatchAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current) =>
            DispatchAsync(this, request, current);

        // This protected static DispatchAsync allows a derived class to override the instance DispatchAsync
        // and reuse the generated implementation.
        protected static global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> DispatchAsync(IMyClass servant, ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current) =>
            current.Operation switch
            {
                "shutdown" => servant.IceD_shutdownAsync(request, current),
                "opAByteS" => servant.IceD_opAByteSAsync(request, current),
                "opLByteS" => servant.IceD_opLByteSAsync(request, current),
                "opKByteS" => servant.IceD_opKByteSAsync(request, current),
                "opQByteS" => servant.IceD_opQByteSAsync(request, current),
                "opSByteS" => servant.IceD_opSByteSAsync(request, current),
                "opCByteS" => servant.IceD_opCByteSAsync(request, current),
                "opABoolS" => servant.IceD_opABoolSAsync(request, current),
                "opLBoolS" => servant.IceD_opLBoolSAsync(request, current),
                "opKBoolS" => servant.IceD_opKBoolSAsync(request, current),
                "opQBoolS" => servant.IceD_opQBoolSAsync(request, current),
                "opSBoolS" => servant.IceD_opSBoolSAsync(request, current),
                "opCBoolS" => servant.IceD_opCBoolSAsync(request, current),
                "opAShortS" => servant.IceD_opAShortSAsync(request, current),
                "opLShortS" => servant.IceD_opLShortSAsync(request, current),
                "opKShortS" => servant.IceD_opKShortSAsync(request, current),
                "opQShortS" => servant.IceD_opQShortSAsync(request, current),
                "opSShortS" => servant.IceD_opSShortSAsync(request, current),
                "opCShortS" => servant.IceD_opCShortSAsync(request, current),
                "opAIntS" => servant.IceD_opAIntSAsync(request, current),
                "opLIntS" => servant.IceD_opLIntSAsync(request, current),
                "opKIntS" => servant.IceD_opKIntSAsync(request, current),
                "opQIntS" => servant.IceD_opQIntSAsync(request, current),
                "opSIntS" => servant.IceD_opSIntSAsync(request, current),
                "opCIntS" => servant.IceD_opCIntSAsync(request, current),
                "opALongS" => servant.IceD_opALongSAsync(request, current),
                "opLLongS" => servant.IceD_opLLongSAsync(request, current),
                "opKLongS" => servant.IceD_opKLongSAsync(request, current),
                "opQLongS" => servant.IceD_opQLongSAsync(request, current),
                "opSLongS" => servant.IceD_opSLongSAsync(request, current),
                "opCLongS" => servant.IceD_opCLongSAsync(request, current),
                "opAFloatS" => servant.IceD_opAFloatSAsync(request, current),
                "opLFloatS" => servant.IceD_opLFloatSAsync(request, current),
                "opKFloatS" => servant.IceD_opKFloatSAsync(request, current),
                "opQFloatS" => servant.IceD_opQFloatSAsync(request, current),
                "opSFloatS" => servant.IceD_opSFloatSAsync(request, current),
                "opCFloatS" => servant.IceD_opCFloatSAsync(request, current),
                "opADoubleS" => servant.IceD_opADoubleSAsync(request, current),
                "opLDoubleS" => servant.IceD_opLDoubleSAsync(request, current),
                "opKDoubleS" => servant.IceD_opKDoubleSAsync(request, current),
                "opQDoubleS" => servant.IceD_opQDoubleSAsync(request, current),
                "opSDoubleS" => servant.IceD_opSDoubleSAsync(request, current),
                "opCDoubleS" => servant.IceD_opCDoubleSAsync(request, current),
                "opAStringS" => servant.IceD_opAStringSAsync(request, current),
                "opLStringS" => servant.IceD_opLStringSAsync(request, current),
                "opKStringS" => servant.IceD_opKStringSAsync(request, current),
                "opQStringS" => servant.IceD_opQStringSAsync(request, current),
                "opSStringS" => servant.IceD_opSStringSAsync(request, current),
                "opCStringS" => servant.IceD_opCStringSAsync(request, current),
                "opAObjectS" => servant.IceD_opAObjectSAsync(request, current),
                "opLObjectS" => servant.IceD_opLObjectSAsync(request, current),
                "opCObjectS" => servant.IceD_opCObjectSAsync(request, current),
                "opAObjectPrxS" => servant.IceD_opAObjectPrxSAsync(request, current),
                "opLObjectPrxS" => servant.IceD_opLObjectPrxSAsync(request, current),
                "opKObjectPrxS" => servant.IceD_opKObjectPrxSAsync(request, current),
                "opQObjectPrxS" => servant.IceD_opQObjectPrxSAsync(request, current),
                "opSObjectPrxS" => servant.IceD_opSObjectPrxSAsync(request, current),
                "opCObjectPrxS" => servant.IceD_opCObjectPrxSAsync(request, current),
                "opAStructS" => servant.IceD_opAStructSAsync(request, current),
                "opLStructS" => servant.IceD_opLStructSAsync(request, current),
                "opKStructS" => servant.IceD_opKStructSAsync(request, current),
                "opQStructS" => servant.IceD_opQStructSAsync(request, current),
                "opSStructS" => servant.IceD_opSStructSAsync(request, current),
                "opCStructS" => servant.IceD_opCStructSAsync(request, current),
                "opAStructSD" => servant.IceD_opAStructSDAsync(request, current),
                "opLStructSD" => servant.IceD_opLStructSDAsync(request, current),
                "opKStructSD" => servant.IceD_opKStructSDAsync(request, current),
                "opQStructSD" => servant.IceD_opQStructSDAsync(request, current),
                "opSStructSD" => servant.IceD_opSStructSDAsync(request, current),
                "opCStructSD" => servant.IceD_opCStructSDAsync(request, current),
                "opACVS" => servant.IceD_opACVSAsync(request, current),
                "opLCVS" => servant.IceD_opLCVSAsync(request, current),
                "opAIPrxS" => servant.IceD_opAIPrxSAsync(request, current),
                "opLIPrxS" => servant.IceD_opLIPrxSAsync(request, current),
                "opKIPrxS" => servant.IceD_opKIPrxSAsync(request, current),
                "opQIPrxS" => servant.IceD_opQIPrxSAsync(request, current),
                "opSIPrxS" => servant.IceD_opSIPrxSAsync(request, current),
                "opCIPrxS" => servant.IceD_opCIPrxSAsync(request, current),
                "opCCRS" => servant.IceD_opCCRSAsync(request, current),
                "opAEnS" => servant.IceD_opAEnSAsync(request, current),
                "opLEnS" => servant.IceD_opLEnSAsync(request, current),
                "opKEnS" => servant.IceD_opKEnSAsync(request, current),
                "opQEnS" => servant.IceD_opQEnSAsync(request, current),
                "opSEnS" => servant.IceD_opSEnSAsync(request, current),
                "opCEnS" => servant.IceD_opCEnSAsync(request, current),
                "opCustomIntS" => servant.IceD_opCustomIntSAsync(request, current),
                "opCustomCVS" => servant.IceD_opCustomCVSAsync(request, current),
                "opCustomIntSS" => servant.IceD_opCustomIntSSAsync(request, current),
                "opCustomCVSS" => servant.IceD_opCustomCVSSAsync(request, current),
                "ice_id" => servant.IceD_ice_idAsync(request, current),
                "ice_ids" => servant.IceD_ice_idsAsync(request, current),
                "ice_isA" => servant.IceD_ice_isAAsync(request, current),
                "ice_ping" => servant.IceD_ice_pingAsync(request, current),
                _ => throw new ZeroC.Ice.OperationNotExistException(current.Identity, current.Facet, current.Operation)
            };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_shutdownAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            request.ReadEmptyParamList();
            this.Shutdown(current);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(
                ZeroC.Ice.OutgoingResponseFrame.WithVoidReturnValue(current));
        }

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opAByteSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, ZeroC.Ice.InputStream.IceReaderIntoByteArray);
            var result = this.OpAByteS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpAByteSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.ReadOnlyMemory<byte> R1, global::System.ReadOnlyMemory<byte> R2)> _iceD_OpAByteSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.ReadOnlyMemory<byte> R1, global::System.ReadOnlyMemory<byte> R2) value) =>
        {
            ostr.WriteSequence(value.R1.Span);
            ostr.WriteSequence(value.R2.Span);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLByteSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LByteSHelper.IceReader);
            var result = this.OpLByteS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLByteSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2)> _iceD_OpLByteSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2) value) =>
        {
            LByteSHelper.Write(ostr, value.R1);
            LByteSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKByteSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KByteSHelper.IceReader);
            var result = this.OpKByteS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKByteSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2)> _iceD_OpKByteSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2) value) =>
        {
            KByteSHelper.Write(ostr, value.R1);
            KByteSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQByteSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QByteSHelper.IceReader);
            var result = this.OpQByteS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQByteSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2)> _iceD_OpQByteSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2) value) =>
        {
            QByteSHelper.Write(ostr, value.R1);
            QByteSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSByteSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SByteSHelper.IceReader);
            var result = this.OpSByteS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSByteSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2)> _iceD_OpSByteSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2) value) =>
        {
            SByteSHelper.Write(ostr, value.R1);
            SByteSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCByteSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CByteSHelper.IceReader);
            var result = this.OpCByteS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCByteSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2)> _iceD_OpCByteSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2) value) =>
        {
            CByteSHelper.Write(ostr, value.R1);
            CByteSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opABoolSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, ZeroC.Ice.InputStream.IceReaderIntoBoolArray);
            var result = this.OpABoolS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpABoolSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.ReadOnlyMemory<bool> R1, global::System.ReadOnlyMemory<bool> R2)> _iceD_OpABoolSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.ReadOnlyMemory<bool> R1, global::System.ReadOnlyMemory<bool> R2) value) =>
        {
            ostr.WriteSequence(value.R1.Span);
            ostr.WriteSequence(value.R2.Span);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLBoolSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LBoolSHelper.IceReader);
            var result = this.OpLBoolS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLBoolSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2)> _iceD_OpLBoolSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2) value) =>
        {
            LBoolSHelper.Write(ostr, value.R1);
            LBoolSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKBoolSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KBoolSHelper.IceReader);
            var result = this.OpKBoolS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKBoolSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2)> _iceD_OpKBoolSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2) value) =>
        {
            KBoolSHelper.Write(ostr, value.R1);
            KBoolSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQBoolSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QBoolSHelper.IceReader);
            var result = this.OpQBoolS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQBoolSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2)> _iceD_OpQBoolSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2) value) =>
        {
            QBoolSHelper.Write(ostr, value.R1);
            QBoolSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSBoolSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SBoolSHelper.IceReader);
            var result = this.OpSBoolS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSBoolSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2)> _iceD_OpSBoolSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2) value) =>
        {
            SBoolSHelper.Write(ostr, value.R1);
            SBoolSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCBoolSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CBoolSHelper.IceReader);
            var result = this.OpCBoolS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCBoolSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2)> _iceD_OpCBoolSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2) value) =>
        {
            CBoolSHelper.Write(ostr, value.R1);
            CBoolSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opAShortSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, ZeroC.Ice.InputStream.IceReaderIntoShortArray);
            var result = this.OpAShortS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpAShortSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.ReadOnlyMemory<short> R1, global::System.ReadOnlyMemory<short> R2)> _iceD_OpAShortSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.ReadOnlyMemory<short> R1, global::System.ReadOnlyMemory<short> R2) value) =>
        {
            ostr.WriteSequence(value.R1.Span);
            ostr.WriteSequence(value.R2.Span);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLShortSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LShortSHelper.IceReader);
            var result = this.OpLShortS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLShortSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2)> _iceD_OpLShortSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2) value) =>
        {
            LShortSHelper.Write(ostr, value.R1);
            LShortSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKShortSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KShortSHelper.IceReader);
            var result = this.OpKShortS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKShortSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2)> _iceD_OpKShortSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2) value) =>
        {
            KShortSHelper.Write(ostr, value.R1);
            KShortSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQShortSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QShortSHelper.IceReader);
            var result = this.OpQShortS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQShortSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2)> _iceD_OpQShortSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2) value) =>
        {
            QShortSHelper.Write(ostr, value.R1);
            QShortSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSShortSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SShortSHelper.IceReader);
            var result = this.OpSShortS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSShortSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2)> _iceD_OpSShortSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2) value) =>
        {
            SShortSHelper.Write(ostr, value.R1);
            SShortSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCShortSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CShortSHelper.IceReader);
            var result = this.OpCShortS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCShortSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2)> _iceD_OpCShortSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2) value) =>
        {
            CShortSHelper.Write(ostr, value.R1);
            CShortSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opAIntSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, ZeroC.Ice.InputStream.IceReaderIntoIntArray);
            var result = this.OpAIntS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpAIntSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.ReadOnlyMemory<int> R1, global::System.ReadOnlyMemory<int> R2)> _iceD_OpAIntSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.ReadOnlyMemory<int> R1, global::System.ReadOnlyMemory<int> R2) value) =>
        {
            ostr.WriteSequence(value.R1.Span);
            ostr.WriteSequence(value.R2.Span);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLIntSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LIntSHelper.IceReader);
            var result = this.OpLIntS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLIntSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2)> _iceD_OpLIntSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2) value) =>
        {
            LIntSHelper.Write(ostr, value.R1);
            LIntSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKIntSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KIntSHelper.IceReader);
            var result = this.OpKIntS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKIntSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2)> _iceD_OpKIntSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2) value) =>
        {
            KIntSHelper.Write(ostr, value.R1);
            KIntSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQIntSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QIntSHelper.IceReader);
            var result = this.OpQIntS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQIntSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2)> _iceD_OpQIntSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2) value) =>
        {
            QIntSHelper.Write(ostr, value.R1);
            QIntSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSIntSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SIntSHelper.IceReader);
            var result = this.OpSIntS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSIntSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2)> _iceD_OpSIntSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2) value) =>
        {
            SIntSHelper.Write(ostr, value.R1);
            SIntSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCIntSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CIntSHelper.IceReader);
            var result = this.OpCIntS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCIntSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2)> _iceD_OpCIntSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2) value) =>
        {
            CIntSHelper.Write(ostr, value.R1);
            CIntSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opALongSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, ZeroC.Ice.InputStream.IceReaderIntoLongArray);
            var result = this.OpALongS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpALongSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.ReadOnlyMemory<long> R1, global::System.ReadOnlyMemory<long> R2)> _iceD_OpALongSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.ReadOnlyMemory<long> R1, global::System.ReadOnlyMemory<long> R2) value) =>
        {
            ostr.WriteSequence(value.R1.Span);
            ostr.WriteSequence(value.R2.Span);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLLongSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LLongSHelper.IceReader);
            var result = this.OpLLongS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLLongSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2)> _iceD_OpLLongSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2) value) =>
        {
            LLongSHelper.Write(ostr, value.R1);
            LLongSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKLongSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KLongSHelper.IceReader);
            var result = this.OpKLongS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKLongSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2)> _iceD_OpKLongSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2) value) =>
        {
            KLongSHelper.Write(ostr, value.R1);
            KLongSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQLongSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QLongSHelper.IceReader);
            var result = this.OpQLongS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQLongSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2)> _iceD_OpQLongSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2) value) =>
        {
            QLongSHelper.Write(ostr, value.R1);
            QLongSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSLongSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SLongSHelper.IceReader);
            var result = this.OpSLongS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSLongSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2)> _iceD_OpSLongSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2) value) =>
        {
            SLongSHelper.Write(ostr, value.R1);
            SLongSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCLongSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CLongSHelper.IceReader);
            var result = this.OpCLongS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCLongSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2)> _iceD_OpCLongSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2) value) =>
        {
            CLongSHelper.Write(ostr, value.R1);
            CLongSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opAFloatSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, ZeroC.Ice.InputStream.IceReaderIntoFloatArray);
            var result = this.OpAFloatS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpAFloatSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.ReadOnlyMemory<float> R1, global::System.ReadOnlyMemory<float> R2)> _iceD_OpAFloatSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.ReadOnlyMemory<float> R1, global::System.ReadOnlyMemory<float> R2) value) =>
        {
            ostr.WriteSequence(value.R1.Span);
            ostr.WriteSequence(value.R2.Span);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLFloatSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LFloatSHelper.IceReader);
            var result = this.OpLFloatS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLFloatSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2)> _iceD_OpLFloatSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2) value) =>
        {
            LFloatSHelper.Write(ostr, value.R1);
            LFloatSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKFloatSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KFloatSHelper.IceReader);
            var result = this.OpKFloatS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKFloatSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2)> _iceD_OpKFloatSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2) value) =>
        {
            KFloatSHelper.Write(ostr, value.R1);
            KFloatSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQFloatSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QFloatSHelper.IceReader);
            var result = this.OpQFloatS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQFloatSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2)> _iceD_OpQFloatSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2) value) =>
        {
            QFloatSHelper.Write(ostr, value.R1);
            QFloatSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSFloatSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SFloatSHelper.IceReader);
            var result = this.OpSFloatS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSFloatSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2)> _iceD_OpSFloatSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2) value) =>
        {
            SFloatSHelper.Write(ostr, value.R1);
            SFloatSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCFloatSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CFloatSHelper.IceReader);
            var result = this.OpCFloatS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCFloatSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2)> _iceD_OpCFloatSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2) value) =>
        {
            CFloatSHelper.Write(ostr, value.R1);
            CFloatSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opADoubleSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, ZeroC.Ice.InputStream.IceReaderIntoDoubleArray);
            var result = this.OpADoubleS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpADoubleSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.ReadOnlyMemory<double> R1, global::System.ReadOnlyMemory<double> R2)> _iceD_OpADoubleSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.ReadOnlyMemory<double> R1, global::System.ReadOnlyMemory<double> R2) value) =>
        {
            ostr.WriteSequence(value.R1.Span);
            ostr.WriteSequence(value.R2.Span);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLDoubleSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LDoubleSHelper.IceReader);
            var result = this.OpLDoubleS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLDoubleSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2)> _iceD_OpLDoubleSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2) value) =>
        {
            LDoubleSHelper.Write(ostr, value.R1);
            LDoubleSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKDoubleSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KDoubleSHelper.IceReader);
            var result = this.OpKDoubleS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKDoubleSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2)> _iceD_OpKDoubleSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2) value) =>
        {
            KDoubleSHelper.Write(ostr, value.R1);
            KDoubleSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQDoubleSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QDoubleSHelper.IceReader);
            var result = this.OpQDoubleS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQDoubleSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2)> _iceD_OpQDoubleSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2) value) =>
        {
            QDoubleSHelper.Write(ostr, value.R1);
            QDoubleSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSDoubleSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SDoubleSHelper.IceReader);
            var result = this.OpSDoubleS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSDoubleSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2)> _iceD_OpSDoubleSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2) value) =>
        {
            SDoubleSHelper.Write(ostr, value.R1);
            SDoubleSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCDoubleSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CDoubleSHelper.IceReader);
            var result = this.OpCDoubleS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCDoubleSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2)> _iceD_OpCDoubleSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2) value) =>
        {
            CDoubleSHelper.Write(ostr, value.R1);
            CDoubleSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opAStringSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, AStringSHelper.IceReader);
            var result = this.OpAStringS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpAStringSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2)> _iceD_OpAStringSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2) value) =>
        {
            AStringSHelper.Write(ostr, value.R1);
            AStringSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLStringSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LStringSHelper.IceReader);
            var result = this.OpLStringS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLStringSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2)> _iceD_OpLStringSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2) value) =>
        {
            LStringSHelper.Write(ostr, value.R1);
            LStringSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKStringSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KStringSHelper.IceReader);
            var result = this.OpKStringS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKStringSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2)> _iceD_OpKStringSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2) value) =>
        {
            KStringSHelper.Write(ostr, value.R1);
            LStringSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQStringSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QStringSHelper.IceReader);
            var result = this.OpQStringS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQStringSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2)> _iceD_OpQStringSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2) value) =>
        {
            QStringSHelper.Write(ostr, value.R1);
            QStringSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSStringSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SStringSHelper.IceReader);
            var result = this.OpSStringS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSStringSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2)> _iceD_OpSStringSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2) value) =>
        {
            SStringSHelper.Write(ostr, value.R1);
            SStringSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCStringSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CStringSHelper.IceReader);
            var result = this.OpCStringS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCStringSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2)> _iceD_OpCStringSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2) value) =>
        {
            CStringSHelper.Write(ostr, value.R1);
            CStringSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opAObjectSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, AObjectSHelper.IceReader);
            var result = this.OpAObjectS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpAObjectSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R2)> _iceD_OpAObjectSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R2) value) =>
        {
            AObjectSHelper.Write(ostr, value.R1);
            AObjectSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLObjectSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LObjectSHelper.IceReader);
            var result = this.OpLObjectS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLObjectSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R2)> _iceD_OpLObjectSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R2) value) =>
        {
            LObjectSHelper.Write(ostr, value.R1);
            LObjectSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCObjectSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CObjectSHelper.IceReader);
            var result = this.OpCObjectS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCObjectSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R2)> _iceD_OpCObjectSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R2) value) =>
        {
            CObjectSHelper.Write(ostr, value.R1);
            CObjectSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opAObjectPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, AObjectPrxSHelper.IceReader);
            var result = this.OpAObjectPrxS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpAObjectPrxSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2)> _iceD_OpAObjectPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2) value) =>
        {
            AObjectPrxSHelper.Write(ostr, value.R1);
            AObjectPrxSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLObjectPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LObjectPrxSHelper.IceReader);
            var result = this.OpLObjectPrxS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLObjectPrxSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2)> _iceD_OpLObjectPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2) value) =>
        {
            LObjectPrxSHelper.Write(ostr, value.R1);
            LObjectPrxSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKObjectPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KObjectPrxSHelper.IceReader);
            var result = this.OpKObjectPrxS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKObjectPrxSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2)> _iceD_OpKObjectPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2) value) =>
        {
            KObjectPrxSHelper.Write(ostr, value.R1);
            KObjectPrxSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQObjectPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QObjectPrxSHelper.IceReader);
            var result = this.OpQObjectPrxS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQObjectPrxSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2)> _iceD_OpQObjectPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2) value) =>
        {
            QObjectPrxSHelper.Write(ostr, value.R1);
            QObjectPrxSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSObjectPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SObjectPrxSHelper.IceReader);
            var result = this.OpSObjectPrxS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSObjectPrxSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2)> _iceD_OpSObjectPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2) value) =>
        {
            SObjectPrxSHelper.Write(ostr, value.R1);
            SObjectPrxSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCObjectPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CObjectPrxSHelper.IceReader);
            var result = this.OpCObjectPrxS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCObjectPrxSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2)> _iceD_OpCObjectPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2) value) =>
        {
            CObjectPrxSHelper.Write(ostr, value.R1);
            CObjectPrxSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opAStructSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, AStructSHelper.IceReader);
            var result = this.OpAStructS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpAStructSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2)> _iceD_OpAStructSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2) value) =>
        {
            AStructSHelper.Write(ostr, value.R1);
            AStructSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLStructSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LStructSHelper.IceReader);
            var result = this.OpLStructS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLStructSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2)> _iceD_OpLStructSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2) value) =>
        {
            LStructSHelper.Write(ostr, value.R1);
            LStructSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKStructSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KStructSHelper.IceReader);
            var result = this.OpKStructS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKStructSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2)> _iceD_OpKStructSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2) value) =>
        {
            KStructSHelper.Write(ostr, value.R1);
            KStructSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQStructSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QStructSHelper.IceReader);
            var result = this.OpQStructS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQStructSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2)> _iceD_OpQStructSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2) value) =>
        {
            QStructSHelper.Write(ostr, value.R1);
            QStructSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSStructSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SStructSHelper.IceReader);
            var result = this.OpSStructS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSStructSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2)> _iceD_OpSStructSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2) value) =>
        {
            SStructSHelper.Write(ostr, value.R1);
            SStructSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCStructSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CStructSHelper.IceReader);
            var result = this.OpCStructS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCStructSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2)> _iceD_OpCStructSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2) value) =>
        {
            CStructSHelper.Write(ostr, value.R1);
            CStructSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opAStructSDAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, AStructSDHelper.IceReader);
            var result = this.OpAStructSD(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpAStructSDWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2)> _iceD_OpAStructSDWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2) value) =>
        {
            AStructSDHelper.Write(ostr, value.R1);
            AStructSDHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLStructSDAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LStructSDHelper.IceReader);
            var result = this.OpLStructSD(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLStructSDWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2)> _iceD_OpLStructSDWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2) value) =>
        {
            LStructSDHelper.Write(ostr, value.R1);
            LStructSDHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKStructSDAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KStructSDHelper.IceReader);
            var result = this.OpKStructSD(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKStructSDWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2)> _iceD_OpKStructSDWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2) value) =>
        {
            KStructSDHelper.Write(ostr, value.R1);
            KStructSDHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQStructSDAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QStructSDHelper.IceReader);
            var result = this.OpQStructSD(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQStructSDWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2)> _iceD_OpQStructSDWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2) value) =>
        {
            QStructSDHelper.Write(ostr, value.R1);
            QStructSDHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSStructSDAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SStructSDHelper.IceReader);
            var result = this.OpSStructSD(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSStructSDWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2)> _iceD_OpSStructSDWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2) value) =>
        {
            SStructSDHelper.Write(ostr, value.R1);
            SStructSDHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCStructSDAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CStructSDHelper.IceReader);
            var result = this.OpCStructSD(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCStructSDWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2)> _iceD_OpCStructSDWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2) value) =>
        {
            CStructSDHelper.Write(ostr, value.R1);
            CStructSDHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opACVSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, ACVSHelper.IceReader);
            var result = this.OpACVS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpACVSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<CV?> R1, global::System.Collections.Generic.IEnumerable<CV?> R2)> _iceD_OpACVSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<CV?> R1, global::System.Collections.Generic.IEnumerable<CV?> R2) value) =>
        {
            ACVSHelper.Write(ostr, value.R1);
            ACVSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLCVSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LCVSHelper.IceReader);
            var result = this.OpLCVS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLCVSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<CV?> R1, global::System.Collections.Generic.IEnumerable<CV?> R2)> _iceD_OpLCVSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<CV?> R1, global::System.Collections.Generic.IEnumerable<CV?> R2) value) =>
        {
            LCVSHelper.Write(ostr, value.R1);
            LCVSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opAIPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, AIPrxSHelper.IceReader);
            var result = this.OpAIPrxS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpAIPrxSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2)> _iceD_OpAIPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2) value) =>
        {
            AIPrxSHelper.Write(ostr, value.R1);
            AIPrxSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLIPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LIPrxSHelper.IceReader);
            var result = this.OpLIPrxS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLIPrxSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2)> _iceD_OpLIPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2) value) =>
        {
            LIPrxSHelper.Write(ostr, value.R1);
            LIPrxSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKIPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KIPrxSHelper.IceReader);
            var result = this.OpKIPrxS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKIPrxSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2)> _iceD_OpKIPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2) value) =>
        {
            KIPrxSHelper.Write(ostr, value.R1);
            KIPrxSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQIPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QIPrxSHelper.IceReader);
            var result = this.OpQIPrxS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQIPrxSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2)> _iceD_OpQIPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2) value) =>
        {
            QIPrxSHelper.Write(ostr, value.R1);
            QIPrxSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSIPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SIPrxSHelper.IceReader);
            var result = this.OpSIPrxS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSIPrxSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2)> _iceD_OpSIPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2) value) =>
        {
            SIPrxSHelper.Write(ostr, value.R1);
            SIPrxSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCIPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CIPrxSHelper.IceReader);
            var result = this.OpCIPrxS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCIPrxSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2)> _iceD_OpCIPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2) value) =>
        {
            CIPrxSHelper.Write(ostr, value.R1);
            CIPrxSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCCRSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CCRSHelper.IceReader);
            var result = this.OpCCRS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCCRSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<CR?> R1, global::System.Collections.Generic.IEnumerable<CR?> R2)> _iceD_OpCCRSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<CR?> R1, global::System.Collections.Generic.IEnumerable<CR?> R2) value) =>
        {
            CCRSHelper.Write(ostr, value.R1);
            CCRSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opAEnSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, AEnSHelper.IceReader);
            var result = this.OpAEnS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpAEnSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2)> _iceD_OpAEnSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2) value) =>
        {
            AEnSHelper.Write(ostr, value.R1);
            AEnSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLEnSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LEnSHelper.IceReader);
            var result = this.OpLEnS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLEnSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2)> _iceD_OpLEnSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2) value) =>
        {
            LEnSHelper.Write(ostr, value.R1);
            LEnSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKEnSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KEnSHelper.IceReader);
            var result = this.OpKEnS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKEnSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2)> _iceD_OpKEnSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2) value) =>
        {
            KEnSHelper.Write(ostr, value.R1);
            KEnSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQEnSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QEnSHelper.IceReader);
            var result = this.OpQEnS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQEnSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2)> _iceD_OpQEnSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2) value) =>
        {
            QEnSHelper.Write(ostr, value.R1);
            QEnSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSEnSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SEnSHelper.IceReader);
            var result = this.OpSEnS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSEnSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2)> _iceD_OpSEnSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2) value) =>
        {
            SEnSHelper.Write(ostr, value.R1);
            SEnSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCEnSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CEnSHelper.IceReader);
            var result = this.OpCEnS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCEnSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2)> _iceD_OpCEnSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2) value) =>
        {
            CEnSHelper.Write(ostr, value.R1);
            CEnSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCustomIntSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CustomIntSHelper.IceReader);
            var result = this.OpCustomIntS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCustomIntSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2)> _iceD_OpCustomIntSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2) value) =>
        {
            CustomIntSHelper.Write(ostr, value.R1);
            CustomIntSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCustomCVSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CustomCVSHelper.IceReader);
            var result = this.OpCustomCVS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCustomCVSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<CV?> R1, global::System.Collections.Generic.IEnumerable<CV?> R2)> _iceD_OpCustomCVSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<CV?> R1, global::System.Collections.Generic.IEnumerable<CV?> R2) value) =>
        {
            CustomCVSHelper.Write(ostr, value.R1);
            CustomCVSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCustomIntSSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CustomIntSSHelper.IceReader);
            var result = this.OpCustomIntSS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCustomIntSSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> R2)> _iceD_OpCustomIntSSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> R2) value) =>
        {
            CustomIntSSHelper.Write(ostr, value.R1);
            CustomIntSSHelper.Write(ostr, value.R2);
        };

        protected global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCustomCVSSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CustomCVSSHelper.IceReader);
            var result = this.OpCustomCVSS(iceP_i, current);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCustomCVSSWriter);
            return new global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame>(response);
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> R2)> _iceD_OpCustomCVSSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> R2) value) =>
        {
            CustomCVSSHelper.Write(ostr, value.R1);
            CustomCVSSHelper.Write(ostr, value.R2);
        };
    }
}

namespace ZeroC.Ice.Test.SeqMapping
{
    /// <summary>Interface used to implement servants for Slice interface I.
    /// <seealso cref="IIPrx"/>.</summary>
    [ZeroC.Ice.TypeId("::ZeroC::Ice::Test::SeqMapping::I")]
    public partial interface IIAsync : ZeroC.Ice.IObject
    {
        private static readonly string _iceTypeId = ZeroC.Ice.TypeExtensions.GetIceTypeId(typeof(IIAsync))!;
        private static readonly string[] _iceAllTypeIds = ZeroC.Ice.TypeExtensions.GetAllIceTypeIds(typeof(IIAsync));

        string ZeroC.Ice.IObject.IceId(ZeroC.Ice.Current current) => _iceTypeId;

        global::System.Collections.Generic.IEnumerable<string> ZeroC.Ice.IObject.IceIds(ZeroC.Ice.Current current) => _iceAllTypeIds;

        global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> ZeroC.Ice.IObject.DispatchAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current) =>
            DispatchAsync(this, request, current);

        // This protected static DispatchAsync allows a derived class to override the instance DispatchAsync
        // and reuse the generated implementation.
        protected static global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> DispatchAsync(IIAsync servant, ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current) =>
            current.Operation switch
            {
                "ice_id" => servant.IceD_ice_idAsync(request, current),
                "ice_ids" => servant.IceD_ice_idsAsync(request, current),
                "ice_isA" => servant.IceD_ice_isAAsync(request, current),
                "ice_ping" => servant.IceD_ice_pingAsync(request, current),
                _ => throw new ZeroC.Ice.OperationNotExistException(current.Identity, current.Facet, current.Operation)
            };
    }

    /// <summary>Interface used to implement servants for Slice interface MyClass.
    /// <seealso cref="IMyClassPrx"/>.</summary>
    [ZeroC.Ice.TypeId("::ZeroC::Ice::Test::SeqMapping::MyClass")]
    public partial interface IMyClassAsync : ZeroC.Ice.IObject
    {
        private static readonly string _iceTypeId = ZeroC.Ice.TypeExtensions.GetIceTypeId(typeof(IMyClassAsync))!;
        private static readonly string[] _iceAllTypeIds = ZeroC.Ice.TypeExtensions.GetAllIceTypeIds(typeof(IMyClassAsync));

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask ShutdownAsync(ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.ReadOnlyMemory<byte> R1, global::System.ReadOnlyMemory<byte> R2)> OpAByteSAsync(byte[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2)> OpLByteSAsync(global::System.Collections.Generic.List<byte> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2)> OpKByteSAsync(global::System.Collections.Generic.LinkedList<byte> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2)> OpQByteSAsync(global::System.Collections.Generic.Queue<byte> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2)> OpSByteSAsync(global::System.Collections.Generic.Stack<byte> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2)> OpCByteSAsync(global::ZeroC.Ice.Test.SeqMapping.Custom<byte> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.ReadOnlyMemory<bool> R1, global::System.ReadOnlyMemory<bool> R2)> OpABoolSAsync(bool[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2)> OpLBoolSAsync(global::System.Collections.Generic.List<bool> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2)> OpKBoolSAsync(global::System.Collections.Generic.LinkedList<bool> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2)> OpQBoolSAsync(global::System.Collections.Generic.Queue<bool> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2)> OpSBoolSAsync(global::System.Collections.Generic.Stack<bool> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2)> OpCBoolSAsync(global::ZeroC.Ice.Test.SeqMapping.Custom<bool> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.ReadOnlyMemory<short> R1, global::System.ReadOnlyMemory<short> R2)> OpAShortSAsync(short[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2)> OpLShortSAsync(global::System.Collections.Generic.List<short> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2)> OpKShortSAsync(global::System.Collections.Generic.LinkedList<short> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2)> OpQShortSAsync(global::System.Collections.Generic.Queue<short> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2)> OpSShortSAsync(global::System.Collections.Generic.Stack<short> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2)> OpCShortSAsync(global::ZeroC.Ice.Test.SeqMapping.Custom<short> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.ReadOnlyMemory<int> R1, global::System.ReadOnlyMemory<int> R2)> OpAIntSAsync(int[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2)> OpLIntSAsync(global::System.Collections.Generic.List<int> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2)> OpKIntSAsync(global::System.Collections.Generic.LinkedList<int> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2)> OpQIntSAsync(global::System.Collections.Generic.Queue<int> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2)> OpSIntSAsync(global::System.Collections.Generic.Stack<int> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2)> OpCIntSAsync(global::ZeroC.Ice.Test.SeqMapping.Custom<int> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.ReadOnlyMemory<long> R1, global::System.ReadOnlyMemory<long> R2)> OpALongSAsync(long[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2)> OpLLongSAsync(global::System.Collections.Generic.List<long> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2)> OpKLongSAsync(global::System.Collections.Generic.LinkedList<long> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2)> OpQLongSAsync(global::System.Collections.Generic.Queue<long> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2)> OpSLongSAsync(global::System.Collections.Generic.Stack<long> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2)> OpCLongSAsync(global::ZeroC.Ice.Test.SeqMapping.Custom<long> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.ReadOnlyMemory<float> R1, global::System.ReadOnlyMemory<float> R2)> OpAFloatSAsync(float[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2)> OpLFloatSAsync(global::System.Collections.Generic.List<float> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2)> OpKFloatSAsync(global::System.Collections.Generic.LinkedList<float> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2)> OpQFloatSAsync(global::System.Collections.Generic.Queue<float> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2)> OpSFloatSAsync(global::System.Collections.Generic.Stack<float> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2)> OpCFloatSAsync(global::ZeroC.Ice.Test.SeqMapping.Custom<float> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.ReadOnlyMemory<double> R1, global::System.ReadOnlyMemory<double> R2)> OpADoubleSAsync(double[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2)> OpLDoubleSAsync(global::System.Collections.Generic.List<double> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2)> OpKDoubleSAsync(global::System.Collections.Generic.LinkedList<double> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2)> OpQDoubleSAsync(global::System.Collections.Generic.Queue<double> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2)> OpSDoubleSAsync(global::System.Collections.Generic.Stack<double> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2)> OpCDoubleSAsync(global::ZeroC.Ice.Test.SeqMapping.Custom<double> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2)> OpAStringSAsync(string[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2)> OpLStringSAsync(global::System.Collections.Generic.List<string> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2)> OpKStringSAsync(global::System.Collections.Generic.LinkedList<string> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2)> OpQStringSAsync(global::System.Collections.Generic.Queue<string> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2)> OpSStringSAsync(global::System.Collections.Generic.Stack<string> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2)> OpCStringSAsync(global::ZeroC.Ice.Test.SeqMapping.Custom<string> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R2)> OpAObjectSAsync(global::ZeroC.Ice.AnyClass?[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R2)> OpLObjectSAsync(global::System.Collections.Generic.List<global::ZeroC.Ice.AnyClass?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R2)> OpCObjectSAsync(global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.AnyClass?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2)> OpAObjectPrxSAsync(global::ZeroC.Ice.IObjectPrx?[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2)> OpLObjectPrxSAsync(global::System.Collections.Generic.List<global::ZeroC.Ice.IObjectPrx?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2)> OpKObjectPrxSAsync(global::System.Collections.Generic.LinkedList<global::ZeroC.Ice.IObjectPrx?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2)> OpQObjectPrxSAsync(global::System.Collections.Generic.Queue<global::ZeroC.Ice.IObjectPrx?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2)> OpSObjectPrxSAsync(global::System.Collections.Generic.Stack<global::ZeroC.Ice.IObjectPrx?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2)> OpCObjectPrxSAsync(global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.IObjectPrx?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2)> OpAStructSAsync(S[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2)> OpLStructSAsync(global::System.Collections.Generic.List<S> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2)> OpKStructSAsync(global::System.Collections.Generic.LinkedList<S> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2)> OpQStructSAsync(global::System.Collections.Generic.Queue<S> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2)> OpSStructSAsync(global::System.Collections.Generic.Stack<S> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2)> OpCStructSAsync(global::ZeroC.Ice.Test.SeqMapping.Custom<S> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2)> OpAStructSDAsync(SD[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2)> OpLStructSDAsync(global::System.Collections.Generic.List<SD> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2)> OpKStructSDAsync(global::System.Collections.Generic.LinkedList<SD> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2)> OpQStructSDAsync(global::System.Collections.Generic.Queue<SD> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2)> OpSStructSDAsync(global::System.Collections.Generic.Stack<SD> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2)> OpCStructSDAsync(global::ZeroC.Ice.Test.SeqMapping.Custom<SD> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<CV?> R1, global::System.Collections.Generic.IEnumerable<CV?> R2)> OpACVSAsync(CV?[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<CV?> R1, global::System.Collections.Generic.IEnumerable<CV?> R2)> OpLCVSAsync(global::System.Collections.Generic.List<CV?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2)> OpAIPrxSAsync(IIPrx?[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2)> OpLIPrxSAsync(global::System.Collections.Generic.List<IIPrx?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2)> OpKIPrxSAsync(global::System.Collections.Generic.LinkedList<IIPrx?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2)> OpQIPrxSAsync(global::System.Collections.Generic.Queue<IIPrx?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2)> OpSIPrxSAsync(global::System.Collections.Generic.Stack<IIPrx?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2)> OpCIPrxSAsync(global::ZeroC.Ice.Test.SeqMapping.Custom<IIPrx?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<CR?> R1, global::System.Collections.Generic.IEnumerable<CR?> R2)> OpCCRSAsync(global::ZeroC.Ice.Test.SeqMapping.Custom<CR?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2)> OpAEnSAsync(En[] i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2)> OpLEnSAsync(global::System.Collections.Generic.List<En> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2)> OpKEnSAsync(global::System.Collections.Generic.LinkedList<En> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2)> OpQEnSAsync(global::System.Collections.Generic.Queue<En> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2)> OpSEnSAsync(global::System.Collections.Generic.Stack<En> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2)> OpCEnSAsync(global::ZeroC.Ice.Test.SeqMapping.Custom<En> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2)> OpCustomIntSAsync(global::ZeroC.Ice.Test.SeqMapping.Custom<int> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<CV?> R1, global::System.Collections.Generic.IEnumerable<CV?> R2)> OpCustomCVSAsync(global::ZeroC.Ice.Test.SeqMapping.Custom<CV?> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> R2)> OpCustomIntSSAsync(global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> i, ZeroC.Ice.Current current);

        /// <param name="current">The Current object for the dispatch.</param>
        /// <returns>The task object representing the asynchronous operation.</returns>
        public global::System.Threading.Tasks.ValueTask<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> R2)> OpCustomCVSSAsync(global::ZeroC.Ice.Test.SeqMapping.Custom<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> i, ZeroC.Ice.Current current);

        string ZeroC.Ice.IObject.IceId(ZeroC.Ice.Current current) => _iceTypeId;

        global::System.Collections.Generic.IEnumerable<string> ZeroC.Ice.IObject.IceIds(ZeroC.Ice.Current current) => _iceAllTypeIds;

        global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> ZeroC.Ice.IObject.DispatchAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current) =>
            DispatchAsync(this, request, current);

        // This protected static DispatchAsync allows a derived class to override the instance DispatchAsync
        // and reuse the generated implementation.
        protected static global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> DispatchAsync(IMyClassAsync servant, ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current) =>
            current.Operation switch
            {
                "shutdown" => servant.IceD_shutdownAsync(request, current),
                "opAByteS" => servant.IceD_opAByteSAsync(request, current),
                "opLByteS" => servant.IceD_opLByteSAsync(request, current),
                "opKByteS" => servant.IceD_opKByteSAsync(request, current),
                "opQByteS" => servant.IceD_opQByteSAsync(request, current),
                "opSByteS" => servant.IceD_opSByteSAsync(request, current),
                "opCByteS" => servant.IceD_opCByteSAsync(request, current),
                "opABoolS" => servant.IceD_opABoolSAsync(request, current),
                "opLBoolS" => servant.IceD_opLBoolSAsync(request, current),
                "opKBoolS" => servant.IceD_opKBoolSAsync(request, current),
                "opQBoolS" => servant.IceD_opQBoolSAsync(request, current),
                "opSBoolS" => servant.IceD_opSBoolSAsync(request, current),
                "opCBoolS" => servant.IceD_opCBoolSAsync(request, current),
                "opAShortS" => servant.IceD_opAShortSAsync(request, current),
                "opLShortS" => servant.IceD_opLShortSAsync(request, current),
                "opKShortS" => servant.IceD_opKShortSAsync(request, current),
                "opQShortS" => servant.IceD_opQShortSAsync(request, current),
                "opSShortS" => servant.IceD_opSShortSAsync(request, current),
                "opCShortS" => servant.IceD_opCShortSAsync(request, current),
                "opAIntS" => servant.IceD_opAIntSAsync(request, current),
                "opLIntS" => servant.IceD_opLIntSAsync(request, current),
                "opKIntS" => servant.IceD_opKIntSAsync(request, current),
                "opQIntS" => servant.IceD_opQIntSAsync(request, current),
                "opSIntS" => servant.IceD_opSIntSAsync(request, current),
                "opCIntS" => servant.IceD_opCIntSAsync(request, current),
                "opALongS" => servant.IceD_opALongSAsync(request, current),
                "opLLongS" => servant.IceD_opLLongSAsync(request, current),
                "opKLongS" => servant.IceD_opKLongSAsync(request, current),
                "opQLongS" => servant.IceD_opQLongSAsync(request, current),
                "opSLongS" => servant.IceD_opSLongSAsync(request, current),
                "opCLongS" => servant.IceD_opCLongSAsync(request, current),
                "opAFloatS" => servant.IceD_opAFloatSAsync(request, current),
                "opLFloatS" => servant.IceD_opLFloatSAsync(request, current),
                "opKFloatS" => servant.IceD_opKFloatSAsync(request, current),
                "opQFloatS" => servant.IceD_opQFloatSAsync(request, current),
                "opSFloatS" => servant.IceD_opSFloatSAsync(request, current),
                "opCFloatS" => servant.IceD_opCFloatSAsync(request, current),
                "opADoubleS" => servant.IceD_opADoubleSAsync(request, current),
                "opLDoubleS" => servant.IceD_opLDoubleSAsync(request, current),
                "opKDoubleS" => servant.IceD_opKDoubleSAsync(request, current),
                "opQDoubleS" => servant.IceD_opQDoubleSAsync(request, current),
                "opSDoubleS" => servant.IceD_opSDoubleSAsync(request, current),
                "opCDoubleS" => servant.IceD_opCDoubleSAsync(request, current),
                "opAStringS" => servant.IceD_opAStringSAsync(request, current),
                "opLStringS" => servant.IceD_opLStringSAsync(request, current),
                "opKStringS" => servant.IceD_opKStringSAsync(request, current),
                "opQStringS" => servant.IceD_opQStringSAsync(request, current),
                "opSStringS" => servant.IceD_opSStringSAsync(request, current),
                "opCStringS" => servant.IceD_opCStringSAsync(request, current),
                "opAObjectS" => servant.IceD_opAObjectSAsync(request, current),
                "opLObjectS" => servant.IceD_opLObjectSAsync(request, current),
                "opCObjectS" => servant.IceD_opCObjectSAsync(request, current),
                "opAObjectPrxS" => servant.IceD_opAObjectPrxSAsync(request, current),
                "opLObjectPrxS" => servant.IceD_opLObjectPrxSAsync(request, current),
                "opKObjectPrxS" => servant.IceD_opKObjectPrxSAsync(request, current),
                "opQObjectPrxS" => servant.IceD_opQObjectPrxSAsync(request, current),
                "opSObjectPrxS" => servant.IceD_opSObjectPrxSAsync(request, current),
                "opCObjectPrxS" => servant.IceD_opCObjectPrxSAsync(request, current),
                "opAStructS" => servant.IceD_opAStructSAsync(request, current),
                "opLStructS" => servant.IceD_opLStructSAsync(request, current),
                "opKStructS" => servant.IceD_opKStructSAsync(request, current),
                "opQStructS" => servant.IceD_opQStructSAsync(request, current),
                "opSStructS" => servant.IceD_opSStructSAsync(request, current),
                "opCStructS" => servant.IceD_opCStructSAsync(request, current),
                "opAStructSD" => servant.IceD_opAStructSDAsync(request, current),
                "opLStructSD" => servant.IceD_opLStructSDAsync(request, current),
                "opKStructSD" => servant.IceD_opKStructSDAsync(request, current),
                "opQStructSD" => servant.IceD_opQStructSDAsync(request, current),
                "opSStructSD" => servant.IceD_opSStructSDAsync(request, current),
                "opCStructSD" => servant.IceD_opCStructSDAsync(request, current),
                "opACVS" => servant.IceD_opACVSAsync(request, current),
                "opLCVS" => servant.IceD_opLCVSAsync(request, current),
                "opAIPrxS" => servant.IceD_opAIPrxSAsync(request, current),
                "opLIPrxS" => servant.IceD_opLIPrxSAsync(request, current),
                "opKIPrxS" => servant.IceD_opKIPrxSAsync(request, current),
                "opQIPrxS" => servant.IceD_opQIPrxSAsync(request, current),
                "opSIPrxS" => servant.IceD_opSIPrxSAsync(request, current),
                "opCIPrxS" => servant.IceD_opCIPrxSAsync(request, current),
                "opCCRS" => servant.IceD_opCCRSAsync(request, current),
                "opAEnS" => servant.IceD_opAEnSAsync(request, current),
                "opLEnS" => servant.IceD_opLEnSAsync(request, current),
                "opKEnS" => servant.IceD_opKEnSAsync(request, current),
                "opQEnS" => servant.IceD_opQEnSAsync(request, current),
                "opSEnS" => servant.IceD_opSEnSAsync(request, current),
                "opCEnS" => servant.IceD_opCEnSAsync(request, current),
                "opCustomIntS" => servant.IceD_opCustomIntSAsync(request, current),
                "opCustomCVS" => servant.IceD_opCustomCVSAsync(request, current),
                "opCustomIntSS" => servant.IceD_opCustomIntSSAsync(request, current),
                "opCustomCVSS" => servant.IceD_opCustomCVSSAsync(request, current),
                "ice_id" => servant.IceD_ice_idAsync(request, current),
                "ice_ids" => servant.IceD_ice_idsAsync(request, current),
                "ice_isA" => servant.IceD_ice_isAAsync(request, current),
                "ice_ping" => servant.IceD_ice_pingAsync(request, current),
                _ => throw new ZeroC.Ice.OperationNotExistException(current.Identity, current.Facet, current.Operation)
            };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_shutdownAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            request.ReadEmptyParamList();
            await this.ShutdownAsync(current).ConfigureAwait(false);
            return ZeroC.Ice.OutgoingResponseFrame.WithVoidReturnValue(current);
        }

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opAByteSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, ZeroC.Ice.InputStream.IceReaderIntoByteArray);
            var result = await this.OpAByteSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpAByteSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.ReadOnlyMemory<byte> R1, global::System.ReadOnlyMemory<byte> R2)> _iceD_OpAByteSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.ReadOnlyMemory<byte> R1, global::System.ReadOnlyMemory<byte> R2) value) =>
        {
            ostr.WriteSequence(value.R1.Span);
            ostr.WriteSequence(value.R2.Span);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLByteSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LByteSHelper.IceReader);
            var result = await this.OpLByteSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLByteSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2)> _iceD_OpLByteSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2) value) =>
        {
            LByteSHelper.Write(ostr, value.R1);
            LByteSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKByteSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KByteSHelper.IceReader);
            var result = await this.OpKByteSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKByteSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2)> _iceD_OpKByteSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2) value) =>
        {
            KByteSHelper.Write(ostr, value.R1);
            KByteSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQByteSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QByteSHelper.IceReader);
            var result = await this.OpQByteSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQByteSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2)> _iceD_OpQByteSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2) value) =>
        {
            QByteSHelper.Write(ostr, value.R1);
            QByteSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSByteSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SByteSHelper.IceReader);
            var result = await this.OpSByteSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSByteSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2)> _iceD_OpSByteSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2) value) =>
        {
            SByteSHelper.Write(ostr, value.R1);
            SByteSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCByteSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CByteSHelper.IceReader);
            var result = await this.OpCByteSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCByteSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2)> _iceD_OpCByteSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<byte> R1, global::System.Collections.Generic.IEnumerable<byte> R2) value) =>
        {
            CByteSHelper.Write(ostr, value.R1);
            CByteSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opABoolSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, ZeroC.Ice.InputStream.IceReaderIntoBoolArray);
            var result = await this.OpABoolSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpABoolSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.ReadOnlyMemory<bool> R1, global::System.ReadOnlyMemory<bool> R2)> _iceD_OpABoolSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.ReadOnlyMemory<bool> R1, global::System.ReadOnlyMemory<bool> R2) value) =>
        {
            ostr.WriteSequence(value.R1.Span);
            ostr.WriteSequence(value.R2.Span);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLBoolSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LBoolSHelper.IceReader);
            var result = await this.OpLBoolSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLBoolSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2)> _iceD_OpLBoolSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2) value) =>
        {
            LBoolSHelper.Write(ostr, value.R1);
            LBoolSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKBoolSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KBoolSHelper.IceReader);
            var result = await this.OpKBoolSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKBoolSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2)> _iceD_OpKBoolSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2) value) =>
        {
            KBoolSHelper.Write(ostr, value.R1);
            KBoolSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQBoolSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QBoolSHelper.IceReader);
            var result = await this.OpQBoolSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQBoolSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2)> _iceD_OpQBoolSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2) value) =>
        {
            QBoolSHelper.Write(ostr, value.R1);
            QBoolSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSBoolSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SBoolSHelper.IceReader);
            var result = await this.OpSBoolSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSBoolSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2)> _iceD_OpSBoolSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2) value) =>
        {
            SBoolSHelper.Write(ostr, value.R1);
            SBoolSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCBoolSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CBoolSHelper.IceReader);
            var result = await this.OpCBoolSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCBoolSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2)> _iceD_OpCBoolSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<bool> R1, global::System.Collections.Generic.IEnumerable<bool> R2) value) =>
        {
            CBoolSHelper.Write(ostr, value.R1);
            CBoolSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opAShortSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, ZeroC.Ice.InputStream.IceReaderIntoShortArray);
            var result = await this.OpAShortSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpAShortSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.ReadOnlyMemory<short> R1, global::System.ReadOnlyMemory<short> R2)> _iceD_OpAShortSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.ReadOnlyMemory<short> R1, global::System.ReadOnlyMemory<short> R2) value) =>
        {
            ostr.WriteSequence(value.R1.Span);
            ostr.WriteSequence(value.R2.Span);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLShortSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LShortSHelper.IceReader);
            var result = await this.OpLShortSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLShortSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2)> _iceD_OpLShortSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2) value) =>
        {
            LShortSHelper.Write(ostr, value.R1);
            LShortSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKShortSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KShortSHelper.IceReader);
            var result = await this.OpKShortSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKShortSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2)> _iceD_OpKShortSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2) value) =>
        {
            KShortSHelper.Write(ostr, value.R1);
            KShortSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQShortSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QShortSHelper.IceReader);
            var result = await this.OpQShortSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQShortSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2)> _iceD_OpQShortSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2) value) =>
        {
            QShortSHelper.Write(ostr, value.R1);
            QShortSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSShortSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SShortSHelper.IceReader);
            var result = await this.OpSShortSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSShortSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2)> _iceD_OpSShortSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2) value) =>
        {
            SShortSHelper.Write(ostr, value.R1);
            SShortSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCShortSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CShortSHelper.IceReader);
            var result = await this.OpCShortSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCShortSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2)> _iceD_OpCShortSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<short> R1, global::System.Collections.Generic.IEnumerable<short> R2) value) =>
        {
            CShortSHelper.Write(ostr, value.R1);
            CShortSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opAIntSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, ZeroC.Ice.InputStream.IceReaderIntoIntArray);
            var result = await this.OpAIntSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpAIntSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.ReadOnlyMemory<int> R1, global::System.ReadOnlyMemory<int> R2)> _iceD_OpAIntSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.ReadOnlyMemory<int> R1, global::System.ReadOnlyMemory<int> R2) value) =>
        {
            ostr.WriteSequence(value.R1.Span);
            ostr.WriteSequence(value.R2.Span);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLIntSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LIntSHelper.IceReader);
            var result = await this.OpLIntSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLIntSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2)> _iceD_OpLIntSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2) value) =>
        {
            LIntSHelper.Write(ostr, value.R1);
            LIntSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKIntSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KIntSHelper.IceReader);
            var result = await this.OpKIntSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKIntSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2)> _iceD_OpKIntSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2) value) =>
        {
            KIntSHelper.Write(ostr, value.R1);
            KIntSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQIntSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QIntSHelper.IceReader);
            var result = await this.OpQIntSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQIntSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2)> _iceD_OpQIntSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2) value) =>
        {
            QIntSHelper.Write(ostr, value.R1);
            QIntSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSIntSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SIntSHelper.IceReader);
            var result = await this.OpSIntSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSIntSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2)> _iceD_OpSIntSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2) value) =>
        {
            SIntSHelper.Write(ostr, value.R1);
            SIntSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCIntSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CIntSHelper.IceReader);
            var result = await this.OpCIntSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCIntSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2)> _iceD_OpCIntSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2) value) =>
        {
            CIntSHelper.Write(ostr, value.R1);
            CIntSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opALongSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, ZeroC.Ice.InputStream.IceReaderIntoLongArray);
            var result = await this.OpALongSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpALongSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.ReadOnlyMemory<long> R1, global::System.ReadOnlyMemory<long> R2)> _iceD_OpALongSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.ReadOnlyMemory<long> R1, global::System.ReadOnlyMemory<long> R2) value) =>
        {
            ostr.WriteSequence(value.R1.Span);
            ostr.WriteSequence(value.R2.Span);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLLongSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LLongSHelper.IceReader);
            var result = await this.OpLLongSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLLongSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2)> _iceD_OpLLongSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2) value) =>
        {
            LLongSHelper.Write(ostr, value.R1);
            LLongSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKLongSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KLongSHelper.IceReader);
            var result = await this.OpKLongSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKLongSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2)> _iceD_OpKLongSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2) value) =>
        {
            KLongSHelper.Write(ostr, value.R1);
            KLongSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQLongSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QLongSHelper.IceReader);
            var result = await this.OpQLongSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQLongSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2)> _iceD_OpQLongSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2) value) =>
        {
            QLongSHelper.Write(ostr, value.R1);
            QLongSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSLongSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SLongSHelper.IceReader);
            var result = await this.OpSLongSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSLongSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2)> _iceD_OpSLongSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2) value) =>
        {
            SLongSHelper.Write(ostr, value.R1);
            SLongSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCLongSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CLongSHelper.IceReader);
            var result = await this.OpCLongSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCLongSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2)> _iceD_OpCLongSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<long> R1, global::System.Collections.Generic.IEnumerable<long> R2) value) =>
        {
            CLongSHelper.Write(ostr, value.R1);
            CLongSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opAFloatSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, ZeroC.Ice.InputStream.IceReaderIntoFloatArray);
            var result = await this.OpAFloatSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpAFloatSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.ReadOnlyMemory<float> R1, global::System.ReadOnlyMemory<float> R2)> _iceD_OpAFloatSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.ReadOnlyMemory<float> R1, global::System.ReadOnlyMemory<float> R2) value) =>
        {
            ostr.WriteSequence(value.R1.Span);
            ostr.WriteSequence(value.R2.Span);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLFloatSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LFloatSHelper.IceReader);
            var result = await this.OpLFloatSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLFloatSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2)> _iceD_OpLFloatSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2) value) =>
        {
            LFloatSHelper.Write(ostr, value.R1);
            LFloatSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKFloatSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KFloatSHelper.IceReader);
            var result = await this.OpKFloatSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKFloatSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2)> _iceD_OpKFloatSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2) value) =>
        {
            KFloatSHelper.Write(ostr, value.R1);
            KFloatSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQFloatSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QFloatSHelper.IceReader);
            var result = await this.OpQFloatSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQFloatSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2)> _iceD_OpQFloatSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2) value) =>
        {
            QFloatSHelper.Write(ostr, value.R1);
            QFloatSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSFloatSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SFloatSHelper.IceReader);
            var result = await this.OpSFloatSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSFloatSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2)> _iceD_OpSFloatSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2) value) =>
        {
            SFloatSHelper.Write(ostr, value.R1);
            SFloatSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCFloatSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CFloatSHelper.IceReader);
            var result = await this.OpCFloatSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCFloatSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2)> _iceD_OpCFloatSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<float> R1, global::System.Collections.Generic.IEnumerable<float> R2) value) =>
        {
            CFloatSHelper.Write(ostr, value.R1);
            CFloatSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opADoubleSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, ZeroC.Ice.InputStream.IceReaderIntoDoubleArray);
            var result = await this.OpADoubleSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpADoubleSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.ReadOnlyMemory<double> R1, global::System.ReadOnlyMemory<double> R2)> _iceD_OpADoubleSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.ReadOnlyMemory<double> R1, global::System.ReadOnlyMemory<double> R2) value) =>
        {
            ostr.WriteSequence(value.R1.Span);
            ostr.WriteSequence(value.R2.Span);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLDoubleSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LDoubleSHelper.IceReader);
            var result = await this.OpLDoubleSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLDoubleSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2)> _iceD_OpLDoubleSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2) value) =>
        {
            LDoubleSHelper.Write(ostr, value.R1);
            LDoubleSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKDoubleSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KDoubleSHelper.IceReader);
            var result = await this.OpKDoubleSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKDoubleSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2)> _iceD_OpKDoubleSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2) value) =>
        {
            KDoubleSHelper.Write(ostr, value.R1);
            KDoubleSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQDoubleSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QDoubleSHelper.IceReader);
            var result = await this.OpQDoubleSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQDoubleSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2)> _iceD_OpQDoubleSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2) value) =>
        {
            QDoubleSHelper.Write(ostr, value.R1);
            QDoubleSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSDoubleSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SDoubleSHelper.IceReader);
            var result = await this.OpSDoubleSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSDoubleSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2)> _iceD_OpSDoubleSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2) value) =>
        {
            SDoubleSHelper.Write(ostr, value.R1);
            SDoubleSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCDoubleSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CDoubleSHelper.IceReader);
            var result = await this.OpCDoubleSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCDoubleSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2)> _iceD_OpCDoubleSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<double> R1, global::System.Collections.Generic.IEnumerable<double> R2) value) =>
        {
            CDoubleSHelper.Write(ostr, value.R1);
            CDoubleSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opAStringSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, AStringSHelper.IceReader);
            var result = await this.OpAStringSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpAStringSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2)> _iceD_OpAStringSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2) value) =>
        {
            AStringSHelper.Write(ostr, value.R1);
            AStringSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLStringSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LStringSHelper.IceReader);
            var result = await this.OpLStringSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLStringSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2)> _iceD_OpLStringSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2) value) =>
        {
            LStringSHelper.Write(ostr, value.R1);
            LStringSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKStringSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KStringSHelper.IceReader);
            var result = await this.OpKStringSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKStringSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2)> _iceD_OpKStringSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2) value) =>
        {
            KStringSHelper.Write(ostr, value.R1);
            LStringSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQStringSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QStringSHelper.IceReader);
            var result = await this.OpQStringSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQStringSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2)> _iceD_OpQStringSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2) value) =>
        {
            QStringSHelper.Write(ostr, value.R1);
            QStringSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSStringSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SStringSHelper.IceReader);
            var result = await this.OpSStringSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSStringSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2)> _iceD_OpSStringSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2) value) =>
        {
            SStringSHelper.Write(ostr, value.R1);
            SStringSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCStringSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CStringSHelper.IceReader);
            var result = await this.OpCStringSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCStringSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2)> _iceD_OpCStringSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<string> R1, global::System.Collections.Generic.IEnumerable<string> R2) value) =>
        {
            CStringSHelper.Write(ostr, value.R1);
            CStringSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opAObjectSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, AObjectSHelper.IceReader);
            var result = await this.OpAObjectSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpAObjectSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R2)> _iceD_OpAObjectSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R2) value) =>
        {
            AObjectSHelper.Write(ostr, value.R1);
            AObjectSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLObjectSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LObjectSHelper.IceReader);
            var result = await this.OpLObjectSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLObjectSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R2)> _iceD_OpLObjectSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R2) value) =>
        {
            LObjectSHelper.Write(ostr, value.R1);
            LObjectSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCObjectSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CObjectSHelper.IceReader);
            var result = await this.OpCObjectSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCObjectSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R2)> _iceD_OpCObjectSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.AnyClass?> R2) value) =>
        {
            CObjectSHelper.Write(ostr, value.R1);
            CObjectSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opAObjectPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, AObjectPrxSHelper.IceReader);
            var result = await this.OpAObjectPrxSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpAObjectPrxSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2)> _iceD_OpAObjectPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2) value) =>
        {
            AObjectPrxSHelper.Write(ostr, value.R1);
            AObjectPrxSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLObjectPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LObjectPrxSHelper.IceReader);
            var result = await this.OpLObjectPrxSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLObjectPrxSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2)> _iceD_OpLObjectPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2) value) =>
        {
            LObjectPrxSHelper.Write(ostr, value.R1);
            LObjectPrxSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKObjectPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KObjectPrxSHelper.IceReader);
            var result = await this.OpKObjectPrxSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKObjectPrxSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2)> _iceD_OpKObjectPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2) value) =>
        {
            KObjectPrxSHelper.Write(ostr, value.R1);
            KObjectPrxSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQObjectPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QObjectPrxSHelper.IceReader);
            var result = await this.OpQObjectPrxSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQObjectPrxSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2)> _iceD_OpQObjectPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2) value) =>
        {
            QObjectPrxSHelper.Write(ostr, value.R1);
            QObjectPrxSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSObjectPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SObjectPrxSHelper.IceReader);
            var result = await this.OpSObjectPrxSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSObjectPrxSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2)> _iceD_OpSObjectPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2) value) =>
        {
            SObjectPrxSHelper.Write(ostr, value.R1);
            SObjectPrxSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCObjectPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CObjectPrxSHelper.IceReader);
            var result = await this.OpCObjectPrxSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCObjectPrxSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2)> _iceD_OpCObjectPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.IObjectPrx?> R2) value) =>
        {
            CObjectPrxSHelper.Write(ostr, value.R1);
            CObjectPrxSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opAStructSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, AStructSHelper.IceReader);
            var result = await this.OpAStructSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpAStructSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2)> _iceD_OpAStructSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2) value) =>
        {
            AStructSHelper.Write(ostr, value.R1);
            AStructSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLStructSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LStructSHelper.IceReader);
            var result = await this.OpLStructSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLStructSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2)> _iceD_OpLStructSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2) value) =>
        {
            LStructSHelper.Write(ostr, value.R1);
            LStructSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKStructSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KStructSHelper.IceReader);
            var result = await this.OpKStructSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKStructSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2)> _iceD_OpKStructSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2) value) =>
        {
            KStructSHelper.Write(ostr, value.R1);
            KStructSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQStructSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QStructSHelper.IceReader);
            var result = await this.OpQStructSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQStructSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2)> _iceD_OpQStructSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2) value) =>
        {
            QStructSHelper.Write(ostr, value.R1);
            QStructSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSStructSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SStructSHelper.IceReader);
            var result = await this.OpSStructSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSStructSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2)> _iceD_OpSStructSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2) value) =>
        {
            SStructSHelper.Write(ostr, value.R1);
            SStructSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCStructSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CStructSHelper.IceReader);
            var result = await this.OpCStructSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCStructSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2)> _iceD_OpCStructSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<S> R1, global::System.Collections.Generic.IEnumerable<S> R2) value) =>
        {
            CStructSHelper.Write(ostr, value.R1);
            CStructSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opAStructSDAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, AStructSDHelper.IceReader);
            var result = await this.OpAStructSDAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpAStructSDWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2)> _iceD_OpAStructSDWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2) value) =>
        {
            AStructSDHelper.Write(ostr, value.R1);
            AStructSDHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLStructSDAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LStructSDHelper.IceReader);
            var result = await this.OpLStructSDAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLStructSDWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2)> _iceD_OpLStructSDWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2) value) =>
        {
            LStructSDHelper.Write(ostr, value.R1);
            LStructSDHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKStructSDAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KStructSDHelper.IceReader);
            var result = await this.OpKStructSDAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKStructSDWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2)> _iceD_OpKStructSDWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2) value) =>
        {
            KStructSDHelper.Write(ostr, value.R1);
            KStructSDHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQStructSDAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QStructSDHelper.IceReader);
            var result = await this.OpQStructSDAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQStructSDWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2)> _iceD_OpQStructSDWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2) value) =>
        {
            QStructSDHelper.Write(ostr, value.R1);
            QStructSDHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSStructSDAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SStructSDHelper.IceReader);
            var result = await this.OpSStructSDAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSStructSDWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2)> _iceD_OpSStructSDWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2) value) =>
        {
            SStructSDHelper.Write(ostr, value.R1);
            SStructSDHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCStructSDAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CStructSDHelper.IceReader);
            var result = await this.OpCStructSDAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCStructSDWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2)> _iceD_OpCStructSDWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<SD> R1, global::System.Collections.Generic.IEnumerable<SD> R2) value) =>
        {
            CStructSDHelper.Write(ostr, value.R1);
            CStructSDHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opACVSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, ACVSHelper.IceReader);
            var result = await this.OpACVSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpACVSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<CV?> R1, global::System.Collections.Generic.IEnumerable<CV?> R2)> _iceD_OpACVSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<CV?> R1, global::System.Collections.Generic.IEnumerable<CV?> R2) value) =>
        {
            ACVSHelper.Write(ostr, value.R1);
            ACVSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLCVSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LCVSHelper.IceReader);
            var result = await this.OpLCVSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLCVSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<CV?> R1, global::System.Collections.Generic.IEnumerable<CV?> R2)> _iceD_OpLCVSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<CV?> R1, global::System.Collections.Generic.IEnumerable<CV?> R2) value) =>
        {
            LCVSHelper.Write(ostr, value.R1);
            LCVSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opAIPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, AIPrxSHelper.IceReader);
            var result = await this.OpAIPrxSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpAIPrxSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2)> _iceD_OpAIPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2) value) =>
        {
            AIPrxSHelper.Write(ostr, value.R1);
            AIPrxSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLIPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LIPrxSHelper.IceReader);
            var result = await this.OpLIPrxSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLIPrxSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2)> _iceD_OpLIPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2) value) =>
        {
            LIPrxSHelper.Write(ostr, value.R1);
            LIPrxSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKIPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KIPrxSHelper.IceReader);
            var result = await this.OpKIPrxSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKIPrxSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2)> _iceD_OpKIPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2) value) =>
        {
            KIPrxSHelper.Write(ostr, value.R1);
            KIPrxSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQIPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QIPrxSHelper.IceReader);
            var result = await this.OpQIPrxSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQIPrxSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2)> _iceD_OpQIPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2) value) =>
        {
            QIPrxSHelper.Write(ostr, value.R1);
            QIPrxSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSIPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SIPrxSHelper.IceReader);
            var result = await this.OpSIPrxSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSIPrxSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2)> _iceD_OpSIPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2) value) =>
        {
            SIPrxSHelper.Write(ostr, value.R1);
            SIPrxSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCIPrxSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CIPrxSHelper.IceReader);
            var result = await this.OpCIPrxSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCIPrxSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2)> _iceD_OpCIPrxSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<IIPrx?> R1, global::System.Collections.Generic.IEnumerable<IIPrx?> R2) value) =>
        {
            CIPrxSHelper.Write(ostr, value.R1);
            CIPrxSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCCRSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CCRSHelper.IceReader);
            var result = await this.OpCCRSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCCRSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<CR?> R1, global::System.Collections.Generic.IEnumerable<CR?> R2)> _iceD_OpCCRSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<CR?> R1, global::System.Collections.Generic.IEnumerable<CR?> R2) value) =>
        {
            CCRSHelper.Write(ostr, value.R1);
            CCRSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opAEnSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, AEnSHelper.IceReader);
            var result = await this.OpAEnSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpAEnSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2)> _iceD_OpAEnSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2) value) =>
        {
            AEnSHelper.Write(ostr, value.R1);
            AEnSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opLEnSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, LEnSHelper.IceReader);
            var result = await this.OpLEnSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpLEnSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2)> _iceD_OpLEnSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2) value) =>
        {
            LEnSHelper.Write(ostr, value.R1);
            LEnSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opKEnSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, KEnSHelper.IceReader);
            var result = await this.OpKEnSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpKEnSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2)> _iceD_OpKEnSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2) value) =>
        {
            KEnSHelper.Write(ostr, value.R1);
            KEnSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opQEnSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, QEnSHelper.IceReader);
            var result = await this.OpQEnSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpQEnSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2)> _iceD_OpQEnSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2) value) =>
        {
            QEnSHelper.Write(ostr, value.R1);
            QEnSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opSEnSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, SEnSHelper.IceReader);
            var result = await this.OpSEnSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpSEnSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2)> _iceD_OpSEnSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2) value) =>
        {
            SEnSHelper.Write(ostr, value.R1);
            SEnSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCEnSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CEnSHelper.IceReader);
            var result = await this.OpCEnSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCEnSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2)> _iceD_OpCEnSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<En> R1, global::System.Collections.Generic.IEnumerable<En> R2) value) =>
        {
            CEnSHelper.Write(ostr, value.R1);
            CEnSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCustomIntSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CustomIntSHelper.IceReader);
            var result = await this.OpCustomIntSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCustomIntSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2)> _iceD_OpCustomIntSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<int> R1, global::System.Collections.Generic.IEnumerable<int> R2) value) =>
        {
            CustomIntSHelper.Write(ostr, value.R1);
            CustomIntSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCustomCVSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CustomCVSHelper.IceReader);
            var result = await this.OpCustomCVSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCustomCVSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<CV?> R1, global::System.Collections.Generic.IEnumerable<CV?> R2)> _iceD_OpCustomCVSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<CV?> R1, global::System.Collections.Generic.IEnumerable<CV?> R2) value) =>
        {
            CustomCVSHelper.Write(ostr, value.R1);
            CustomCVSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCustomIntSSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CustomIntSSHelper.IceReader);
            var result = await this.OpCustomIntSSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCustomIntSSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> R2)> _iceD_OpCustomIntSSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<int>> R2) value) =>
        {
            CustomIntSSHelper.Write(ostr, value.R1);
            CustomIntSSHelper.Write(ostr, value.R2);
        };

        protected async global::System.Threading.Tasks.ValueTask<ZeroC.Ice.OutgoingResponseFrame> IceD_opCustomCVSSAsync(ZeroC.Ice.IncomingRequestFrame request, ZeroC.Ice.Current current)
        {
            IceCheckNonIdempotent(current);
            var iceP_i = request.ReadParamList(current.Communicator, CustomCVSSHelper.IceReader);
            var result = await this.OpCustomCVSSAsync(iceP_i, current).ConfigureAwait(false);
            var response = ZeroC.Ice.OutgoingResponseFrame.WithReturnValue(current, compress: false, format: default, result, _iceD_OpCustomCVSSWriter);
            return response;
        }

        private static readonly ZeroC.Ice.OutputStreamValueWriter<(global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> R2)> _iceD_OpCustomCVSSWriter = (ZeroC.Ice.OutputStream ostr, in (global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> R1, global::System.Collections.Generic.IEnumerable<global::ZeroC.Ice.Test.SeqMapping.Custom<CV?>> R2) value) =>
        {
            CustomCVSSHelper.Write(ostr, value.R1);
            CustomCVSSHelper.Write(ostr, value.R2);
        };
    }
}

namespace ZeroC.Ice.ClassFactory.ZeroC.Ice.Test.SeqMapping
{
    public static class CV
    {
        public static global::ZeroC.Ice.AnyClass Create() =>
            new global::ZeroC.Ice.Test.SeqMapping.CV((global::ZeroC.Ice.InputStream?)null);
    }

    public static class CR
    {
        public static global::ZeroC.Ice.AnyClass Create() =>
            new global::ZeroC.Ice.Test.SeqMapping.CR((global::ZeroC.Ice.InputStream?)null);
    }
}
