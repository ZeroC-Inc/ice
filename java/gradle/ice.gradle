//
// Copyright (c) ZeroC, Inc. All rights reserved.
//

buildscript {
    //
    // If iceBuilderHome is set add its lib directory it to the local maven repositories
    // so we can build using a local plugin version
    //
    if (iceBuilderHome) {
        def builder  = new File([iceBuilderHome, "build", "libs"].join(File.separator))
        if(builder.exists()) {
            repositories {
                flatDir dirs: "file://${builder.getCanonicalPath()}"
            }
        }
    }

    if(new File("/usr/share/maven-repo").exists()){
        repositories {
            maven {
                url "file:///usr/share/maven-repo"
            }
        }
    }

    repositories {
        mavenCentral()

        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: "${iceBuilderClassPath}", name: 'slice', version: "${iceBuilderVersion}"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:6.25.0"
    }
}

apply plugin: com.zeroc.gradle.icebuilder.slice.SlicePlugin
apply plugin: com.diffplug.gradle.spotless.SpotlessPlugin

slice {
    cppConfiguration = project.cppConfiguration
    cppPlatform = project.cppPlatform
    if(!System.env.ICE_BIN_DIST?.split(" ").find{ it == 'all' || it.contains('java')}) {
        iceHome =  project.hasProperty('iceHome') ? project.iceHome
            : System.getenv("ICE_HOME") != null ? System.env.ICE_HOME : new File(project.ext.topSrcDir).getCanonicalPath()
    }
}

spotless {
  format 'misc', {
    // define the files to apply `misc` to
    target '*.java', '*.gradle'

    // define the steps to apply to those files
    trimTrailingWhitespace()
    endWithNewline()
  }

  java {
    toggleOffOn()

    target project.fileTree("src/main/java") {
        include '**/*.java'
        exclude 'com/zeroc/Ice/PropertyNames.java'
    }

    // Remove any unused imports, then ensure the remaining imports are correctly ordered.
    removeUnusedImports()

    // Linting
    cleanthat()

    // We use google-java-format to format our Java code. We also set reorderImports and formatJavadoc to true to
    // match the default behavior of the google-java-format tool.
    // When updating the versio be sure to update the version in `.vscode/settings.json` as well.
    googleJavaFormat("1.24.0").aosp().reorderImports(true).formatJavadoc(true)
    formatAnnotations()
  }
}

// Run spotlessApply before compiling Java code
// compileJava.dependsOn 'spotlessApply'

// Android does not have a compileJava task
if(!(project.hasProperty('android') && project.android.sourceSets)) {
    compileJava {
        // Set the target release using the --release option
        options.compilerArgs.addAll(['--release', "${targetJavaRelease}"])
        options.debug = debug
    }
}

// Determine the name of the Slice-to-Java translator
def isWindows = System.properties['os.name'].toLowerCase().contains('windows')

// If the prefix isn't set use these default locations.
if(!prefix) {
    def prefixVersion = iceVersion
    if(prefixVersion.indexOf(".0-alpha")){
        prefixVersion = prefixVersion.replace(".0-alpha", "a")
    } else if(prefixVersion.indexOf(".0-beta")){
        prefixVersion = prefixVersion.replace(".0-beta", "b")
    }
    if(isWindows) {
        prefix = "C:\\Ice-${prefixVersion}"
    } else {
        prefix = "/opt/Ice-${prefixVersion}"
    }
}

// Installation location for jar/pom & executables.
//
// Note that we exclude /usr/src/packages because it's the RPM build directory on SLES.
//
if((prefix.startsWith("/usr") || prefix.startsWith("/usr/local")) && !prefix.startsWith("/usr/src/packages")) {
    ext.jarDir = prefix + "/share/java"
    ext.binDir = prefix + "/bin"
} else {
    ext.jarDir = prefix + "/lib"
    ext.binDir = prefix + "/bin"
}

ext.libDir = "$rootProject.projectDir/lib"

// Used for the tests
ext.localDependency = { artifactId ->
    def useBinDist = System.env.ICE_BIN_DIST?.split(" ").find{ it == 'all' || it.contains('java')}
    if(useBinDist) {
        return "com.zeroc:${artifactId}:${project.version}"
    } else {
        return project(":${artifactId}")
    }
}
