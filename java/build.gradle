//
// Copyright (c) ZeroC, Inc. All rights reserved.
//

subprojects {
    project.ext.topSrcDir = "$rootProject.projectDir/.."

    project.version = iceVersion
    project.group = "com.zeroc"

    apply plugin: 'java'
    apply plugin: 'idea'
    apply from: "$rootProject.projectDir/gradle/ice.gradle"

    repositories {
        if(this.devRepo) {
            maven {
                url this.devRepo
            }
        }
        mavenCentral()
    }

    java {
        modularity.inferModulePath = true
        // The corresponding -source and -target javac options are suppressed by gradle when
        // --release is set through options.compileArgs (see above).
        sourceCompatibility = "1.${targetJavaRelease}"
        targetCompatibility = "1.${targetJavaRelease}"
    }

    jar {
        manifest {
            attributes("Built-By": "ZeroC, Inc.")
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:-options"
        options.encoding = "UTF-8"
        options.deprecation = true
    }

    idea.module {
        excludeDirs -= file(buildDir)
        buildDir.listFiles({d, f ->f != 'generated-src'} as FilenameFilter).each { excludeDirs += it }
    }
}

if(!System.env.ICE_BIN_DIST?.split(" ").find{ it == 'all' || it.contains('java')}) {
    def exportedProjects = [
        ":glacier2",
        ":ice",
        ":icebox",
        ":icebt",
        ":icegrid",
        ":icessl",
        ":icestorm"
    ]

    task alljavadoc(type: Javadoc) {
        enabled = true
        source exportedProjects.collect { project(it).javadoc.source }
        classpath = files(exportedProjects.collect { project(it).javadoc.classpath })
        exclude "**/module-info.java"
        destinationDir = file("${buildDir}/docs/javadoc")
        options.addBooleanOption('html5', true)
        options.header = 'Ice for Java'
        options.docTitle = "Ice ${iceVersion} API Reference"
        options.addBooleanOption('-no-module-directories', true)
        
    }

    alljavadoc.dependsOn = exportedProjects.collect { project(it).javadoc.dependsOn }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

if(!System.env.ICE_BIN_DIST?.split(" ").find{ it == 'all' || it.contains('java')}) {
    task dist()
    dist.dependsOn(project(":ice").assemble)
    dist.dependsOn(project(":icessl").assemble)
    dist.dependsOn(project(":glacier2").assemble)
    dist.dependsOn(project(":icegrid").assemble)
    dist.dependsOn(project(":icebox").assemble)
    dist.dependsOn(project(":icebt").assemble)
    dist.dependsOn(project(":icediscovery").assemble)
    dist.dependsOn(project(":icelocatordiscovery").assemble)
    dist.dependsOn(project(":icestorm").assemble)
    dist.dependsOn(project(":IceGridGUI").assemble)

    project(":test").compileJava.dependsOn(dist)
}
