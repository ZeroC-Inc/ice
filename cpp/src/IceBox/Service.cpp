//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.8.50
//
// <auto-generated>
//
// Generated from file `IceBox.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ICEBOX_API_EXPORTS
#   define ICEBOX_API_EXPORTS
#endif
#include <IceBox/Service.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif



#ifdef ICE_CPP11_MAPPING // C++11 mapping

IceBox::FailureException::~FailureException()
{
}

const ::std::string&
IceBox::FailureException::ice_staticId()
{
    static const ::std::string typeId = "::IceBox::FailureException";
    return typeId;
}

IceBox::Service::~Service()
{
}

#else // C++98 mapping

IceBox::FailureException::FailureException(const char* file, int line) :
    ::Ice::LocalException(file, line)
{
}

IceBox::FailureException::FailureException(const char* file, int line, const ::std::string& reason) :
    ::Ice::LocalException(file, line),
    reason(reason)
{
}

IceBox::FailureException::~FailureException()
{
}

::std::string
IceBox::FailureException::ice_id() const
{
    return "::IceBox::FailureException";
}

IceBox::FailureException*
IceBox::FailureException::ice_clone() const
{
    return new FailureException(*this);
}

void
IceBox::FailureException::ice_throw() const
{
    throw *this;
}

IceBox::Service::~Service()
{
}

/// \cond INTERNAL
ICEBOX_API ::Ice::LocalObject* IceBox::upCast(Service* p) { return p; }
/// \endcond

#endif
