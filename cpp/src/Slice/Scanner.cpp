#line 1 "src/Slice/Scanner.cpp"
//
// Copyright (c) ZeroC, Inc. All rights reserved.
//

#include <IceUtil/ScannerConfig.h>

#line 8 "src/Slice/Scanner.cpp"

#define  YY_INT_ALIGNED long int

/* A lexical scanner generated by flex */

#define yy_create_buffer slice__create_buffer
#define yy_delete_buffer slice__delete_buffer
#define yy_scan_buffer slice__scan_buffer
#define yy_scan_string slice__scan_string
#define yy_scan_bytes slice__scan_bytes
#define yy_init_buffer slice__init_buffer
#define yy_flush_buffer slice__flush_buffer
#define yy_load_buffer_state slice__load_buffer_state
#define yy_switch_to_buffer slice__switch_to_buffer
#define yypush_buffer_state slice_push_buffer_state
#define yypop_buffer_state slice_pop_buffer_state
#define yyensure_buffer_stack slice_ensure_buffer_stack
#define yy_flex_debug slice__flex_debug
#define yyin slice_in
#define yyleng slice_leng
#define yylex slice_lex
#define yylineno slice_lineno
#define yyout slice_out
#define yyrestart slice_restart
#define yytext slice_text
#define yywrap slice_wrap
#define yyalloc slice_alloc
#define yyrealloc slice_realloc
#define yyfree slice_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define slice__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer slice__create_buffer
#endif

#ifdef yy_delete_buffer
#define slice__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer slice__delete_buffer
#endif

#ifdef yy_scan_buffer
#define slice__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer slice__scan_buffer
#endif

#ifdef yy_scan_string
#define slice__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string slice__scan_string
#endif

#ifdef yy_scan_bytes
#define slice__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes slice__scan_bytes
#endif

#ifdef yy_init_buffer
#define slice__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer slice__init_buffer
#endif

#ifdef yy_flush_buffer
#define slice__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer slice__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define slice__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state slice__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define slice__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer slice__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define slice_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state slice_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define slice_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state slice_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define slice_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack slice_ensure_buffer_stack
#endif

#ifdef yylex
#define slice_lex_ALREADY_DEFINED
#else
#define yylex slice_lex
#endif

#ifdef yyrestart
#define slice_restart_ALREADY_DEFINED
#else
#define yyrestart slice_restart
#endif

#ifdef yylex_init
#define slice_lex_init_ALREADY_DEFINED
#else
#define yylex_init slice_lex_init
#endif

#ifdef yylex_init_extra
#define slice_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra slice_lex_init_extra
#endif

#ifdef yylex_destroy
#define slice_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy slice_lex_destroy
#endif

#ifdef yyget_debug
#define slice_get_debug_ALREADY_DEFINED
#else
#define yyget_debug slice_get_debug
#endif

#ifdef yyset_debug
#define slice_set_debug_ALREADY_DEFINED
#else
#define yyset_debug slice_set_debug
#endif

#ifdef yyget_extra
#define slice_get_extra_ALREADY_DEFINED
#else
#define yyget_extra slice_get_extra
#endif

#ifdef yyset_extra
#define slice_set_extra_ALREADY_DEFINED
#else
#define yyset_extra slice_set_extra
#endif

#ifdef yyget_in
#define slice_get_in_ALREADY_DEFINED
#else
#define yyget_in slice_get_in
#endif

#ifdef yyset_in
#define slice_set_in_ALREADY_DEFINED
#else
#define yyset_in slice_set_in
#endif

#ifdef yyget_out
#define slice_get_out_ALREADY_DEFINED
#else
#define yyget_out slice_get_out
#endif

#ifdef yyset_out
#define slice_set_out_ALREADY_DEFINED
#else
#define yyset_out slice_set_out
#endif

#ifdef yyget_leng
#define slice_get_leng_ALREADY_DEFINED
#else
#define yyget_leng slice_get_leng
#endif

#ifdef yyget_text
#define slice_get_text_ALREADY_DEFINED
#else
#define yyget_text slice_get_text
#endif

#ifdef yyget_lineno
#define slice_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno slice_get_lineno
#endif

#ifdef yyset_lineno
#define slice_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno slice_set_lineno
#endif

#ifdef yywrap
#define slice_wrap_ALREADY_DEFINED
#else
#define yywrap slice_wrap
#endif

#ifdef yyalloc
#define slice_alloc_ALREADY_DEFINED
#else
#define yyalloc slice_alloc
#endif

#ifdef yyrealloc
#define slice_realloc_ALREADY_DEFINED
#else
#define yyrealloc slice_realloc
#endif

#ifdef yyfree
#define slice_free_ALREADY_DEFINED
#else
#define yyfree slice_free
#endif

#ifdef yytext
#define slice_text_ALREADY_DEFINED
#else
#define yytext slice_text
#endif

#ifdef yyleng
#define slice_leng_ALREADY_DEFINED
#else
#define yyleng slice_leng
#endif

#ifdef yyin
#define slice_in_ALREADY_DEFINED
#else
#define yyin slice_in
#endif

#ifdef yyout
#define slice_out_ALREADY_DEFINED
#else
#define yyout slice_out
#endif

#ifdef yy_flex_debug
#define slice__flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug slice__flex_debug
#endif

#ifdef yylineno
#define slice_lineno_ALREADY_DEFINED
#else
#define yylineno slice_lineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define slice_wrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (int) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 44
#define YY_END_OF_BUFFER 45
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int32_t yy_accept[130] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       45,   42,   41,   39,   41,   43,   19,   43,   43,   43,
       37,   37,   43,   18,   13,   43,   14,   41,   41,    1,
       43,    5,   41,    6,   41,    5,   44,   11,   11,    9,
       11,   11,   10,   42,   34,   21,   21,   36,   44,   41,
        0,   37,   37,   38,    8,    7,   38,   37,    0,    0,
        0,    0,   17,   18,    0,   18,    0,   15,   18,   16,
       41,    1,    1,    3,    0,    0,    5,   11,   11,   12,
       21,   21,   35,   33,   22,   23,   26,   24,   32,   20,
       25,   31,   28,    0,   38,    7,    0,   38,   37,    0,

        0,   40,   26,   32,   32,   31,   31,   27,    0,   38,
        0,    0,   26,   32,   31,   27,    0,    4,    2,   32,
       31,    2,   32,   29,   32,   32,   32,   30,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    6,    6,    6,    9,   10,
        6,   11,   12,    6,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   17,   17,   18,   18,   19,    6,    6,
        6,    6,   20,    6,   21,   21,   21,   21,   22,   23,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   25,   24,   24,   24,   24,   24,
       26,   27,   28,    6,   29,    6,   30,   30,   21,   21,

       31,   32,   24,   24,   33,   24,   24,   34,   24,   35,
       24,   24,   24,   36,   24,   36,   37,   36,   24,   38,
       24,   24,    6,    6,    6,    6,    1,    6,    6,    6,
        6,    6,   39,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,   39,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,   40,    6,    6,    6,
       41,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,   42,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6
    } ;

static const YY_CHAR yy_meta[43] =
    {   0,
        1,    2,    3,    2,    2,    4,    1,    4,    4,    5,
        6,    4,    4,    4,    4,    7,    7,    7,    5,    4,
        8,    8,    8,    9,    9,    4,   10,    4,   11,    8,
        8,    8,    9,    9,    9,    9,    9,    9,   12,    4,
        4,    4
    } ;

static const flex_int32_t yy_base[146] =
    {   0,
        0,   41,    0,   42,   50,   55,   60,   65,   94,  121,
      160,  723,   70,  723,   75,  723,  723,   68,   74,   89,
      135,   89,  136,  172,  128,    0,  122,  108,  125,  129,
      104,    0,  113,  723,  133,    0,  723,    0,  137,  723,
      154,    0,  128,  723,  723,  160,  165,  723,  197,  166,
      162,    0,  179,  220,  723,    0,    0,  231,  203,    0,
      113,  182,  723,  261,  117,    0,    0,  723,    0,  723,
      203,  223,  256,  265,   99,   78,    0,    0,  282,  723,
      287,  179,  723,  723,  723,  723,   71,  723,  277,  723,
      723,  300,    0,  327,  723,    0,  238,  330,    0,  347,

       79,  723,   92,  347,    0,  370,    0,    0,  287,  343,
       95,   62,  723,  393,  416,  723,   74,  723,   43,  439,
      462,  486,  489,  723,  512,  535,  558,  723,  723,  596,
      608,  620,  631,  635,  646,  657,  668,  680,  692,  698,
      700,   69,   64,  702,  710
    } ;

static const flex_int32_t yy_def[146] =
    {   0,
      129,    1,    1,    1,  130,  130,  131,  131,  132,  132,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  133,  129,  134,  129,  129,  129,  129,
      129,  135,  129,  129,  129,  135,  129,  136,  136,  129,
      136,  136,  129,  129,  129,  137,  137,  129,  138,  129,
      129,   21,  129,  129,  129,  139,   54,  129,  129,  140,
      134,  129,  129,  133,  129,   64,  134,  129,   64,  129,
      129,  129,  129,  129,  129,  129,  135,  136,  136,  129,
      137,  137,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  141,  129,  129,  139,  129,  129,  140,  129,

      129,  129,  129,  129,  142,  129,  143,  144,  129,  129,
      145,  129,  129,  129,  129,  129,  145,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,    0,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129
    } ;

static const flex_int32_t yy_nxt[766] =
    {   0,
       12,   13,   14,   13,   15,   16,   17,   16,   16,   16,
       16,   18,   18,   19,   20,   21,   22,   22,   23,   16,
       24,   24,   24,   24,   24,   25,   26,   27,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   16,   16,
       16,   16,   28,   28,  122,   29,   29,  122,   30,   30,
       32,   33,   34,   33,   35,   32,   33,   34,   33,   35,
       38,   39,   40,   39,   41,   38,   39,   40,   39,   41,
       43,   50,  107,   50,   50,   43,   50,  105,   50,   50,
      118,   51,   31,   52,   53,   53,  103,  103,   37,   54,
       54,   54,  119,   37,   44,   33,   45,   33,   46,   55,

       48,  118,   57,   56,   53,   53,   53,  113,  113,   71,
       59,   50,   71,  112,   50,   72,   50,   50,  102,   59,
       49,   44,   33,   45,   33,   46,   71,   48,   50,   71,
       73,  101,   72,   73,   50,   61,   50,   50,   79,   67,
       79,   79,   80,   76,   74,   74,   74,   49,   57,   70,
       58,   58,   53,   68,   61,   79,   59,   79,   79,  129,
      129,   50,   75,   50,   81,   59,  129,   50,  129,   50,
       50,  129,   60,   62,   62,   62,   62,   54,   54,   54,
      129,   63,  129,   62,   62,   62,   62,   64,   64,   64,
       65,   63,   57,  129,   53,   53,   53,  129,   67,   84,

       59,  129,  129,   85,   71,   86,   50,   71,  129,   59,
       72,  129,   87,   87,   97,   97,   88,  129,   98,   98,
       98,   89,  129,   90,   73,  129,   91,   73,   91,  129,
      129,   91,   91,   92,   93,   54,   54,   54,   74,   74,
       74,   94,   95,  129,   57,  129,   58,   58,   53,  129,
       94,   95,   59,   98,   98,   98,   75,   73,  129,  129,
       73,   59,   62,   62,   62,   62,  100,  129,  129,  100,
       63,   74,   74,   74,  129,  129,   64,   64,   64,   65,
       74,   74,   74,   79,  129,   79,   79,   67,   50,   75,
       50,   81,  104,  104,  104,  129,  129,  104,  104,  104,

      105,  105,  110,  110,  110,  129,  104,  104,  104,  105,
      105,  105,  105,  105,  105,  106,  106,  106,  129,  129,
      106,  106,  106,  107,  107,  129,  129,  129,  129,  106,
      106,  106,  107,  107,  107,  107,  107,  107,  109,  109,
      129,  129,  110,  110,  110,   98,   98,   98,  100,  129,
      129,  100,   95,  111,  129,  129,  129,  129,  110,  110,
      110,   95,  114,  114,  114,   95,  129,  114,  114,  114,
      105,  105,  129,  129,   95,  129,  114,  114,  114,  105,
      105,  105,  105,  105,  105,  115,  115,  115,  129,  129,
      115,  115,  115,  107,  107,  129,  129,  129,  129,  115,

      115,  115,  107,  107,  107,  107,  107,  107,  120,  120,
      120,  129,  129,  120,  120,  120,  105,  105,  129,  129,
      129,  129,  120,  120,  120,  105,  105,  105,  105,  105,
      105,  121,  121,  121,  129,  129,  121,  121,  121,  107,
      107,  129,  129,  129,  129,  121,  121,  121,  107,  107,
      107,  107,  107,  107,  123,  123,  123,  129,  129,  123,
      123,  123,  105,  105,  129,  129,  129,  129,  123,  123,
      123,  105,  105,  105,  105,  105,  105,  124,  124,  124,
      129,  129,  124,  124,  124,  107,  107,  122,  129,  129,
      122,  124,  124,  124,  107,  107,  107,  107,  107,  107,

      129,   74,   74,   74,  125,  125,  125,  129,  129,  125,
      125,  125,  105,  105,  129,  129,  129,  129,  125,  125,
      125,  105,  105,  105,  105,  105,  105,  126,  126,  126,
      129,  129,  126,  126,  126,  105,  105,  129,  129,  129,
      129,  126,  126,  126,  105,  105,  105,  105,  105,  105,
      127,  127,  127,  129,  129,  127,  127,  127,  105,  105,
      129,  129,  129,  129,  127,  127,  127,  105,  105,  105,
      105,  105,  105,  128,  128,  128,  129,  129,  128,  128,
      128,  105,  105,  129,  129,  129,  129,  128,  128,  128,
      105,  105,  105,  105,  105,  105,   36,   36,   36,   36,

       36,   36,   36,   36,   36,   36,   36,   36,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   66,   66,  129,   66,  129,   66,   66,   66,
       66,   66,   69,   69,  129,   69,   77,  129,  129,   77,
       77,   77,   77,   77,   77,   77,   77,   78,   78,  129,
       78,   78,  129,   78,   78,   78,   78,   78,   78,   82,
      129,   82,   82,   82,   82,   82,   82,  129,   82,   82,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   96,   96,  129,   96,   96,   96,   96,   96,

       96,   96,   96,   96,   99,   99,  108,  108,  116,  116,
      117,  117,  129,  117,  117,  117,  117,  117,  117,  117,
      117,  117,   11,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129
    } ;

static const flex_int32_t yy_chk[766] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    4,  119,    2,    4,  119,    2,    4,
        5,    5,    5,    5,    5,    6,    6,    6,    6,    6,
        7,    7,    7,    7,    7,    8,    8,    8,    8,    8,
        7,   13,  143,   13,   13,    8,   15,  142,   15,   15,
      117,   18,    2,   18,   18,   18,   87,   87,    5,   19,
       19,   19,  112,    6,    9,    9,    9,    9,    9,   20,

        9,  111,   22,   20,   22,   22,   22,  103,  103,   28,
       22,   28,   28,  101,   33,   28,   33,   33,   76,   22,
        9,   10,   10,   10,   10,   10,   29,   10,   29,   29,
       30,   75,   29,   30,   35,   65,   35,   35,   39,   61,
       39,   39,   43,   31,   30,   30,   30,   10,   21,   27,
       21,   21,   21,   25,   23,   41,   21,   41,   41,   11,
        0,   46,   30,   46,   46,   21,   47,   50,   47,   50,
       50,    0,   21,   24,   24,   24,   24,   51,   51,   51,
       82,   24,   82,   62,   62,   62,   62,   24,   24,   24,
       24,   62,   53,    0,   53,   53,   53,    0,   24,   49,

       53,    0,    0,   49,   71,   49,   71,   71,    0,   53,
       71,    0,   49,   49,   59,   59,   49,    0,   59,   59,
       59,   49,    0,   49,   72,    0,   49,   72,   49,    0,
        0,   49,   49,   49,   49,   54,   54,   54,   72,   72,
       72,   54,   54,    0,   58,    0,   58,   58,   58,    0,
       54,   54,   58,   97,   97,   97,   72,   73,    0,    0,
       73,   58,   64,   64,   64,   64,   74,    0,    0,   74,
       64,   73,   73,   73,    0,    0,   64,   64,   64,   64,
       74,   74,   74,   79,    0,   79,   79,   64,   81,   73,
       81,   81,   89,   89,   89,    0,    0,   89,   89,   89,

       89,   89,  109,  109,  109,    0,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   92,   92,   92,    0,    0,
       92,   92,   92,   92,   92,    0,    0,    0,    0,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   94,   94,
        0,    0,   94,   94,   94,   98,   98,   98,  100,    0,
        0,  100,   98,  100,    0,    0,    0,    0,  110,  110,
      110,   98,  104,  104,  104,  110,    0,  104,  104,  104,
      104,  104,    0,    0,  110,    0,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  106,  106,  106,    0,    0,
      106,  106,  106,  106,  106,    0,    0,    0,    0,  106,

      106,  106,  106,  106,  106,  106,  106,  106,  114,  114,
      114,    0,    0,  114,  114,  114,  114,  114,    0,    0,
        0,    0,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  115,  115,  115,    0,    0,  115,  115,  115,  115,
      115,    0,    0,    0,    0,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  120,  120,  120,    0,    0,  120,
      120,  120,  120,  120,    0,    0,    0,    0,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  121,  121,  121,
        0,    0,  121,  121,  121,  121,  121,  122,    0,    0,
      122,  121,  121,  121,  121,  121,  121,  121,  121,  121,

        0,  122,  122,  122,  123,  123,  123,    0,    0,  123,
      123,  123,  123,  123,    0,    0,    0,    0,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  125,  125,  125,
        0,    0,  125,  125,  125,  125,  125,    0,    0,    0,
        0,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      126,  126,  126,    0,    0,  126,  126,  126,  126,  126,
        0,    0,    0,    0,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  127,  127,  127,    0,    0,  127,  127,
      127,  127,  127,    0,    0,    0,    0,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  130,  130,  130,  130,

      130,  130,  130,  130,  130,  130,  130,  130,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  133,  133,    0,  133,    0,  133,  133,  133,
      133,  133,  134,  134,    0,  134,  135,    0,    0,  135,
      135,  135,  135,  135,  135,  135,  135,  136,  136,    0,
      136,  136,    0,  136,  136,  136,  136,  136,  136,  137,
        0,  137,  137,  137,  137,  137,  137,    0,  137,  137,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  139,  139,    0,  139,  139,  139,  139,  139,

      139,  139,  139,  139,  140,  140,  141,  141,  144,  144,
      145,  145,    0,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "src/Slice/Scanner.l"

#line 12 "src/Slice/Scanner.l"

#include <Slice/GrammarUtil.h>  // Before Grammer.h, so that YYSTYPE is defined
#include <Slice/Grammar.h>
#include <IceUtil/InputUtil.h>

#include <iomanip>

#include <stdlib.h>
#include <math.h>

#if defined(_MSC_VER)
// '<' : signed/unsigned mismatch
#   pragma warning(disable:4018)
// 'initializing' : conversion from '__int64' to 'int', possible loss of data
#   pragma warning(disable:4244)

#   if defined(ICE_64)
// '=' : conversion from 'size_t' to 'int', possible loss of data
// The result of fread() is a size_t and gets inserted into an int
#       pragma warning(disable:4267)
#   endif
#endif

#if defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wsign-compare"
#endif

// Avoid clang conversion warnings
#if defined(__clang__)
#   pragma clang diagnostic ignored "-Wconversion"
#   pragma clang diagnostic ignored "-Wsign-conversion"
#endif

#ifdef _MSC_VER
#   ifdef slice_wrap
#      undef slice_wrap
#      define slice_wrap() 1
#   endif
#   define YY_NO_UNISTD_H
#endif

#ifdef __SUNPRO_CC
#   ifdef slice_wrap
#      undef slice_wrap
#      define slice_wrap() 1
#   endif
#   ifdef ICE_64
#       pragma error_messages(off,truncwarn)
#   endif
#endif

using namespace std;
using namespace Slice;

namespace Slice
{

// Definitions for the case-insensitive keyword-token map.
static std::map<std::string, int> keywordMap;

void initScanner();
void preAction();
int checkKeyword(string&);
int checkIdentifier(string&);

}

#define YY_USER_INIT initScanner();
#define YY_USER_ACTION preAction();

#line 996 "src/Slice/Scanner.cpp"
#line 85 "src/Slice/Scanner.l"
  /* Changes the default prefix of 'yy' to 'slice_' for functions and variables in the generated code. */
  /* Instructs flex to not suppress any warnings when generating the scanner. */
  /* By default flex will 'default match' any text it encounters that doesn't match any specified rules. This
   * option disables default-matching (it throws 'syntax error' instead) to make grammar holes more obvious. */
  /* Enables the use of flex's built int start-condition state stack. */
  /* Ensures flex generates a scanner that supports reading 8-bit characters. */
  /* Directs flex to generate lookup tables that are better aligned in memory to
   * improve access speeds, even if this means allocating larger tables. */
  /* Enables batching for improved performance. */
  /* Directs flex to store matched text as 'char *' instead of char arrays, for improved performance. */
  /* Disables the scanner's interactive modes for improved performance. */
  /* Disables the generation of functions we don't use to reduce clutter, and possibly improve performance. */
#define YY_NO_INPUT 1
  /* List of start-condition states the scanner can be in. This lets the scanning be context dependent. */




  /* The scanner also has a built in 'INITIAL' start-condition state, which is the state the scanner is initialized in.
   * We use it solely to check for and consume any BOMs at the start of files. See Bug 3140. */
#line 1018 "src/Slice/Scanner.cpp"

#define INITIAL 0
#define SLICE 1
#define PREPROCESS 2
#define C_COMMENT 3
#define QUOTED_STRING 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state ( int _new_state );
    
    static void yy_pop_state ( void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 130 "src/Slice/Scanner.l"


  /* ========== Preprocessor Statements ========== */

  /* Matches the empty preprocessor directive. */
#line 1230 "src/Slice/Scanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (int) ((yy_c_buf_p) - (yytext_ptr));
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 130 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 129 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 135 "src/Slice/Scanner.l"
{
    yy_push_state(PREPROCESS);
}
	YY_BREAK
/* Matches a line preprocessor directive, but missing a line number. */
case 2:
YY_RULE_SETUP
#line 140 "src/Slice/Scanner.l"
{
    yy_push_state(PREPROCESS);
    unit->error("missing line number in line preprocessor directive");
}
	YY_BREAK
/* Matches a line preprocessor directive (optionally with a file specified afterwards). */
case 3:
#line 147 "src/Slice/Scanner.l"
case 4:
YY_RULE_SETUP
#line 147 "src/Slice/Scanner.l"
{
    yy_push_state(PREPROCESS);
    unit->scanPosition(yytext);
}
	YY_BREAK
/* Matches any non white-space character. This is a catch-all to report any invalid characters
   * found while scanning the directive. */
case 5:
YY_RULE_SETUP
#line 154 "src/Slice/Scanner.l"
{
    unit->error("encountered unexpected token while scanning preprocessor directive: `" + string(yytext) + "'");
}
	YY_BREAK
/* Matches a new-line character. This signals the end of the preprocessor statement. */
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 159 "src/Slice/Scanner.l"
{
    yy_pop_state();
    if(unit->currentLine() == 0)
    {
        BEGIN(INITIAL);
    }
    unit->nextLine();
}
	YY_BREAK
/* ========== Comments ========== */
/* Matches and consumes a C++ style comment. All characters after the
   * starting '//' and until the next new line are matched and discarded. */
case 7:
YY_RULE_SETUP
#line 172 "src/Slice/Scanner.l"
{}
	YY_BREAK
/* Matches the start of a C style comment. */
case 8:
YY_RULE_SETUP
#line 175 "src/Slice/Scanner.l"
{
    yy_push_state(C_COMMENT);
}
	YY_BREAK
/* TODO: use Flex's in-built line counter and merge this rule with the ones underneath it. */
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 180 "src/Slice/Scanner.l"
{
    yymore();
    unit->nextLine();
}
	YY_BREAK
/* Matches either a single literal '*' or as many other (non-'*') characters as it can (except newlines). */
case 10:
#line 187 "src/Slice/Scanner.l"
case 11:
YY_RULE_SETUP
#line 187 "src/Slice/Scanner.l"
{
    yymore();
}
	YY_BREAK
/* Matches the end of a C style comment. Flex always prefers to match the longest string it can,
   * so this rule will beat the previous one, which can only match a single '*' at a time. */
case 12:
YY_RULE_SETUP
#line 193 "src/Slice/Scanner.l"
{
    yy_pop_state();
    string comment(yytext);

    // The last 2 characters are the '*/' matched by this rule.
    unit->setComment(comment.substr(0, (comment.length() - 2)));
}
	YY_BREAK
/* Matches EOF, but only while parsing a C style comment. */
case YY_STATE_EOF(C_COMMENT):
#line 202 "src/Slice/Scanner.l"
{
    yy_pop_state();
    unit->warning(All, "encountered EOF while scanning a comment");
    unit->setComment(yytext);
}
	YY_BREAK
/* ========== Metadata ========== */
case 13:
YY_RULE_SETUP
#line 210 "src/Slice/Scanner.l"
{
    return ICE_METADATA_OPEN;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 214 "src/Slice/Scanner.l"
{
    return ICE_METADATA_CLOSE;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 218 "src/Slice/Scanner.l"
{
    return ICE_GLOBAL_METADATA_OPEN;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 222 "src/Slice/Scanner.l"
{
    return ICE_GLOBAL_METADATA_CLOSE;
}
	YY_BREAK
/* ========== Identifiers and Keywords ========== */
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 228 "src/Slice/Scanner.l"
{
    StringTokPtr ident = new StringTok;
    ident->v = *yytext == '\\' ? yytext + 1 : yytext;
    ident->v.erase(ident->v.find_first_of(" \t\v\n\r\f("));
    *yylvalp = ident;
    if(*yytext == '\\')
    {
        if(checkIdentifier(ident->v) == ICE_SCOPED_IDENTIFIER)
        {
            unit->error("Operation identifiers cannot be scoped: `" + (ident->v) + "'");
        }
        return ICE_IDENT_OPEN;
    }
    int st = checkKeyword(ident->v);
    if(st == ICE_IDENTIFIER)
    {
        return ICE_IDENT_OPEN;
    }
    else if(st == ICE_SCOPED_IDENTIFIER)
    {
        unit->error("Operation identifiers cannot be scoped: `" + (ident->v) + "'");
        return ICE_IDENT_OPEN;
    }
    else if(st == ICE_TAG)
    {
        return ICE_TAG_OPEN;
    }
    else if(st == ICE_OPTIONAL)
    {
        return ICE_OPTIONAL_OPEN;
    }
    else
    {
        return ICE_KEYWORD_OPEN;
    }
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 265 "src/Slice/Scanner.l"
{
    StringTokPtr ident = new StringTok;
    ident->v = *yytext == '\\' ? yytext + 1 : yytext;
    *yylvalp = ident;
    return *yytext == '\\' ? checkIdentifier(ident->v) : checkKeyword(ident->v);
}
	YY_BREAK
/* ========== Literals ========== */
/* Matches the start of a double-quoted string literal. */
case 19:
YY_RULE_SETUP
#line 275 "src/Slice/Scanner.l"
{
    yy_push_state(QUOTED_STRING);
    StringTokPtr str = new StringTok;
    str->literal = "\"";
    *yylvalp = new StringTok;
}
	YY_BREAK
/* Matches a single escaped backslash, or as many characters as it can,
   * except backslashes, new-lines, double quotes, and non-printable ASCII characters. */
case 20:
#line 285 "src/Slice/Scanner.l"
case 21:
YY_RULE_SETUP
#line 285 "src/Slice/Scanner.l"
{
    StringTokPtr str = StringTokPtr::dynamicCast(*yylvalp);
    str->v += yytext;
    str->literal += yytext;
}
	YY_BREAK
/* Matches a single escaped double-quote, single-quote, or question mark. */
case 22:
#line 293 "src/Slice/Scanner.l"
case 23:
#line 294 "src/Slice/Scanner.l"
case 24:
YY_RULE_SETUP
#line 294 "src/Slice/Scanner.l"
{
    StringTokPtr str = StringTokPtr::dynamicCast(*yylvalp);
    str->v += yytext[1];
    str->literal += yytext[1];
}
	YY_BREAK
/* Matches a single ANSI-C escape code pattern. */
case 25:
YY_RULE_SETUP
#line 301 "src/Slice/Scanner.l"
{
    StringTokPtr str = StringTokPtr::dynamicCast(*yylvalp);
    char ansiCode;
    switch(yytext[1])
    {
        case 'a': ansiCode = '\a'; break;
        case 'b': ansiCode = '\b'; break;
        case 'f': ansiCode = '\f'; break;
        case 'n': ansiCode = '\n'; break;
        case 'r': ansiCode = '\r'; break;
        case 't': ansiCode = '\t'; break;
        case 'v': ansiCode = '\v'; break;
    }
    str->v += ansiCode;
    str->literal += yytext;
}
	YY_BREAK
/* Matches a single escaped octal value. Octal literals are limited to a max of 3 digits. */
case 26:
YY_RULE_SETUP
#line 319 "src/Slice/Scanner.l"
{
    auto value = strtoull((yytext + 1), 0, 8);
    if(value > 255)
    {
        unit->error("octal escape sequence out of range: `\\" + string(yytext + 1) + "'");
    }

    StringTokPtr str = StringTokPtr::dynamicCast(*yylvalp);
    str->v += static_cast<char>(value);
    str->literal += yytext;
}
	YY_BREAK
/* Matches a single escaped hexadecimal value. Hexadecimal literals are limited to a max of 2 digits. */
case 27:
YY_RULE_SETUP
#line 332 "src/Slice/Scanner.l"
{
    auto value = strtoull((yytext + 2), 0, 16);
    assert(value >= 0 && value <= 255);

    StringTokPtr str = StringTokPtr::dynamicCast(*yylvalp);
    str->v += static_cast<char>(value);
    str->literal += yytext;
}
	YY_BREAK
/* Matches an empty hexadecimal escape value. */
case 28:
YY_RULE_SETUP
#line 342 "src/Slice/Scanner.l"
{
    unit->error("no hex digit in hex escape sequence");
    StringTokPtr str = StringTokPtr::dynamicCast(*yylvalp);
    str->literal += yytext;
}
	YY_BREAK
/* Matches a single 4-char or 8-char size universal character code. */
case 29:
#line 350 "src/Slice/Scanner.l"
case 30:
YY_RULE_SETUP
#line 350 "src/Slice/Scanner.l"
{
    auto codePoint = strtoull((yytext + 2), 0, 16);
    if(codePoint <= 0xdfff && codePoint >= 0xd800)
    {
        unit->error("a universal character name cannot designate a surrogate: `" + string(yytext) + "'");
    }
    StringTokPtr str = StringTokPtr::dynamicCast(*yylvalp);
    str->v += yytext;
    str->literal += yytext;
}
	YY_BREAK
/* Matches a universal character code that isn't the correct size, or uses incorrect characters. */
case 31:
#line 363 "src/Slice/Scanner.l"
case 32:
YY_RULE_SETUP
#line 363 "src/Slice/Scanner.l"
{
    unit->error("unknown escape sequence in string literal `" + string(yytext) + "'");
    StringTokPtr str = StringTokPtr::dynamicCast(*yylvalp);
    str->v += yytext;
    str->literal += yytext;
}
	YY_BREAK
/* Matches an escaped newline to allow for multi-line strings. The scanner consumes the newline. */
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 371 "src/Slice/Scanner.l"
{}
	YY_BREAK
/* Matches an unescaped newline, and issues an error. */
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 374 "src/Slice/Scanner.l"
{
    unit->error("encountered unescaped EOL while scanning a string literal.");
}
	YY_BREAK
/* Matches an unknown escape value. This rule has a lower priority than all the other escape rules because
   * it only matches 2 characters (the lowest any match), and it's beneath the others. */
case 35:
YY_RULE_SETUP
#line 380 "src/Slice/Scanner.l"
{
    unit->warning(All, "unknown escape sequence in string literal `" + string(yytext) + "'");

    StringTokPtr str = StringTokPtr::dynamicCast(*yylvalp);
    // Escape the entire sequence.
    str->v += "\\" + string(yytext);
    str->literal += yytext;
}
	YY_BREAK
/* Matches the end of a double-quoted string literal, but only while scanning a string literal. Flex always prefers
   * to match the longest string it can, so quotes preceeded with a literal '\' will match the rules above this one. */
case 36:
YY_RULE_SETUP
#line 391 "src/Slice/Scanner.l"
{
    yy_pop_state();
    StringTokPtr str = StringTokPtr::dynamicCast(*yylvalp);
    str->literal += yytext;
    return ICE_STRING_LITERAL;
}
	YY_BREAK
/* Matches EOF, but only while scanning a string literal. */
case YY_STATE_EOF(QUOTED_STRING):
#line 399 "src/Slice/Scanner.l"
{
    yy_pop_state();
    unit->error("encountered EOF while scanning a string literal");
    return ICE_STRING_LITERAL;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 405 "src/Slice/Scanner.l"
{
    IntegerTokPtr itp = new IntegerTok;
    itp->literal = string(yytext);
    *yylvalp = itp;
    if(!IceUtilInternal::stringToInt64(string(yytext), itp->v))
    {
        assert(itp->v != 0);
        unit->error("integer constant `" + string(yytext) + "' out of range");
    }
    return ICE_INTEGER_LITERAL;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 417 "src/Slice/Scanner.l"
{
    errno = 0;
    FloatingTokPtr ftp = new FloatingTok;
    *yylvalp = ftp;
    string literal(yytext);
    ftp->literal = literal;
    char lastChar = literal[literal.size() - 1];
    if(lastChar == 'f' || lastChar == 'F')
    {
        literal = literal.substr(0, literal.size() - 1);    // Clobber trailing 'f' or 'F' suffix
    }
    ftp->v = strtod(literal.c_str(), 0);
    if((ftp->v == HUGE_VAL || ftp->v == -HUGE_VAL) && errno == ERANGE)
    {
        unit->error("floating-point constant `" + string(yytext) + "' too large (overflow)");
    }
    else if(ftp->v == 0 && errno == ERANGE)
    {
        unit->error("floating-point constant `" + string(yytext) + "' too small (underflow)");
    }
    return ICE_FLOATING_POINT_LITERAL;
}
	YY_BREAK
/* ========== Whitespace and Others ========== */
/* Ignore and consume new-line characters. */
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 443 "src/Slice/Scanner.l"
{
    unit->nextLine();
}
	YY_BREAK
/* Ignore and consume UTF-8 BOMs, but only when the scanner has just started scanning a new file. */
case 40:
YY_RULE_SETUP
#line 448 "src/Slice/Scanner.l"
{}
	YY_BREAK
/* Ignore and consume any whitespace, other than new-lines. This rule is active in any start-condition */
case 41:
YY_RULE_SETUP
#line 451 "src/Slice/Scanner.l"
{}
	YY_BREAK
/* Matches a single non-printable ASCII character. This rule is active in any start-condition,
   * but is the second lowest priority rule. */
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 455 "src/Slice/Scanner.l"
{
    stringstream s;
    s << "illegal input character: '\\";
    s.width(3);
    s.fill('0');
    s << oct << static_cast<int>(static_cast<unsigned char>(yytext[0]));
    s << "'";
    unit->error(s.str());
    return BAD_CHAR;
}
	YY_BREAK
/* Matches any character (except for new-lines) not matched by another rule and forwards it to the parser.
   * This is the lowest priority rule. */
case 43:
YY_RULE_SETUP
#line 468 "src/Slice/Scanner.l"
{
    return yytext[0];
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 472 "src/Slice/Scanner.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1753 "src/Slice/Scanner.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SLICE):
case YY_STATE_EOF(PREPROCESS):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 130 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 130 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 129);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    static void yy_push_state (int  _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current token.
 * 
 */

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree( (yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 472 "src/Slice/Scanner.l"


namespace Slice {

// This function is always called once, right before scanning begins.
void initScanner()
{
    keywordMap = {
        {"module", ICE_MODULE},
        {"class", ICE_CLASS},
        {"interface", ICE_INTERFACE},
        {"exception", ICE_EXCEPTION},
        {"struct", ICE_STRUCT},
        {"sequence", ICE_SEQUENCE},
        {"dictionary", ICE_DICTIONARY},
        {"enum", ICE_ENUM},
        {"out", ICE_OUT},
        {"extends", ICE_EXTENDS},
        {"implements", ICE_IMPLEMENTS},
        {"throws", ICE_THROWS},
        {"void", ICE_VOID},
        {"byte", ICE_BYTE},
        {"bool", ICE_BOOL},
        {"short", ICE_SHORT},
        {"int", ICE_INT},
        {"long", ICE_LONG},
        {"float", ICE_FLOAT},
        {"double", ICE_DOUBLE},
        {"string", ICE_STRING},
        {"Object", ICE_OBJECT},
        {"const", ICE_CONST},
        {"false", ICE_FALSE},
        {"true", ICE_TRUE},
        {"idempotent", ICE_IDEMPOTENT},
        {"tag", ICE_TAG},
        // 'optional' is kept as an alias for 'tag' for backwards compatability.
        // We need a separate token type since we infer 'optional T' to mean 'tag T?'.
        // But for 'tag' we require an optional (nullable) type. No inferencing is done.
        {"optional", ICE_OPTIONAL},
        {"Value", ICE_VALUE}
    };
}

// This function is always called diectly after a match has been made, but directly before it's action block is run.
void preAction()
{
    // We only use the 'INITIAL' state to consume BOMs, which can only validly be the first match in a file. This
    // function being called means a match has already been made, so we switch states since BOMs are no longer valid.
    if(YY_START == INITIAL)
    {
        BEGIN(SLICE);
    }
}

// Check if an identifier looks like a keyword.
// If the identifier is a keyword, return the
// corresponding keyword token; otherwise, return
// an identifier token.
int checkKeyword(string& id)
{
    const auto pos = keywordMap.find(id);
    if(pos != keywordMap.end())
    {
        if(pos->first != id)
        {
            unit->error("illegal identifier: `" + id + "' differs from keyword `" + pos->first +
                        "' only in capitalization");
            id = pos->first;
        }
        return pos->second;
    }
    return checkIdentifier(id);
}

// Checks an identifier for any illegal syntax and
// determines whether it's scoped. If it is, this
// returns a scoped identifier token; otherwise this
// returns a normal identifier token.
int checkIdentifier(string& id)
{
    // check whether the identifier is scoped
    size_t scopeIndex = id.rfind("::");
    bool isScoped = scopeIndex != string::npos;
    string name;
    if(isScoped)
    {
        name = id.substr(scopeIndex + 2); // Only check the unscoped identifier for syntax
    }
    else
    {
        name = id;
    }

    // check the identifier for reserved suffixes
    static const string suffixBlacklist[] = { "Helper", "Holder", "Prx", "Ptr" };
    for(size_t i = 0; i < sizeof(suffixBlacklist) / sizeof(*suffixBlacklist); ++i)
    {
        if(name.find(suffixBlacklist[i], name.size() - suffixBlacklist[i].size()) != string::npos)
        {
            unit->error("illegal identifier `" + name + "': `" + suffixBlacklist[i] + "' suffix is reserved");
        }
    }

    // check the identifier for illegal underscores
    size_t index = name.find('_');
    if(index == 0)
    {
        unit->error("illegal leading underscore in identifier `" + name + "'");
    }
    else if(name.rfind('_') == (name.size() - 1))
    {
        unit->error("illegal trailing underscore in identifier `" + name + "'");
    }
    else if(name.find("__") != string::npos)
    {
        unit->error("illegal double underscore in identifier `" + name + "'");
    }
    else if(index != string::npos && unit->currentIncludeLevel() == 0 && !unit->allowUnderscore())
    {
        DefinitionContextPtr dc = unit->currentDefinitionContext();
        assert(dc);
        if(dc->findMetaData("underscore") != "underscore") // no 'underscore' global metadata
        {
            unit->error("illegal underscore in identifier `" + name + "'");
        }
    }

    // Check the identifier for illegal ice prefixes
    if(unit->currentIncludeLevel() == 0 && !unit->allowIcePrefix() && name.size() > 2)
    {
        DefinitionContextPtr dc = unit->currentDefinitionContext();
        assert(dc);
        if(dc->findMetaData("ice-prefix") != "ice-prefix") // no 'ice-prefix' metadata
        {
            string prefix3;
            prefix3 += ::tolower(static_cast<unsigned char>(name[0]));
            prefix3 += ::tolower(static_cast<unsigned char>(name[1]));
            prefix3 += ::tolower(static_cast<unsigned char>(name[2]));
            if(prefix3 == "ice")
            {
                unit->error("illegal identifier `" + name + "': `" + name.substr(0, 3) + "' prefix is reserved");
            }
        }
    }

    return isScoped ? ICE_SCOPED_IDENTIFIER : ICE_IDENTIFIER;
}

}

